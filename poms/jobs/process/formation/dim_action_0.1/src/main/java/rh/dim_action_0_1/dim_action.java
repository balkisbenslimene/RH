// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package rh.dim_action_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: dim_action Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20210915_1333-M12
 * @status
 */
public class dim_action implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private Object[] multiThreadLockWrite = new Object[0];

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "dim_action";
	private final String projectName = "RH";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Long> end_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Long>());
	private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Boolean>());
	public final java.util.List<String[]> globalBuffer = java.util.Collections
			.synchronizedList(new java.util.ArrayList<String[]>());

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					dim_action.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(dim_action.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputExcel_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		((java.util.Map) threadLocal.get()).put("status", "failure");

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class insert__dim_actionStruct implements routines.system.IPersistableRow<insert__dim_actionStruct> {
		final static byte[] commonByteArrayLock_RH_dim_action = new byte[0];
		static byte[] commonByteArray_RH_dim_action = new byte[0];

		public Integer Numero_d_action;

		public Integer getNumero_d_action() {
			return this.Numero_d_action;
		}

		public String Intitule_de_l_action;

		public String getIntitule_de_l_action() {
			return this.Intitule_de_l_action;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RH_dim_action.length) {
					if (length < 1024 && commonByteArray_RH_dim_action.length == 0) {
						commonByteArray_RH_dim_action = new byte[1024];
					} else {
						commonByteArray_RH_dim_action = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RH_dim_action, 0, length);
				strReturn = new String(commonByteArray_RH_dim_action, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RH_dim_action) {

				try {

					int length = 0;

					this.Numero_d_action = readInteger(dis);

					this.Intitule_de_l_action = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Numero_d_action, dos);

				// String

				writeString(this.Intitule_de_l_action, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Numero_d_action=" + String.valueOf(Numero_d_action));
			sb.append(",Intitule_de_l_action=" + Intitule_de_l_action);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(insert__dim_actionStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_RH_dim_action = new byte[0];
		static byte[] commonByteArray_RH_dim_action = new byte[0];

		public Integer Numero_d_action;

		public Integer getNumero_d_action() {
			return this.Numero_d_action;
		}

		public String Intitule_de_l_action;

		public String getIntitule_de_l_action() {
			return this.Intitule_de_l_action;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RH_dim_action.length) {
					if (length < 1024 && commonByteArray_RH_dim_action.length == 0) {
						commonByteArray_RH_dim_action = new byte[1024];
					} else {
						commonByteArray_RH_dim_action = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RH_dim_action, 0, length);
				strReturn = new String(commonByteArray_RH_dim_action, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RH_dim_action) {

				try {

					int length = 0;

					this.Numero_d_action = readInteger(dis);

					this.Intitule_de_l_action = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Numero_d_action, dos);

				// String

				writeString(this.Intitule_de_l_action, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Numero_d_action=" + String.valueOf(Numero_d_action));
			sb.append(",Intitule_de_l_action=" + Intitule_de_l_action);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OUT1Struct implements routines.system.IPersistableRow<OUT1Struct> {
		final static byte[] commonByteArrayLock_RH_dim_action = new byte[0];
		static byte[] commonByteArray_RH_dim_action = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Numero_d_action;

		public Integer getNumero_d_action() {
			return this.Numero_d_action;
		}

		public String Intitule_de_l_action;

		public String getIntitule_de_l_action() {
			return this.Intitule_de_l_action;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Numero_d_action == null) ? 0 : this.Numero_d_action.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OUT1Struct other = (OUT1Struct) obj;

			if (this.Numero_d_action == null) {
				if (other.Numero_d_action != null)
					return false;

			} else if (!this.Numero_d_action.equals(other.Numero_d_action))

				return false;

			return true;
		}

		public void copyDataTo(OUT1Struct other) {

			other.Numero_d_action = this.Numero_d_action;
			other.Intitule_de_l_action = this.Intitule_de_l_action;

		}

		public void copyKeysDataTo(OUT1Struct other) {

			other.Numero_d_action = this.Numero_d_action;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RH_dim_action.length) {
					if (length < 1024 && commonByteArray_RH_dim_action.length == 0) {
						commonByteArray_RH_dim_action = new byte[1024];
					} else {
						commonByteArray_RH_dim_action = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RH_dim_action, 0, length);
				strReturn = new String(commonByteArray_RH_dim_action, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RH_dim_action) {

				try {

					int length = 0;

					this.Numero_d_action = readInteger(dis);

					this.Intitule_de_l_action = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Numero_d_action, dos);

				// String

				writeString(this.Intitule_de_l_action, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Numero_d_action=" + String.valueOf(Numero_d_action));
			sb.append(",Intitule_de_l_action=" + Intitule_de_l_action);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OUT1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Numero_d_action, other.Numero_d_action);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_RH_dim_action = new byte[0];
		static byte[] commonByteArray_RH_dim_action = new byte[0];

		public Integer Numero_d_action;

		public Integer getNumero_d_action() {
			return this.Numero_d_action;
		}

		public String Intitule_de_l_action;

		public String getIntitule_de_l_action() {
			return this.Intitule_de_l_action;
		}

		public String Date_debut;

		public String getDate_debut() {
			return this.Date_debut;
		}

		public String Date_fin;

		public String getDate_fin() {
			return this.Date_fin;
		}

		public Integer Nb_jours;

		public Integer getNb_jours() {
			return this.Nb_jours;
		}

		public Integer Nb_d_heures;

		public Integer getNb_d_heures() {
			return this.Nb_d_heures;
		}

		public Integer Nb_de_participants;

		public Integer getNb_de_participants() {
			return this.Nb_de_participants;
		}

		public String Organisme;

		public String getOrganisme() {
			return this.Organisme;
		}

		public String Type_de_formation;

		public String getType_de_formation() {
			return this.Type_de_formation;
		}

		public String Cout_engage;

		public String getCout_engage() {
			return this.Cout_engage;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RH_dim_action.length) {
					if (length < 1024 && commonByteArray_RH_dim_action.length == 0) {
						commonByteArray_RH_dim_action = new byte[1024];
					} else {
						commonByteArray_RH_dim_action = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RH_dim_action, 0, length);
				strReturn = new String(commonByteArray_RH_dim_action, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RH_dim_action) {

				try {

					int length = 0;

					this.Numero_d_action = readInteger(dis);

					this.Intitule_de_l_action = readString(dis);

					this.Date_debut = readString(dis);

					this.Date_fin = readString(dis);

					this.Nb_jours = readInteger(dis);

					this.Nb_d_heures = readInteger(dis);

					this.Nb_de_participants = readInteger(dis);

					this.Organisme = readString(dis);

					this.Type_de_formation = readString(dis);

					this.Cout_engage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Numero_d_action, dos);

				// String

				writeString(this.Intitule_de_l_action, dos);

				// String

				writeString(this.Date_debut, dos);

				// String

				writeString(this.Date_fin, dos);

				// Integer

				writeInteger(this.Nb_jours, dos);

				// Integer

				writeInteger(this.Nb_d_heures, dos);

				// Integer

				writeInteger(this.Nb_de_participants, dos);

				// String

				writeString(this.Organisme, dos);

				// String

				writeString(this.Type_de_formation, dos);

				// String

				writeString(this.Cout_engage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Numero_d_action=" + String.valueOf(Numero_d_action));
			sb.append(",Intitule_de_l_action=" + Intitule_de_l_action);
			sb.append(",Date_debut=" + Date_debut);
			sb.append(",Date_fin=" + Date_fin);
			sb.append(",Nb_jours=" + String.valueOf(Nb_jours));
			sb.append(",Nb_d_heures=" + String.valueOf(Nb_d_heures));
			sb.append(",Nb_de_participants=" + String.valueOf(Nb_de_participants));
			sb.append(",Organisme=" + Organisme);
			sb.append(",Type_de_formation=" + Type_de_formation);
			sb.append(",Cout_engage=" + Cout_engage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OUT2Struct implements routines.system.IPersistableRow<OUT2Struct> {
		final static byte[] commonByteArrayLock_RH_dim_action = new byte[0];
		static byte[] commonByteArray_RH_dim_action = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Numero_de_l_action;

		public Integer getNumero_de_l_action() {
			return this.Numero_de_l_action;
		}

		public String Intitule_de_l_action;

		public String getIntitule_de_l_action() {
			return this.Intitule_de_l_action;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Numero_de_l_action == null) ? 0 : this.Numero_de_l_action.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OUT2Struct other = (OUT2Struct) obj;

			if (this.Numero_de_l_action == null) {
				if (other.Numero_de_l_action != null)
					return false;

			} else if (!this.Numero_de_l_action.equals(other.Numero_de_l_action))

				return false;

			return true;
		}

		public void copyDataTo(OUT2Struct other) {

			other.Numero_de_l_action = this.Numero_de_l_action;
			other.Intitule_de_l_action = this.Intitule_de_l_action;

		}

		public void copyKeysDataTo(OUT2Struct other) {

			other.Numero_de_l_action = this.Numero_de_l_action;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RH_dim_action.length) {
					if (length < 1024 && commonByteArray_RH_dim_action.length == 0) {
						commonByteArray_RH_dim_action = new byte[1024];
					} else {
						commonByteArray_RH_dim_action = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RH_dim_action, 0, length);
				strReturn = new String(commonByteArray_RH_dim_action, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RH_dim_action) {

				try {

					int length = 0;

					this.Numero_de_l_action = readInteger(dis);

					this.Intitule_de_l_action = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Numero_de_l_action, dos);

				// String

				writeString(this.Intitule_de_l_action, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Numero_de_l_action=" + String.valueOf(Numero_de_l_action));
			sb.append(",Intitule_de_l_action=" + Intitule_de_l_action);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OUT2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Numero_de_l_action, other.Numero_de_l_action);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_RH_dim_action = new byte[0];
		static byte[] commonByteArray_RH_dim_action = new byte[0];

		public Integer Numero_de_l_action;

		public Integer getNumero_de_l_action() {
			return this.Numero_de_l_action;
		}

		public String Intitule_de_l_action;

		public String getIntitule_de_l_action() {
			return this.Intitule_de_l_action;
		}

		public String Date_debut;

		public String getDate_debut() {
			return this.Date_debut;
		}

		public String Date_fin;

		public String getDate_fin() {
			return this.Date_fin;
		}

		public Integer Nb_jours;

		public Integer getNb_jours() {
			return this.Nb_jours;
		}

		public BigDecimal Nb_d_heures;

		public BigDecimal getNb_d_heures() {
			return this.Nb_d_heures;
		}

		public Integer Nb_de_participants;

		public Integer getNb_de_participants() {
			return this.Nb_de_participants;
		}

		public String Organisme;

		public String getOrganisme() {
			return this.Organisme;
		}

		public String Type_de_formation;

		public String getType_de_formation() {
			return this.Type_de_formation;
		}

		public String Cout_engage;

		public String getCout_engage() {
			return this.Cout_engage;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RH_dim_action.length) {
					if (length < 1024 && commonByteArray_RH_dim_action.length == 0) {
						commonByteArray_RH_dim_action = new byte[1024];
					} else {
						commonByteArray_RH_dim_action = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RH_dim_action, 0, length);
				strReturn = new String(commonByteArray_RH_dim_action, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RH_dim_action) {

				try {

					int length = 0;

					this.Numero_de_l_action = readInteger(dis);

					this.Intitule_de_l_action = readString(dis);

					this.Date_debut = readString(dis);

					this.Date_fin = readString(dis);

					this.Nb_jours = readInteger(dis);

					this.Nb_d_heures = (BigDecimal) dis.readObject();

					this.Nb_de_participants = readInteger(dis);

					this.Organisme = readString(dis);

					this.Type_de_formation = readString(dis);

					this.Cout_engage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Numero_de_l_action, dos);

				// String

				writeString(this.Intitule_de_l_action, dos);

				// String

				writeString(this.Date_debut, dos);

				// String

				writeString(this.Date_fin, dos);

				// Integer

				writeInteger(this.Nb_jours, dos);

				// BigDecimal

				dos.writeObject(this.Nb_d_heures);

				// Integer

				writeInteger(this.Nb_de_participants, dos);

				// String

				writeString(this.Organisme, dos);

				// String

				writeString(this.Type_de_formation, dos);

				// String

				writeString(this.Cout_engage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Numero_de_l_action=" + String.valueOf(Numero_de_l_action));
			sb.append(",Intitule_de_l_action=" + Intitule_de_l_action);
			sb.append(",Date_debut=" + Date_debut);
			sb.append(",Date_fin=" + Date_fin);
			sb.append(",Nb_jours=" + String.valueOf(Nb_jours));
			sb.append(",Nb_d_heures=" + String.valueOf(Nb_d_heures));
			sb.append(",Nb_de_participants=" + String.valueOf(Nb_de_participants));
			sb.append(",Organisme=" + Organisme);
			sb.append(",Type_de_formation=" + Type_de_formation);
			sb.append(",Cout_engage=" + Cout_engage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OUT3Struct implements routines.system.IPersistableRow<OUT3Struct> {
		final static byte[] commonByteArrayLock_RH_dim_action = new byte[0];
		static byte[] commonByteArray_RH_dim_action = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer num_action;

		public Integer getNum_action() {
			return this.num_action;
		}

		public String intitule_de_l_action;

		public String getIntitule_de_l_action() {
			return this.intitule_de_l_action;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.num_action == null) ? 0 : this.num_action.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OUT3Struct other = (OUT3Struct) obj;

			if (this.num_action == null) {
				if (other.num_action != null)
					return false;

			} else if (!this.num_action.equals(other.num_action))

				return false;

			return true;
		}

		public void copyDataTo(OUT3Struct other) {

			other.num_action = this.num_action;
			other.intitule_de_l_action = this.intitule_de_l_action;

		}

		public void copyKeysDataTo(OUT3Struct other) {

			other.num_action = this.num_action;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RH_dim_action.length) {
					if (length < 1024 && commonByteArray_RH_dim_action.length == 0) {
						commonByteArray_RH_dim_action = new byte[1024];
					} else {
						commonByteArray_RH_dim_action = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RH_dim_action, 0, length);
				strReturn = new String(commonByteArray_RH_dim_action, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RH_dim_action) {

				try {

					int length = 0;

					this.num_action = readInteger(dis);

					this.intitule_de_l_action = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.num_action, dos);

				// String

				writeString(this.intitule_de_l_action, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("num_action=" + String.valueOf(num_action));
			sb.append(",intitule_de_l_action=" + intitule_de_l_action);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OUT3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.num_action, other.num_action);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_RH_dim_action = new byte[0];
		static byte[] commonByteArray_RH_dim_action = new byte[0];

		public Integer num_action;

		public Integer getNum_action() {
			return this.num_action;
		}

		public String intitule_de_l_action;

		public String getIntitule_de_l_action() {
			return this.intitule_de_l_action;
		}

		public String date_debut;

		public String getDate_debut() {
			return this.date_debut;
		}

		public String date_fin;

		public String getDate_fin() {
			return this.date_fin;
		}

		public Integer nb_de_participants;

		public Integer getNb_de_participants() {
			return this.nb_de_participants;
		}

		public BigDecimal nb_de_jours;

		public BigDecimal getNb_de_jours() {
			return this.nb_de_jours;
		}

		public Integer nb_d_heures;

		public Integer getNb_d_heures() {
			return this.nb_d_heures;
		}

		public String organisme;

		public String getOrganisme() {
			return this.organisme;
		}

		public String mode;

		public String getMode() {
			return this.mode;
		}

		public String cout;

		public String getCout() {
			return this.cout;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RH_dim_action.length) {
					if (length < 1024 && commonByteArray_RH_dim_action.length == 0) {
						commonByteArray_RH_dim_action = new byte[1024];
					} else {
						commonByteArray_RH_dim_action = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RH_dim_action, 0, length);
				strReturn = new String(commonByteArray_RH_dim_action, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RH_dim_action) {

				try {

					int length = 0;

					this.num_action = readInteger(dis);

					this.intitule_de_l_action = readString(dis);

					this.date_debut = readString(dis);

					this.date_fin = readString(dis);

					this.nb_de_participants = readInteger(dis);

					this.nb_de_jours = (BigDecimal) dis.readObject();

					this.nb_d_heures = readInteger(dis);

					this.organisme = readString(dis);

					this.mode = readString(dis);

					this.cout = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.num_action, dos);

				// String

				writeString(this.intitule_de_l_action, dos);

				// String

				writeString(this.date_debut, dos);

				// String

				writeString(this.date_fin, dos);

				// Integer

				writeInteger(this.nb_de_participants, dos);

				// BigDecimal

				dos.writeObject(this.nb_de_jours);

				// Integer

				writeInteger(this.nb_d_heures, dos);

				// String

				writeString(this.organisme, dos);

				// String

				writeString(this.mode, dos);

				// String

				writeString(this.cout, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("num_action=" + String.valueOf(num_action));
			sb.append(",intitule_de_l_action=" + intitule_de_l_action);
			sb.append(",date_debut=" + date_debut);
			sb.append(",date_fin=" + date_fin);
			sb.append(",nb_de_participants=" + String.valueOf(nb_de_participants));
			sb.append(",nb_de_jours=" + String.valueOf(nb_de_jours));
			sb.append(",nb_d_heures=" + String.valueOf(nb_d_heures));
			sb.append(",organisme=" + organisme);
			sb.append(",mode=" + mode);
			sb.append(",cout=" + cout);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OUT4Struct implements routines.system.IPersistableRow<OUT4Struct> {
		final static byte[] commonByteArrayLock_RH_dim_action = new byte[0];
		static byte[] commonByteArray_RH_dim_action = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer num_action;

		public Integer getNum_action() {
			return this.num_action;
		}

		public String intitule_de_l_action;

		public String getIntitule_de_l_action() {
			return this.intitule_de_l_action;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.num_action == null) ? 0 : this.num_action.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OUT4Struct other = (OUT4Struct) obj;

			if (this.num_action == null) {
				if (other.num_action != null)
					return false;

			} else if (!this.num_action.equals(other.num_action))

				return false;

			return true;
		}

		public void copyDataTo(OUT4Struct other) {

			other.num_action = this.num_action;
			other.intitule_de_l_action = this.intitule_de_l_action;

		}

		public void copyKeysDataTo(OUT4Struct other) {

			other.num_action = this.num_action;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RH_dim_action.length) {
					if (length < 1024 && commonByteArray_RH_dim_action.length == 0) {
						commonByteArray_RH_dim_action = new byte[1024];
					} else {
						commonByteArray_RH_dim_action = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RH_dim_action, 0, length);
				strReturn = new String(commonByteArray_RH_dim_action, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RH_dim_action) {

				try {

					int length = 0;

					this.num_action = readInteger(dis);

					this.intitule_de_l_action = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.num_action, dos);

				// String

				writeString(this.intitule_de_l_action, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("num_action=" + String.valueOf(num_action));
			sb.append(",intitule_de_l_action=" + intitule_de_l_action);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OUT4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.num_action, other.num_action);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_RH_dim_action = new byte[0];
		static byte[] commonByteArray_RH_dim_action = new byte[0];

		public Integer num_action;

		public Integer getNum_action() {
			return this.num_action;
		}

		public String intitule_de_l_action;

		public String getIntitule_de_l_action() {
			return this.intitule_de_l_action;
		}

		public String date_debut;

		public String getDate_debut() {
			return this.date_debut;
		}

		public String date_fin;

		public String getDate_fin() {
			return this.date_fin;
		}

		public Integer nb_de_participants;

		public Integer getNb_de_participants() {
			return this.nb_de_participants;
		}

		public String nb_de_jours;

		public String getNb_de_jours() {
			return this.nb_de_jours;
		}

		public Integer nb_d_heures;

		public Integer getNb_d_heures() {
			return this.nb_d_heures;
		}

		public String organisme;

		public String getOrganisme() {
			return this.organisme;
		}

		public String mode;

		public String getMode() {
			return this.mode;
		}

		public String cout__HT;

		public String getCout__HT() {
			return this.cout__HT;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RH_dim_action.length) {
					if (length < 1024 && commonByteArray_RH_dim_action.length == 0) {
						commonByteArray_RH_dim_action = new byte[1024];
					} else {
						commonByteArray_RH_dim_action = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RH_dim_action, 0, length);
				strReturn = new String(commonByteArray_RH_dim_action, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RH_dim_action) {

				try {

					int length = 0;

					this.num_action = readInteger(dis);

					this.intitule_de_l_action = readString(dis);

					this.date_debut = readString(dis);

					this.date_fin = readString(dis);

					this.nb_de_participants = readInteger(dis);

					this.nb_de_jours = readString(dis);

					this.nb_d_heures = readInteger(dis);

					this.organisme = readString(dis);

					this.mode = readString(dis);

					this.cout__HT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.num_action, dos);

				// String

				writeString(this.intitule_de_l_action, dos);

				// String

				writeString(this.date_debut, dos);

				// String

				writeString(this.date_fin, dos);

				// Integer

				writeInteger(this.nb_de_participants, dos);

				// String

				writeString(this.nb_de_jours, dos);

				// Integer

				writeInteger(this.nb_d_heures, dos);

				// String

				writeString(this.organisme, dos);

				// String

				writeString(this.mode, dos);

				// String

				writeString(this.cout__HT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("num_action=" + String.valueOf(num_action));
			sb.append(",intitule_de_l_action=" + intitule_de_l_action);
			sb.append(",date_debut=" + date_debut);
			sb.append(",date_fin=" + date_fin);
			sb.append(",nb_de_participants=" + String.valueOf(nb_de_participants));
			sb.append(",nb_de_jours=" + nb_de_jours);
			sb.append(",nb_d_heures=" + String.valueOf(nb_d_heures));
			sb.append(",organisme=" + organisme);
			sb.append(",mode=" + mode);
			sb.append(",cout__HT=" + cout__HT);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
		final static byte[] commonByteArrayLock_RH_dim_action = new byte[0];
		static byte[] commonByteArray_RH_dim_action = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Numero_d_action;

		public Integer getNumero_d_action() {
			return this.Numero_d_action;
		}

		public String Intitule_de_l_action;

		public String getIntitule_de_l_action() {
			return this.Intitule_de_l_action;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Numero_d_action == null) ? 0 : this.Numero_d_action.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out5Struct other = (out5Struct) obj;

			if (this.Numero_d_action == null) {
				if (other.Numero_d_action != null)
					return false;

			} else if (!this.Numero_d_action.equals(other.Numero_d_action))

				return false;

			return true;
		}

		public void copyDataTo(out5Struct other) {

			other.Numero_d_action = this.Numero_d_action;
			other.Intitule_de_l_action = this.Intitule_de_l_action;

		}

		public void copyKeysDataTo(out5Struct other) {

			other.Numero_d_action = this.Numero_d_action;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RH_dim_action.length) {
					if (length < 1024 && commonByteArray_RH_dim_action.length == 0) {
						commonByteArray_RH_dim_action = new byte[1024];
					} else {
						commonByteArray_RH_dim_action = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RH_dim_action, 0, length);
				strReturn = new String(commonByteArray_RH_dim_action, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RH_dim_action) {

				try {

					int length = 0;

					this.Numero_d_action = readInteger(dis);

					this.Intitule_de_l_action = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Numero_d_action, dos);

				// String

				writeString(this.Intitule_de_l_action, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Numero_d_action=" + String.valueOf(Numero_d_action));
			sb.append(",Intitule_de_l_action=" + Intitule_de_l_action);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Numero_d_action, other.Numero_d_action);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_RH_dim_action = new byte[0];
		static byte[] commonByteArray_RH_dim_action = new byte[0];

		public Integer Num_action;

		public Integer getNum_action() {
			return this.Num_action;
		}

		public String Intitule_de_l_action;

		public String getIntitule_de_l_action() {
			return this.Intitule_de_l_action;
		}

		public String Date_debut;

		public String getDate_debut() {
			return this.Date_debut;
		}

		public String Date_fin;

		public String getDate_fin() {
			return this.Date_fin;
		}

		public Integer Nb_de_participants;

		public Integer getNb_de_participants() {
			return this.Nb_de_participants;
		}

		public String nb_de_jours;

		public String getNb_de_jours() {
			return this.nb_de_jours;
		}

		public String nb_d_heures;

		public String getNb_d_heures() {
			return this.nb_d_heures;
		}

		public String Organisme_Formateurs;

		public String getOrganisme_Formateurs() {
			return this.Organisme_Formateurs;
		}

		public String Mode;

		public String getMode() {
			return this.Mode;
		}

		public String Cout__HT;

		public String getCout__HT() {
			return this.Cout__HT;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RH_dim_action.length) {
					if (length < 1024 && commonByteArray_RH_dim_action.length == 0) {
						commonByteArray_RH_dim_action = new byte[1024];
					} else {
						commonByteArray_RH_dim_action = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RH_dim_action, 0, length);
				strReturn = new String(commonByteArray_RH_dim_action, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RH_dim_action) {

				try {

					int length = 0;

					this.Num_action = readInteger(dis);

					this.Intitule_de_l_action = readString(dis);

					this.Date_debut = readString(dis);

					this.Date_fin = readString(dis);

					this.Nb_de_participants = readInteger(dis);

					this.nb_de_jours = readString(dis);

					this.nb_d_heures = readString(dis);

					this.Organisme_Formateurs = readString(dis);

					this.Mode = readString(dis);

					this.Cout__HT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Num_action, dos);

				// String

				writeString(this.Intitule_de_l_action, dos);

				// String

				writeString(this.Date_debut, dos);

				// String

				writeString(this.Date_fin, dos);

				// Integer

				writeInteger(this.Nb_de_participants, dos);

				// String

				writeString(this.nb_de_jours, dos);

				// String

				writeString(this.nb_d_heures, dos);

				// String

				writeString(this.Organisme_Formateurs, dos);

				// String

				writeString(this.Mode, dos);

				// String

				writeString(this.Cout__HT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Num_action=" + String.valueOf(Num_action));
			sb.append(",Intitule_de_l_action=" + Intitule_de_l_action);
			sb.append(",Date_debut=" + Date_debut);
			sb.append(",Date_fin=" + Date_fin);
			sb.append(",Nb_de_participants=" + String.valueOf(Nb_de_participants));
			sb.append(",nb_de_jours=" + nb_de_jours);
			sb.append(",nb_d_heures=" + nb_d_heures);
			sb.append(",Organisme_Formateurs=" + Organisme_Formateurs);
			sb.append(",Mode=" + Mode);
			sb.append(",Cout__HT=" + Cout__HT);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OUT7Struct implements routines.system.IPersistableRow<OUT7Struct> {
		final static byte[] commonByteArrayLock_RH_dim_action = new byte[0];
		static byte[] commonByteArray_RH_dim_action = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Numero_d_action;

		public Integer getNumero_d_action() {
			return this.Numero_d_action;
		}

		public String Intitule_de_l_action;

		public String getIntitule_de_l_action() {
			return this.Intitule_de_l_action;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Numero_d_action == null) ? 0 : this.Numero_d_action.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OUT7Struct other = (OUT7Struct) obj;

			if (this.Numero_d_action == null) {
				if (other.Numero_d_action != null)
					return false;

			} else if (!this.Numero_d_action.equals(other.Numero_d_action))

				return false;

			return true;
		}

		public void copyDataTo(OUT7Struct other) {

			other.Numero_d_action = this.Numero_d_action;
			other.Intitule_de_l_action = this.Intitule_de_l_action;

		}

		public void copyKeysDataTo(OUT7Struct other) {

			other.Numero_d_action = this.Numero_d_action;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RH_dim_action.length) {
					if (length < 1024 && commonByteArray_RH_dim_action.length == 0) {
						commonByteArray_RH_dim_action = new byte[1024];
					} else {
						commonByteArray_RH_dim_action = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RH_dim_action, 0, length);
				strReturn = new String(commonByteArray_RH_dim_action, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RH_dim_action) {

				try {

					int length = 0;

					this.Numero_d_action = readInteger(dis);

					this.Intitule_de_l_action = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Numero_d_action, dos);

				// String

				writeString(this.Intitule_de_l_action, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Numero_d_action=" + String.valueOf(Numero_d_action));
			sb.append(",Intitule_de_l_action=" + Intitule_de_l_action);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OUT7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Numero_d_action, other.Numero_d_action);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_RH_dim_action = new byte[0];
		static byte[] commonByteArray_RH_dim_action = new byte[0];

		public Integer Num_action;

		public Integer getNum_action() {
			return this.Num_action;
		}

		public String Intitule_de_l_action;

		public String getIntitule_de_l_action() {
			return this.Intitule_de_l_action;
		}

		public String Date_debut;

		public String getDate_debut() {
			return this.Date_debut;
		}

		public String Date_fin;

		public String getDate_fin() {
			return this.Date_fin;
		}

		public Integer Nb_de_participants;

		public Integer getNb_de_participants() {
			return this.Nb_de_participants;
		}

		public BigDecimal nb_de_jours;

		public BigDecimal getNb_de_jours() {
			return this.nb_de_jours;
		}

		public BigDecimal nb_d_heures;

		public BigDecimal getNb_d_heures() {
			return this.nb_d_heures;
		}

		public String Organisme_Formateurs;

		public String getOrganisme_Formateurs() {
			return this.Organisme_Formateurs;
		}

		public String Mode;

		public String getMode() {
			return this.Mode;
		}

		public Integer Cout__HT;

		public Integer getCout__HT() {
			return this.Cout__HT;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RH_dim_action.length) {
					if (length < 1024 && commonByteArray_RH_dim_action.length == 0) {
						commonByteArray_RH_dim_action = new byte[1024];
					} else {
						commonByteArray_RH_dim_action = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RH_dim_action, 0, length);
				strReturn = new String(commonByteArray_RH_dim_action, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RH_dim_action) {

				try {

					int length = 0;

					this.Num_action = readInteger(dis);

					this.Intitule_de_l_action = readString(dis);

					this.Date_debut = readString(dis);

					this.Date_fin = readString(dis);

					this.Nb_de_participants = readInteger(dis);

					this.nb_de_jours = (BigDecimal) dis.readObject();

					this.nb_d_heures = (BigDecimal) dis.readObject();

					this.Organisme_Formateurs = readString(dis);

					this.Mode = readString(dis);

					this.Cout__HT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Num_action, dos);

				// String

				writeString(this.Intitule_de_l_action, dos);

				// String

				writeString(this.Date_debut, dos);

				// String

				writeString(this.Date_fin, dos);

				// Integer

				writeInteger(this.Nb_de_participants, dos);

				// BigDecimal

				dos.writeObject(this.nb_de_jours);

				// BigDecimal

				dos.writeObject(this.nb_d_heures);

				// String

				writeString(this.Organisme_Formateurs, dos);

				// String

				writeString(this.Mode, dos);

				// Integer

				writeInteger(this.Cout__HT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Num_action=" + String.valueOf(Num_action));
			sb.append(",Intitule_de_l_action=" + Intitule_de_l_action);
			sb.append(",Date_debut=" + Date_debut);
			sb.append(",Date_fin=" + Date_fin);
			sb.append(",Nb_de_participants=" + String.valueOf(Nb_de_participants));
			sb.append(",nb_de_jours=" + String.valueOf(nb_de_jours));
			sb.append(",nb_d_heures=" + String.valueOf(nb_d_heures));
			sb.append(",Organisme_Formateurs=" + Organisme_Formateurs);
			sb.append(",Mode=" + Mode);
			sb.append(",Cout__HT=" + String.valueOf(Cout__HT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OUT8Struct implements routines.system.IPersistableRow<OUT8Struct> {
		final static byte[] commonByteArrayLock_RH_dim_action = new byte[0];
		static byte[] commonByteArray_RH_dim_action = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Numero_d_action;

		public Integer getNumero_d_action() {
			return this.Numero_d_action;
		}

		public String Intitule_de_l_action;

		public String getIntitule_de_l_action() {
			return this.Intitule_de_l_action;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Numero_d_action == null) ? 0 : this.Numero_d_action.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OUT8Struct other = (OUT8Struct) obj;

			if (this.Numero_d_action == null) {
				if (other.Numero_d_action != null)
					return false;

			} else if (!this.Numero_d_action.equals(other.Numero_d_action))

				return false;

			return true;
		}

		public void copyDataTo(OUT8Struct other) {

			other.Numero_d_action = this.Numero_d_action;
			other.Intitule_de_l_action = this.Intitule_de_l_action;

		}

		public void copyKeysDataTo(OUT8Struct other) {

			other.Numero_d_action = this.Numero_d_action;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RH_dim_action.length) {
					if (length < 1024 && commonByteArray_RH_dim_action.length == 0) {
						commonByteArray_RH_dim_action = new byte[1024];
					} else {
						commonByteArray_RH_dim_action = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RH_dim_action, 0, length);
				strReturn = new String(commonByteArray_RH_dim_action, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RH_dim_action) {

				try {

					int length = 0;

					this.Numero_d_action = readInteger(dis);

					this.Intitule_de_l_action = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Numero_d_action, dos);

				// String

				writeString(this.Intitule_de_l_action, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Numero_d_action=" + String.valueOf(Numero_d_action));
			sb.append(",Intitule_de_l_action=" + Intitule_de_l_action);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OUT8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Numero_d_action, other.Numero_d_action);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_RH_dim_action = new byte[0];
		static byte[] commonByteArray_RH_dim_action = new byte[0];

		public Integer Num_action;

		public Integer getNum_action() {
			return this.Num_action;
		}

		public String Intitule_de_l_action;

		public String getIntitule_de_l_action() {
			return this.Intitule_de_l_action;
		}

		public String Date_debut;

		public String getDate_debut() {
			return this.Date_debut;
		}

		public String Date_fin;

		public String getDate_fin() {
			return this.Date_fin;
		}

		public Integer Nb_de_participants;

		public Integer getNb_de_participants() {
			return this.Nb_de_participants;
		}

		public BigDecimal nb_de_jours;

		public BigDecimal getNb_de_jours() {
			return this.nb_de_jours;
		}

		public BigDecimal nb_d_heures;

		public BigDecimal getNb_d_heures() {
			return this.nb_d_heures;
		}

		public String Organisme__Formateurs;

		public String getOrganisme__Formateurs() {
			return this.Organisme__Formateurs;
		}

		public String Mode;

		public String getMode() {
			return this.Mode;
		}

		public String Cout__HT;

		public String getCout__HT() {
			return this.Cout__HT;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RH_dim_action.length) {
					if (length < 1024 && commonByteArray_RH_dim_action.length == 0) {
						commonByteArray_RH_dim_action = new byte[1024];
					} else {
						commonByteArray_RH_dim_action = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RH_dim_action, 0, length);
				strReturn = new String(commonByteArray_RH_dim_action, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RH_dim_action) {

				try {

					int length = 0;

					this.Num_action = readInteger(dis);

					this.Intitule_de_l_action = readString(dis);

					this.Date_debut = readString(dis);

					this.Date_fin = readString(dis);

					this.Nb_de_participants = readInteger(dis);

					this.nb_de_jours = (BigDecimal) dis.readObject();

					this.nb_d_heures = (BigDecimal) dis.readObject();

					this.Organisme__Formateurs = readString(dis);

					this.Mode = readString(dis);

					this.Cout__HT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Num_action, dos);

				// String

				writeString(this.Intitule_de_l_action, dos);

				// String

				writeString(this.Date_debut, dos);

				// String

				writeString(this.Date_fin, dos);

				// Integer

				writeInteger(this.Nb_de_participants, dos);

				// BigDecimal

				dos.writeObject(this.nb_de_jours);

				// BigDecimal

				dos.writeObject(this.nb_d_heures);

				// String

				writeString(this.Organisme__Formateurs, dos);

				// String

				writeString(this.Mode, dos);

				// String

				writeString(this.Cout__HT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Num_action=" + String.valueOf(Num_action));
			sb.append(",Intitule_de_l_action=" + Intitule_de_l_action);
			sb.append(",Date_debut=" + Date_debut);
			sb.append(",Date_fin=" + Date_fin);
			sb.append(",Nb_de_participants=" + String.valueOf(Nb_de_participants));
			sb.append(",nb_de_jours=" + String.valueOf(nb_de_jours));
			sb.append(",nb_d_heures=" + String.valueOf(nb_d_heures));
			sb.append(",Organisme__Formateurs=" + Organisme__Formateurs);
			sb.append(",Mode=" + Mode);
			sb.append(",Cout__HT=" + Cout__HT);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OUT9Struct implements routines.system.IPersistableRow<OUT9Struct> {
		final static byte[] commonByteArrayLock_RH_dim_action = new byte[0];
		static byte[] commonByteArray_RH_dim_action = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Numero_d_action;

		public Integer getNumero_d_action() {
			return this.Numero_d_action;
		}

		public String Intitule_de_l_action;

		public String getIntitule_de_l_action() {
			return this.Intitule_de_l_action;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Numero_d_action == null) ? 0 : this.Numero_d_action.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OUT9Struct other = (OUT9Struct) obj;

			if (this.Numero_d_action == null) {
				if (other.Numero_d_action != null)
					return false;

			} else if (!this.Numero_d_action.equals(other.Numero_d_action))

				return false;

			return true;
		}

		public void copyDataTo(OUT9Struct other) {

			other.Numero_d_action = this.Numero_d_action;
			other.Intitule_de_l_action = this.Intitule_de_l_action;

		}

		public void copyKeysDataTo(OUT9Struct other) {

			other.Numero_d_action = this.Numero_d_action;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RH_dim_action.length) {
					if (length < 1024 && commonByteArray_RH_dim_action.length == 0) {
						commonByteArray_RH_dim_action = new byte[1024];
					} else {
						commonByteArray_RH_dim_action = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RH_dim_action, 0, length);
				strReturn = new String(commonByteArray_RH_dim_action, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RH_dim_action) {

				try {

					int length = 0;

					this.Numero_d_action = readInteger(dis);

					this.Intitule_de_l_action = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Numero_d_action, dos);

				// String

				writeString(this.Intitule_de_l_action, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Numero_d_action=" + String.valueOf(Numero_d_action));
			sb.append(",Intitule_de_l_action=" + Intitule_de_l_action);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OUT9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Numero_d_action, other.Numero_d_action);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_RH_dim_action = new byte[0];
		static byte[] commonByteArray_RH_dim_action = new byte[0];

		public Integer Num_action;

		public Integer getNum_action() {
			return this.Num_action;
		}

		public String Intitul__de_l_action;

		public String getIntitul__de_l_action() {
			return this.Intitul__de_l_action;
		}

		public String Date_d_but;

		public String getDate_d_but() {
			return this.Date_d_but;
		}

		public String Date_fin;

		public String getDate_fin() {
			return this.Date_fin;
		}

		public Integer Nb_de_participants;

		public Integer getNb_de_participants() {
			return this.Nb_de_participants;
		}

		public String nb_de_jours;

		public String getNb_de_jours() {
			return this.nb_de_jours;
		}

		public Integer nb_d_heures;

		public Integer getNb_d_heures() {
			return this.nb_d_heures;
		}

		public String Organisme__Formateurs;

		public String getOrganisme__Formateurs() {
			return this.Organisme__Formateurs;
		}

		public String Mode;

		public String getMode() {
			return this.Mode;
		}

		public Integer Co_t__HT;

		public Integer getCo_t__HT() {
			return this.Co_t__HT;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RH_dim_action.length) {
					if (length < 1024 && commonByteArray_RH_dim_action.length == 0) {
						commonByteArray_RH_dim_action = new byte[1024];
					} else {
						commonByteArray_RH_dim_action = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RH_dim_action, 0, length);
				strReturn = new String(commonByteArray_RH_dim_action, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RH_dim_action) {

				try {

					int length = 0;

					this.Num_action = readInteger(dis);

					this.Intitul__de_l_action = readString(dis);

					this.Date_d_but = readString(dis);

					this.Date_fin = readString(dis);

					this.Nb_de_participants = readInteger(dis);

					this.nb_de_jours = readString(dis);

					this.nb_d_heures = readInteger(dis);

					this.Organisme__Formateurs = readString(dis);

					this.Mode = readString(dis);

					this.Co_t__HT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Num_action, dos);

				// String

				writeString(this.Intitul__de_l_action, dos);

				// String

				writeString(this.Date_d_but, dos);

				// String

				writeString(this.Date_fin, dos);

				// Integer

				writeInteger(this.Nb_de_participants, dos);

				// String

				writeString(this.nb_de_jours, dos);

				// Integer

				writeInteger(this.nb_d_heures, dos);

				// String

				writeString(this.Organisme__Formateurs, dos);

				// String

				writeString(this.Mode, dos);

				// Integer

				writeInteger(this.Co_t__HT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Num_action=" + String.valueOf(Num_action));
			sb.append(",Intitul__de_l_action=" + Intitul__de_l_action);
			sb.append(",Date_d_but=" + Date_d_but);
			sb.append(",Date_fin=" + Date_fin);
			sb.append(",Nb_de_participants=" + String.valueOf(Nb_de_participants));
			sb.append(",nb_de_jours=" + nb_de_jours);
			sb.append(",nb_d_heures=" + String.valueOf(nb_d_heures));
			sb.append(",Organisme__Formateurs=" + Organisme__Formateurs);
			sb.append(",Mode=" + Mode);
			sb.append(",Co_t__HT=" + String.valueOf(Co_t__HT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OUT10Struct implements routines.system.IPersistableRow<OUT10Struct> {
		final static byte[] commonByteArrayLock_RH_dim_action = new byte[0];
		static byte[] commonByteArray_RH_dim_action = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Numero_d_action;

		public Integer getNumero_d_action() {
			return this.Numero_d_action;
		}

		public String Intitule_de_l_action;

		public String getIntitule_de_l_action() {
			return this.Intitule_de_l_action;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Numero_d_action == null) ? 0 : this.Numero_d_action.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OUT10Struct other = (OUT10Struct) obj;

			if (this.Numero_d_action == null) {
				if (other.Numero_d_action != null)
					return false;

			} else if (!this.Numero_d_action.equals(other.Numero_d_action))

				return false;

			return true;
		}

		public void copyDataTo(OUT10Struct other) {

			other.Numero_d_action = this.Numero_d_action;
			other.Intitule_de_l_action = this.Intitule_de_l_action;

		}

		public void copyKeysDataTo(OUT10Struct other) {

			other.Numero_d_action = this.Numero_d_action;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RH_dim_action.length) {
					if (length < 1024 && commonByteArray_RH_dim_action.length == 0) {
						commonByteArray_RH_dim_action = new byte[1024];
					} else {
						commonByteArray_RH_dim_action = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RH_dim_action, 0, length);
				strReturn = new String(commonByteArray_RH_dim_action, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RH_dim_action) {

				try {

					int length = 0;

					this.Numero_d_action = readInteger(dis);

					this.Intitule_de_l_action = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Numero_d_action, dos);

				// String

				writeString(this.Intitule_de_l_action, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Numero_d_action=" + String.valueOf(Numero_d_action));
			sb.append(",Intitule_de_l_action=" + Intitule_de_l_action);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OUT10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Numero_d_action, other.Numero_d_action);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5_0Struct implements routines.system.IPersistableRow<row5_0Struct> {
		final static byte[] commonByteArrayLock_RH_dim_action = new byte[0];
		static byte[] commonByteArray_RH_dim_action = new byte[0];

		public Integer Num_action;

		public Integer getNum_action() {
			return this.Num_action;
		}

		public String Intitul__de_l_action;

		public String getIntitul__de_l_action() {
			return this.Intitul__de_l_action;
		}

		public String Date_d_but;

		public String getDate_d_but() {
			return this.Date_d_but;
		}

		public String Date_fin;

		public String getDate_fin() {
			return this.Date_fin;
		}

		public Integer Nb_de_participants;

		public Integer getNb_de_participants() {
			return this.Nb_de_participants;
		}

		public String nb_de_jours;

		public String getNb_de_jours() {
			return this.nb_de_jours;
		}

		public String nb_jours_total;

		public String getNb_jours_total() {
			return this.nb_jours_total;
		}

		public Integer nb_d_heures;

		public Integer getNb_d_heures() {
			return this.nb_d_heures;
		}

		public Integer nb_d_heures_total;

		public Integer getNb_d_heures_total() {
			return this.nb_d_heures_total;
		}

		public String Organisme__Formateurs;

		public String getOrganisme__Formateurs() {
			return this.Organisme__Formateurs;
		}

		public String Mode;

		public String getMode() {
			return this.Mode;
		}

		public String Co_t__HT;

		public String getCo_t__HT() {
			return this.Co_t__HT;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RH_dim_action.length) {
					if (length < 1024 && commonByteArray_RH_dim_action.length == 0) {
						commonByteArray_RH_dim_action = new byte[1024];
					} else {
						commonByteArray_RH_dim_action = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RH_dim_action, 0, length);
				strReturn = new String(commonByteArray_RH_dim_action, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RH_dim_action) {

				try {

					int length = 0;

					this.Num_action = readInteger(dis);

					this.Intitul__de_l_action = readString(dis);

					this.Date_d_but = readString(dis);

					this.Date_fin = readString(dis);

					this.Nb_de_participants = readInteger(dis);

					this.nb_de_jours = readString(dis);

					this.nb_jours_total = readString(dis);

					this.nb_d_heures = readInteger(dis);

					this.nb_d_heures_total = readInteger(dis);

					this.Organisme__Formateurs = readString(dis);

					this.Mode = readString(dis);

					this.Co_t__HT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Num_action, dos);

				// String

				writeString(this.Intitul__de_l_action, dos);

				// String

				writeString(this.Date_d_but, dos);

				// String

				writeString(this.Date_fin, dos);

				// Integer

				writeInteger(this.Nb_de_participants, dos);

				// String

				writeString(this.nb_de_jours, dos);

				// String

				writeString(this.nb_jours_total, dos);

				// Integer

				writeInteger(this.nb_d_heures, dos);

				// Integer

				writeInteger(this.nb_d_heures_total, dos);

				// String

				writeString(this.Organisme__Formateurs, dos);

				// String

				writeString(this.Mode, dos);

				// String

				writeString(this.Co_t__HT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Num_action=" + String.valueOf(Num_action));
			sb.append(",Intitul__de_l_action=" + Intitul__de_l_action);
			sb.append(",Date_d_but=" + Date_d_but);
			sb.append(",Date_fin=" + Date_fin);
			sb.append(",Nb_de_participants=" + String.valueOf(Nb_de_participants));
			sb.append(",nb_de_jours=" + nb_de_jours);
			sb.append(",nb_jours_total=" + nb_jours_total);
			sb.append(",nb_d_heures=" + String.valueOf(nb_d_heures));
			sb.append(",nb_d_heures_total=" + String.valueOf(nb_d_heures_total));
			sb.append(",Organisme__Formateurs=" + Organisme__Formateurs);
			sb.append(",Mode=" + Mode);
			sb.append(",Co_t__HT=" + Co_t__HT);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OUT11Struct implements routines.system.IPersistableRow<OUT11Struct> {
		final static byte[] commonByteArrayLock_RH_dim_action = new byte[0];
		static byte[] commonByteArray_RH_dim_action = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Numero_d_action;

		public Integer getNumero_d_action() {
			return this.Numero_d_action;
		}

		public String Intitule_de_l_action;

		public String getIntitule_de_l_action() {
			return this.Intitule_de_l_action;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Numero_d_action == null) ? 0 : this.Numero_d_action.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OUT11Struct other = (OUT11Struct) obj;

			if (this.Numero_d_action == null) {
				if (other.Numero_d_action != null)
					return false;

			} else if (!this.Numero_d_action.equals(other.Numero_d_action))

				return false;

			return true;
		}

		public void copyDataTo(OUT11Struct other) {

			other.Numero_d_action = this.Numero_d_action;
			other.Intitule_de_l_action = this.Intitule_de_l_action;

		}

		public void copyKeysDataTo(OUT11Struct other) {

			other.Numero_d_action = this.Numero_d_action;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RH_dim_action.length) {
					if (length < 1024 && commonByteArray_RH_dim_action.length == 0) {
						commonByteArray_RH_dim_action = new byte[1024];
					} else {
						commonByteArray_RH_dim_action = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RH_dim_action, 0, length);
				strReturn = new String(commonByteArray_RH_dim_action, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RH_dim_action) {

				try {

					int length = 0;

					this.Numero_d_action = readInteger(dis);

					this.Intitule_de_l_action = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Numero_d_action, dos);

				// String

				writeString(this.Intitule_de_l_action, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Numero_d_action=" + String.valueOf(Numero_d_action));
			sb.append(",Intitule_de_l_action=" + Intitule_de_l_action);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OUT11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Numero_d_action, other.Numero_d_action);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6_0Struct implements routines.system.IPersistableRow<row6_0Struct> {
		final static byte[] commonByteArrayLock_RH_dim_action = new byte[0];
		static byte[] commonByteArray_RH_dim_action = new byte[0];

		public Integer Num_action;

		public Integer getNum_action() {
			return this.Num_action;
		}

		public String Intitule_de_l_action;

		public String getIntitule_de_l_action() {
			return this.Intitule_de_l_action;
		}

		public String Date_debut;

		public String getDate_debut() {
			return this.Date_debut;
		}

		public String Date_fin;

		public String getDate_fin() {
			return this.Date_fin;
		}

		public Integer Nb_de_participants;

		public Integer getNb_de_participants() {
			return this.Nb_de_participants;
		}

		public BigDecimal nb_de_jours;

		public BigDecimal getNb_de_jours() {
			return this.nb_de_jours;
		}

		public BigDecimal nb_jours_total;

		public BigDecimal getNb_jours_total() {
			return this.nb_jours_total;
		}

		public BigDecimal nb_d_heures;

		public BigDecimal getNb_d_heures() {
			return this.nb_d_heures;
		}

		public BigDecimal nb_d_heures_total;

		public BigDecimal getNb_d_heures_total() {
			return this.nb_d_heures_total;
		}

		public String Organisme__Formateurs;

		public String getOrganisme__Formateurs() {
			return this.Organisme__Formateurs;
		}

		public String Mode;

		public String getMode() {
			return this.Mode;
		}

		public String Cout__HT;

		public String getCout__HT() {
			return this.Cout__HT;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RH_dim_action.length) {
					if (length < 1024 && commonByteArray_RH_dim_action.length == 0) {
						commonByteArray_RH_dim_action = new byte[1024];
					} else {
						commonByteArray_RH_dim_action = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RH_dim_action, 0, length);
				strReturn = new String(commonByteArray_RH_dim_action, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RH_dim_action) {

				try {

					int length = 0;

					this.Num_action = readInteger(dis);

					this.Intitule_de_l_action = readString(dis);

					this.Date_debut = readString(dis);

					this.Date_fin = readString(dis);

					this.Nb_de_participants = readInteger(dis);

					this.nb_de_jours = (BigDecimal) dis.readObject();

					this.nb_jours_total = (BigDecimal) dis.readObject();

					this.nb_d_heures = (BigDecimal) dis.readObject();

					this.nb_d_heures_total = (BigDecimal) dis.readObject();

					this.Organisme__Formateurs = readString(dis);

					this.Mode = readString(dis);

					this.Cout__HT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Num_action, dos);

				// String

				writeString(this.Intitule_de_l_action, dos);

				// String

				writeString(this.Date_debut, dos);

				// String

				writeString(this.Date_fin, dos);

				// Integer

				writeInteger(this.Nb_de_participants, dos);

				// BigDecimal

				dos.writeObject(this.nb_de_jours);

				// BigDecimal

				dos.writeObject(this.nb_jours_total);

				// BigDecimal

				dos.writeObject(this.nb_d_heures);

				// BigDecimal

				dos.writeObject(this.nb_d_heures_total);

				// String

				writeString(this.Organisme__Formateurs, dos);

				// String

				writeString(this.Mode, dos);

				// String

				writeString(this.Cout__HT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Num_action=" + String.valueOf(Num_action));
			sb.append(",Intitule_de_l_action=" + Intitule_de_l_action);
			sb.append(",Date_debut=" + Date_debut);
			sb.append(",Date_fin=" + Date_fin);
			sb.append(",Nb_de_participants=" + String.valueOf(Nb_de_participants));
			sb.append(",nb_de_jours=" + String.valueOf(nb_de_jours));
			sb.append(",nb_jours_total=" + String.valueOf(nb_jours_total));
			sb.append(",nb_d_heures=" + String.valueOf(nb_d_heures));
			sb.append(",nb_d_heures_total=" + String.valueOf(nb_d_heures_total));
			sb.append(",Organisme__Formateurs=" + Organisme__Formateurs);
			sb.append(",Mode=" + Mode);
			sb.append(",Cout__HT=" + Cout__HT);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class outStruct implements routines.system.IPersistableRow<outStruct> {
		final static byte[] commonByteArrayLock_RH_dim_action = new byte[0];
		static byte[] commonByteArray_RH_dim_action = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Numero_d_action;

		public Integer getNumero_d_action() {
			return this.Numero_d_action;
		}

		public String Intitule_de_l_action;

		public String getIntitule_de_l_action() {
			return this.Intitule_de_l_action;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Numero_d_action == null) ? 0 : this.Numero_d_action.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final outStruct other = (outStruct) obj;

			if (this.Numero_d_action == null) {
				if (other.Numero_d_action != null)
					return false;

			} else if (!this.Numero_d_action.equals(other.Numero_d_action))

				return false;

			return true;
		}

		public void copyDataTo(outStruct other) {

			other.Numero_d_action = this.Numero_d_action;
			other.Intitule_de_l_action = this.Intitule_de_l_action;

		}

		public void copyKeysDataTo(outStruct other) {

			other.Numero_d_action = this.Numero_d_action;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RH_dim_action.length) {
					if (length < 1024 && commonByteArray_RH_dim_action.length == 0) {
						commonByteArray_RH_dim_action = new byte[1024];
					} else {
						commonByteArray_RH_dim_action = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RH_dim_action, 0, length);
				strReturn = new String(commonByteArray_RH_dim_action, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RH_dim_action) {

				try {

					int length = 0;

					this.Numero_d_action = readInteger(dis);

					this.Intitule_de_l_action = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Numero_d_action, dos);

				// String

				writeString(this.Intitule_de_l_action, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Numero_d_action=" + String.valueOf(Numero_d_action));
			sb.append(",Intitule_de_l_action=" + Intitule_de_l_action);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Numero_d_action, other.Numero_d_action);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_RH_dim_action = new byte[0];
		static byte[] commonByteArray_RH_dim_action = new byte[0];

		public Integer Num_action;

		public Integer getNum_action() {
			return this.Num_action;
		}

		public String Intitul__de_l_action;

		public String getIntitul__de_l_action() {
			return this.Intitul__de_l_action;
		}

		public String Date_d_but;

		public String getDate_d_but() {
			return this.Date_d_but;
		}

		public String Date_fin;

		public String getDate_fin() {
			return this.Date_fin;
		}

		public Integer Nb_de_participants;

		public Integer getNb_de_participants() {
			return this.Nb_de_participants;
		}

		public String nb_de_jours;

		public String getNb_de_jours() {
			return this.nb_de_jours;
		}

		public String nb_jours_total;

		public String getNb_jours_total() {
			return this.nb_jours_total;
		}

		public Integer nb_d_heures;

		public Integer getNb_d_heures() {
			return this.nb_d_heures;
		}

		public Integer nb_d_heures_total;

		public Integer getNb_d_heures_total() {
			return this.nb_d_heures_total;
		}

		public String Organisme__Formateurs;

		public String getOrganisme__Formateurs() {
			return this.Organisme__Formateurs;
		}

		public String Mode;

		public String getMode() {
			return this.Mode;
		}

		public Integer Co_t__HT;

		public Integer getCo_t__HT() {
			return this.Co_t__HT;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_RH_dim_action.length) {
					if (length < 1024 && commonByteArray_RH_dim_action.length == 0) {
						commonByteArray_RH_dim_action = new byte[1024];
					} else {
						commonByteArray_RH_dim_action = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_RH_dim_action, 0, length);
				strReturn = new String(commonByteArray_RH_dim_action, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_RH_dim_action) {

				try {

					int length = 0;

					this.Num_action = readInteger(dis);

					this.Intitul__de_l_action = readString(dis);

					this.Date_d_but = readString(dis);

					this.Date_fin = readString(dis);

					this.Nb_de_participants = readInteger(dis);

					this.nb_de_jours = readString(dis);

					this.nb_jours_total = readString(dis);

					this.nb_d_heures = readInteger(dis);

					this.nb_d_heures_total = readInteger(dis);

					this.Organisme__Formateurs = readString(dis);

					this.Mode = readString(dis);

					this.Co_t__HT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Num_action, dos);

				// String

				writeString(this.Intitul__de_l_action, dos);

				// String

				writeString(this.Date_d_but, dos);

				// String

				writeString(this.Date_fin, dos);

				// Integer

				writeInteger(this.Nb_de_participants, dos);

				// String

				writeString(this.nb_de_jours, dos);

				// String

				writeString(this.nb_jours_total, dos);

				// Integer

				writeInteger(this.nb_d_heures, dos);

				// Integer

				writeInteger(this.nb_d_heures_total, dos);

				// String

				writeString(this.Organisme__Formateurs, dos);

				// String

				writeString(this.Mode, dos);

				// Integer

				writeInteger(this.Co_t__HT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Num_action=" + String.valueOf(Num_action));
			sb.append(",Intitul__de_l_action=" + Intitul__de_l_action);
			sb.append(",Date_d_but=" + Date_d_but);
			sb.append(",Date_fin=" + Date_fin);
			sb.append(",Nb_de_participants=" + String.valueOf(Nb_de_participants));
			sb.append(",nb_de_jours=" + nb_de_jours);
			sb.append(",nb_jours_total=" + nb_jours_total);
			sb.append(",nb_d_heures=" + String.valueOf(nb_d_heures));
			sb.append(",nb_d_heures_total=" + String.valueOf(nb_d_heures_total));
			sb.append(",Organisme__Formateurs=" + Organisme__Formateurs);
			sb.append(",Mode=" + Mode);
			sb.append(",Co_t__HT=" + String.valueOf(Co_t__HT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				OUT1Struct OUT1 = new OUT1Struct();

				row2Struct row2 = new row2Struct();
				OUT2Struct OUT2 = new OUT2Struct();

				row3Struct row3 = new row3Struct();
				OUT3Struct OUT3 = new OUT3Struct();

				row4Struct row4 = new row4Struct();
				OUT4Struct OUT4 = new OUT4Struct();

				row5Struct row5 = new row5Struct();
				out5Struct out5 = new out5Struct();

				row6Struct row6 = new row6Struct();
				OUT7Struct OUT7 = new OUT7Struct();

				row7Struct row7 = new row7Struct();
				OUT8Struct OUT8 = new OUT8Struct();

				row8Struct row8 = new row8Struct();
				OUT9Struct OUT9 = new OUT9Struct();

				row5_0Struct row5_0 = new row5_0Struct();
				OUT10Struct OUT10 = new OUT10Struct();

				row6_0Struct row6_0 = new row6_0Struct();
				OUT11Struct OUT11 = new OUT11Struct();

				row9Struct row9 = new row9Struct();
				outStruct out = new outStruct();

				row12Struct row12 = new row12Struct();
				insert__dim_actionStruct insert__dim_action = new insert__dim_actionStruct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "insert__dim_action");
				}

				int tos_count_tDBOutput_2 = 0;

				String dbschema_tDBOutput_2 = null;
				dbschema_tDBOutput_2 = "public";

				String tableName_tDBOutput_2 = null;
				if (dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = ("dim_action");
				} else {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("dim_action");
				}

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rowsToCommitCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				boolean whetherReject_tDBOutput_2 = false;

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbUser_tDBOutput_2 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				String url_tDBOutput_2 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "RH";
				dbUser_tDBOutput_2 = "postgres";

				final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:ZfA52ZelshHzQbOPWKHIYogD8Jjtdk1G4VQOnDi/X8L75Q==");

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;

				conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2, dbUser_tDBOutput_2,
						dbPwd_tDBOutput_2);

				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;

				int batchSize_tDBOutput_2 = 10000;
				int batchSizeCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;
				int rsTruncCountNumber_tDBOutput_2 = 0;
				try (java.sql.Statement stmtTruncCount_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
					try (java.sql.ResultSet rsTruncCount_tDBOutput_2 = stmtTruncCount_tDBOutput_2
							.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_2 + "\"")) {
						if (rsTruncCount_tDBOutput_2.next()) {
							rsTruncCountNumber_tDBOutput_2 = rsTruncCount_tDBOutput_2.getInt(1);
						}
					}
				}
				try (java.sql.Statement stmtTrunc_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
					stmtTrunc_tDBOutput_2.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_2 + "\"");
					deletedCount_tDBOutput_2 += rsTruncCountNumber_tDBOutput_2;
				}
				String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2
						+ "\" (\"Numero_d_action\",\"Intitule_de_l_action\") VALUES (?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tMap_12 begin ] start
				 */

				ok_Hash.put("tMap_12", false);
				start_Hash.put("tMap_12", System.currentTimeMillis());

				currentComponent = "tMap_12";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tMap_12 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_12__Struct {
				}
				Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
				insert__dim_actionStruct insert__dim_action_tmp = new insert__dim_actionStruct();
// ###############################

				/**
				 * [tMap_12 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());

				currentComponent = "tUnite_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "OUT4", "OUT2", "OUT3", "OUT9", "OUT8",
							"OUT7", "OUT10", "OUT11", "OUT1", "out5", "out");
				}

				int tos_count_tUnite_1 = 0;

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				OUT1Struct OUT1_tmp = new OUT1Struct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_1", false);
				start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_1";

				int tos_count_tFileInputExcel_1 = 0;

				final String decryptedPassword_tFileInputExcel_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:rLM0bqtR/rP08yLCR5KjuI5IHuVtoBirf+aKDA==");
				String password_tFileInputExcel_1 = decryptedPassword_tFileInputExcel_1;
				if (password_tFileInputExcel_1.isEmpty()) {
					password_tFileInputExcel_1 = null;
				}
				class RegexUtil_tFileInputExcel_1 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

				Object source_tFileInputExcel_1 = "C:/Users/balkis/Desktop/RH/Réalisations 2012.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

				if (source_tFileInputExcel_1 instanceof String) {
					workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_1), password_tFileInputExcel_1,
									true);
				} else if (source_tFileInputExcel_1 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_1, password_tFileInputExcel_1);
				} else {
					workbook_tFileInputExcel_1 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					sheetList_tFileInputExcel_1.addAll(regexUtil_tFileInputExcel_1.getSheets(workbook_tFileInputExcel_1,
							"Réalisations 2012 par action", false));
					if (sheetList_tFileInputExcel_1.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
						if (sheet_FilterNull_tFileInputExcel_1 != null
								&& sheetList_FilterNull_tFileInputExcel_1.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_1.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
						}
					}
					sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
					if (sheetList_tFileInputExcel_1.size() > 0) {
						int nb_line_tFileInputExcel_1 = 0;

						int begin_line_tFileInputExcel_1 = 2;

						int footer_input_tFileInputExcel_1 = 0;

						int end_line_tFileInputExcel_1 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
							end_line_tFileInputExcel_1 += (sheet_tFileInputExcel_1.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
						int limit_tFileInputExcel_1 = -1;
						int start_column_tFileInputExcel_1 = 1 - 1;
						int end_column_tFileInputExcel_1 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0);
						int rowCount_tFileInputExcel_1 = 0;
						int sheetIndex_tFileInputExcel_1 = 0;
						int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++) {

							int emptyColumnCount_tFileInputExcel_1 = 0;

							if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
								break;
							}

							while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
								rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
								sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
										.get(++sheetIndex_tFileInputExcel_1);
								currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_1_CURRENT_SHEET", sheet_tFileInputExcel_1.getSheetName());
							if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
								row_tFileInputExcel_1 = sheet_tFileInputExcel_1
										.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
							}
							row1 = null;
							int tempRowLength_tFileInputExcel_1 = 10;

							int columnIndex_tFileInputExcel_1 = 0;

							String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
							int excel_end_column_tFileInputExcel_1;
							if (row_tFileInputExcel_1 == null) {
								excel_end_column_tFileInputExcel_1 = 0;
							} else {
								excel_end_column_tFileInputExcel_1 = row_tFileInputExcel_1.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_1;
							if (end_column_tFileInputExcel_1 == -1) {
								actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
							} else {
								actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 > excel_end_column_tFileInputExcel_1
										? excel_end_column_tFileInputExcel_1
										: end_column_tFileInputExcel_1;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_1; i++) {
								if (i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1
											.getCell(i + start_column_tFileInputExcel_1);
									if (cell_tFileInputExcel_1 != null) {
										switch (cell_tFileInputExcel_1.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_1)) {
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1
														.format(cell_tFileInputExcel_1.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_1[i] = String
													.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_1.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_1)) {
													temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_1.getNumericCellValue());
													temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_1[i] = String
														.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_1[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_1[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_1[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_1[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_1 = false;
							row1 = new row1Struct();
							int curColNum_tFileInputExcel_1 = -1;
							String curColName_tFileInputExcel_1 = "";
							try {
								columnIndex_tFileInputExcel_1 = 0;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Numero_d_action";

									row1.Numero_d_action = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									row1.Numero_d_action = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 1;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Intitule_de_l_action";

									row1.Intitule_de_l_action = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Intitule_de_l_action = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 2;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Date_debut";

									row1.Date_debut = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Date_debut = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 3;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Date_fin";

									row1.Date_fin = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Date_fin = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 4;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Nb_jours";

									row1.Nb_jours = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									row1.Nb_jours = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 5;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Nb_d_heures";

									row1.Nb_d_heures = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									row1.Nb_d_heures = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 6;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Nb_de_participants";

									row1.Nb_de_participants = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									row1.Nb_de_participants = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 7;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Organisme";

									row1.Organisme = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Organisme = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 8;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Type_de_formation";

									row1.Type_de_formation = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Type_de_formation = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 9;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Cout_engage";

									row1.Cout_engage = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.Cout_engage = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								nb_line_tFileInputExcel_1++;

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputExcel_1_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputExcel_1 = true;
								System.err.println(e.getMessage());
								row1 = null;
							}

							/**
							 * [tFileInputExcel_1 begin ] stop
							 */

							/**
							 * [tFileInputExcel_1 main ] start
							 */

							currentComponent = "tFileInputExcel_1";

							tos_count_tFileInputExcel_1++;

							/**
							 * [tFileInputExcel_1 main ] stop
							 */

							/**
							 * [tFileInputExcel_1 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_begin ] stop
							 */
// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row1"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									OUT1 = null;

// # Output table : 'OUT1'
									OUT1_tmp.Numero_d_action = row1.Numero_d_action;
									OUT1_tmp.Intitule_de_l_action = row1.Intitule_de_l_action;
									OUT1 = OUT1_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */

								/**
								 * [tMap_1 process_data_begin ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_begin ] stop
								 */
// Start of branch "OUT1"
								if (OUT1 != null) {

									/**
									 * [tUnite_1 main ] start
									 */

									currentComponent = "tUnite_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "OUT1"

										);
									}

//////////

// for output
									row12 = new row12Struct();

									row12.Numero_d_action = OUT1.Numero_d_action;
									row12.Intitule_de_l_action = OUT1.Intitule_de_l_action;

									nb_line_tUnite_1++;

//////////

									tos_count_tUnite_1++;

									/**
									 * [tUnite_1 main ] stop
									 */

									/**
									 * [tUnite_1 process_data_begin ] start
									 */

									currentComponent = "tUnite_1";

									/**
									 * [tUnite_1 process_data_begin ] stop
									 */

									/**
									 * [tMap_12 main ] start
									 */

									currentComponent = "tMap_12";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row12"

										);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_12 = false;
									boolean mainRowRejected_tMap_12 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
										// ###############################
										// # Output tables

										insert__dim_action = null;

// # Output table : 'insert__dim_action'
										insert__dim_action_tmp.Numero_d_action = row12.Numero_d_action;
										insert__dim_action_tmp.Intitule_de_l_action = row12.Intitule_de_l_action;
										insert__dim_action = insert__dim_action_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_12 = false;

									tos_count_tMap_12++;

									/**
									 * [tMap_12 main ] stop
									 */

									/**
									 * [tMap_12 process_data_begin ] start
									 */

									currentComponent = "tMap_12";

									/**
									 * [tMap_12 process_data_begin ] stop
									 */
// Start of branch "insert__dim_action"
									if (insert__dim_action != null) {

										/**
										 * [tDBOutput_2 main ] start
										 */

										currentComponent = "tDBOutput_2";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "insert__dim_action"

											);
										}

										whetherReject_tDBOutput_2 = false;
										if (insert__dim_action.Numero_d_action == null) {
											pstmt_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(1, insert__dim_action.Numero_d_action);
										}

										if (insert__dim_action.Intitule_de_l_action == null) {
											pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2.setString(2, insert__dim_action.Intitule_de_l_action);
										}

										pstmt_tDBOutput_2.addBatch();
										nb_line_tDBOutput_2++;

										batchSizeCounter_tDBOutput_2++;

										if ((batchSize_tDBOutput_2 > 0)
												&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
											try {
												int countSum_tDBOutput_2 = 0;

												for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}
												rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												batchSizeCounter_tDBOutput_2 = 0;
											} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
												globalMap.put("tDBOutput_2_ERROR_MESSAGE", e_tDBOutput_2.getMessage());
												java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
														sqle_tDBOutput_2 = null;
												String errormessage_tDBOutput_2;
												if (ne_tDBOutput_2 != null) {
													// build new exception to provide the original cause
													sqle_tDBOutput_2 = new java.sql.SQLException(
															e_tDBOutput_2.getMessage() + "\ncaused by: "
																	+ ne_tDBOutput_2.getMessage(),
															ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
															ne_tDBOutput_2);
													errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
												} else {
													errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
												}

												int countSum_tDBOutput_2 = 0;
												for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}
												rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												System.err.println(errormessage_tDBOutput_2);

											}
										}

										commitCounter_tDBOutput_2++;
										if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
											if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
												try {
													int countSum_tDBOutput_2 = 0;

													for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}
													rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

													batchSizeCounter_tDBOutput_2 = 0;
												} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
													globalMap.put("tDBOutput_2_ERROR_MESSAGE",
															e_tDBOutput_2.getMessage());
													java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
															.getNextException(), sqle_tDBOutput_2 = null;
													String errormessage_tDBOutput_2;
													if (ne_tDBOutput_2 != null) {
														// build new exception to provide the original cause
														sqle_tDBOutput_2 = new java.sql.SQLException(
																e_tDBOutput_2.getMessage() + "\ncaused by: "
																		+ ne_tDBOutput_2.getMessage(),
																ne_tDBOutput_2.getSQLState(),
																ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
														errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
													} else {
														errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
													}

													int countSum_tDBOutput_2 = 0;
													for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}
													rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

													System.err.println(errormessage_tDBOutput_2);

												}
											}
											if (rowsToCommitCount_tDBOutput_2 != 0) {

											}
											conn_tDBOutput_2.commit();
											if (rowsToCommitCount_tDBOutput_2 != 0) {

												rowsToCommitCount_tDBOutput_2 = 0;
											}
											commitCounter_tDBOutput_2 = 0;
										}

										tos_count_tDBOutput_2++;

										/**
										 * [tDBOutput_2 main ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_end ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_end ] stop
										 */

									} // End of branch "insert__dim_action"

									/**
									 * [tMap_12 process_data_end ] start
									 */

									currentComponent = "tMap_12";

									/**
									 * [tMap_12 process_data_end ] stop
									 */

									/**
									 * [tUnite_1 process_data_end ] start
									 */

									currentComponent = "tUnite_1";

									/**
									 * [tUnite_1 process_data_end ] stop
									 */

								} // End of branch "OUT1"

								/**
								 * [tMap_1 process_data_end ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_end ] stop
								 */

							} // End of branch "row1"

							/**
							 * [tFileInputExcel_1 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_1 end ] start
							 */

							currentComponent = "tFileInputExcel_1";

						}

						globalMap.put("tFileInputExcel_1_NB_LINE", nb_line_tFileInputExcel_1);

					}

				} finally {

					if (!(source_tFileInputExcel_1 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_1.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_1", true);
				end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				OUT2Struct OUT2_tmp = new OUT2Struct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputExcel_2 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_2", false);
				start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_2";

				int tos_count_tFileInputExcel_2 = 0;

				final String decryptedPassword_tFileInputExcel_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:F0MmN0Y6sgGbt1G6doyz2Hm9sN9+F6NDdkXETw==");
				String password_tFileInputExcel_2 = decryptedPassword_tFileInputExcel_2;
				if (password_tFileInputExcel_2.isEmpty()) {
					password_tFileInputExcel_2 = null;
				}
				class RegexUtil_tFileInputExcel_2 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_2 regexUtil_tFileInputExcel_2 = new RegexUtil_tFileInputExcel_2();

				Object source_tFileInputExcel_2 = "C:/Users/balkis/Desktop/RH/Réalisations 2013.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_2 = null;

				if (source_tFileInputExcel_2 instanceof String) {
					workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_2), password_tFileInputExcel_2,
									true);
				} else if (source_tFileInputExcel_2 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_2, password_tFileInputExcel_2);
				} else {
					workbook_tFileInputExcel_2 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					sheetList_tFileInputExcel_2.addAll(regexUtil_tFileInputExcel_2.getSheets(workbook_tFileInputExcel_2,
							"Plan par action", false));
					if (sheetList_tFileInputExcel_2.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
						if (sheet_FilterNull_tFileInputExcel_2 != null
								&& sheetList_FilterNull_tFileInputExcel_2.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_2.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_2.add(sheet_FilterNull_tFileInputExcel_2);
						}
					}
					sheetList_tFileInputExcel_2 = sheetList_FilterNull_tFileInputExcel_2;
					if (sheetList_tFileInputExcel_2.size() > 0) {
						int nb_line_tFileInputExcel_2 = 0;

						int begin_line_tFileInputExcel_2 = 2;

						int footer_input_tFileInputExcel_2 = 0;

						int end_line_tFileInputExcel_2 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
							end_line_tFileInputExcel_2 += (sheet_tFileInputExcel_2.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_2 -= footer_input_tFileInputExcel_2;
						int limit_tFileInputExcel_2 = -1;
						int start_column_tFileInputExcel_2 = 1 - 1;
						int end_column_tFileInputExcel_2 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_2 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2
								.get(0);
						int rowCount_tFileInputExcel_2 = 0;
						int sheetIndex_tFileInputExcel_2 = 0;
						int currentRows_tFileInputExcel_2 = (sheetList_tFileInputExcel_2.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_2 = df_tFileInputExcel_2.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_2 = begin_line_tFileInputExcel_2; i_tFileInputExcel_2 < end_line_tFileInputExcel_2; i_tFileInputExcel_2++) {

							int emptyColumnCount_tFileInputExcel_2 = 0;

							if (limit_tFileInputExcel_2 != -1 && nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
								break;
							}

							while (i_tFileInputExcel_2 >= rowCount_tFileInputExcel_2 + currentRows_tFileInputExcel_2) {
								rowCount_tFileInputExcel_2 += currentRows_tFileInputExcel_2;
								sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2
										.get(++sheetIndex_tFileInputExcel_2);
								currentRows_tFileInputExcel_2 = (sheet_tFileInputExcel_2.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_2_CURRENT_SHEET", sheet_tFileInputExcel_2.getSheetName());
							if (rowCount_tFileInputExcel_2 <= i_tFileInputExcel_2) {
								row_tFileInputExcel_2 = sheet_tFileInputExcel_2
										.getRow(i_tFileInputExcel_2 - rowCount_tFileInputExcel_2);
							}
							row2 = null;
							int tempRowLength_tFileInputExcel_2 = 10;

							int columnIndex_tFileInputExcel_2 = 0;

							String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];
							int excel_end_column_tFileInputExcel_2;
							if (row_tFileInputExcel_2 == null) {
								excel_end_column_tFileInputExcel_2 = 0;
							} else {
								excel_end_column_tFileInputExcel_2 = row_tFileInputExcel_2.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_2;
							if (end_column_tFileInputExcel_2 == -1) {
								actual_end_column_tFileInputExcel_2 = excel_end_column_tFileInputExcel_2;
							} else {
								actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 > excel_end_column_tFileInputExcel_2
										? excel_end_column_tFileInputExcel_2
										: end_column_tFileInputExcel_2;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_2 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_2; i++) {
								if (i + start_column_tFileInputExcel_2 < actual_end_column_tFileInputExcel_2) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_2 = row_tFileInputExcel_2
											.getCell(i + start_column_tFileInputExcel_2);
									if (cell_tFileInputExcel_2 != null) {
										switch (cell_tFileInputExcel_2.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_2)) {
												temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_2[i] = df_tFileInputExcel_2
														.format(cell_tFileInputExcel_2.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_2[i] = String
													.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_2.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_2)) {
													temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_2 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_2.getNumericCellValue());
													temp_row_tFileInputExcel_2[i] = ne_tFileInputExcel_2
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_2[i] = String
														.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_2[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_2[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_2[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_2[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_2 = false;
							row2 = new row2Struct();
							int curColNum_tFileInputExcel_2 = -1;
							String curColName_tFileInputExcel_2 = "";
							try {
								columnIndex_tFileInputExcel_2 = 0;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Numero_de_l_action";

									row2.Numero_de_l_action = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row2.Numero_de_l_action = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 1;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Intitule_de_l_action";

									row2.Intitule_de_l_action = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row2.Intitule_de_l_action = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 2;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Date_debut";

									row2.Date_debut = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row2.Date_debut = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 3;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Date_fin";

									row2.Date_fin = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row2.Date_fin = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 4;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Nb_jours";

									row2.Nb_jours = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row2.Nb_jours = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 5;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Nb_d_heures";

									row2.Nb_d_heures = ParserUtils.parseTo_BigDecimal(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row2.Nb_d_heures = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 6;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Nb_de_participants";

									row2.Nb_de_participants = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row2.Nb_de_participants = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 7;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Organisme";

									row2.Organisme = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row2.Organisme = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 8;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Type_de_formation";

									row2.Type_de_formation = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row2.Type_de_formation = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 9;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Cout_engage";

									row2.Cout_engage = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row2.Cout_engage = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								nb_line_tFileInputExcel_2++;

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputExcel_2_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputExcel_2 = true;
								System.err.println(e.getMessage());
								row2 = null;
							}

							/**
							 * [tFileInputExcel_2 begin ] stop
							 */

							/**
							 * [tFileInputExcel_2 main ] start
							 */

							currentComponent = "tFileInputExcel_2";

							tos_count_tFileInputExcel_2++;

							/**
							 * [tFileInputExcel_2 main ] stop
							 */

							/**
							 * [tFileInputExcel_2 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_2";

							/**
							 * [tFileInputExcel_2 process_data_begin ] stop
							 */
// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tMap_2 main ] start
								 */

								currentComponent = "tMap_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row2"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_2 = false;
								boolean mainRowRejected_tMap_2 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
									// ###############################
									// # Output tables

									OUT2 = null;

// # Output table : 'OUT2'
									OUT2_tmp.Numero_de_l_action = row2.Numero_de_l_action;
									OUT2_tmp.Intitule_de_l_action = row2.Intitule_de_l_action;
									OUT2 = OUT2_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_2 = false;

								tos_count_tMap_2++;

								/**
								 * [tMap_2 main ] stop
								 */

								/**
								 * [tMap_2 process_data_begin ] start
								 */

								currentComponent = "tMap_2";

								/**
								 * [tMap_2 process_data_begin ] stop
								 */
// Start of branch "OUT2"
								if (OUT2 != null) {

									/**
									 * [tUnite_1 main ] start
									 */

									currentComponent = "tUnite_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "OUT2"

										);
									}

//////////

// for output
									row12 = new row12Struct();

									row12.Numero_d_action = OUT2.Numero_de_l_action;
									row12.Intitule_de_l_action = OUT2.Intitule_de_l_action;

									nb_line_tUnite_1++;

//////////

									tos_count_tUnite_1++;

									/**
									 * [tUnite_1 main ] stop
									 */

									/**
									 * [tUnite_1 process_data_begin ] start
									 */

									currentComponent = "tUnite_1";

									/**
									 * [tUnite_1 process_data_begin ] stop
									 */

									/**
									 * [tMap_12 main ] start
									 */

									currentComponent = "tMap_12";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row12"

										);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_12 = false;
									boolean mainRowRejected_tMap_12 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
										// ###############################
										// # Output tables

										insert__dim_action = null;

// # Output table : 'insert__dim_action'
										insert__dim_action_tmp.Numero_d_action = row12.Numero_d_action;
										insert__dim_action_tmp.Intitule_de_l_action = row12.Intitule_de_l_action;
										insert__dim_action = insert__dim_action_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_12 = false;

									tos_count_tMap_12++;

									/**
									 * [tMap_12 main ] stop
									 */

									/**
									 * [tMap_12 process_data_begin ] start
									 */

									currentComponent = "tMap_12";

									/**
									 * [tMap_12 process_data_begin ] stop
									 */
// Start of branch "insert__dim_action"
									if (insert__dim_action != null) {

										/**
										 * [tDBOutput_2 main ] start
										 */

										currentComponent = "tDBOutput_2";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "insert__dim_action"

											);
										}

										whetherReject_tDBOutput_2 = false;
										if (insert__dim_action.Numero_d_action == null) {
											pstmt_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(1, insert__dim_action.Numero_d_action);
										}

										if (insert__dim_action.Intitule_de_l_action == null) {
											pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2.setString(2, insert__dim_action.Intitule_de_l_action);
										}

										pstmt_tDBOutput_2.addBatch();
										nb_line_tDBOutput_2++;

										batchSizeCounter_tDBOutput_2++;

										if ((batchSize_tDBOutput_2 > 0)
												&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
											try {
												int countSum_tDBOutput_2 = 0;

												for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}
												rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												batchSizeCounter_tDBOutput_2 = 0;
											} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
												globalMap.put("tDBOutput_2_ERROR_MESSAGE", e_tDBOutput_2.getMessage());
												java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
														sqle_tDBOutput_2 = null;
												String errormessage_tDBOutput_2;
												if (ne_tDBOutput_2 != null) {
													// build new exception to provide the original cause
													sqle_tDBOutput_2 = new java.sql.SQLException(
															e_tDBOutput_2.getMessage() + "\ncaused by: "
																	+ ne_tDBOutput_2.getMessage(),
															ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
															ne_tDBOutput_2);
													errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
												} else {
													errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
												}

												int countSum_tDBOutput_2 = 0;
												for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}
												rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												System.err.println(errormessage_tDBOutput_2);

											}
										}

										commitCounter_tDBOutput_2++;
										if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
											if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
												try {
													int countSum_tDBOutput_2 = 0;

													for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}
													rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

													batchSizeCounter_tDBOutput_2 = 0;
												} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
													globalMap.put("tDBOutput_2_ERROR_MESSAGE",
															e_tDBOutput_2.getMessage());
													java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
															.getNextException(), sqle_tDBOutput_2 = null;
													String errormessage_tDBOutput_2;
													if (ne_tDBOutput_2 != null) {
														// build new exception to provide the original cause
														sqle_tDBOutput_2 = new java.sql.SQLException(
																e_tDBOutput_2.getMessage() + "\ncaused by: "
																		+ ne_tDBOutput_2.getMessage(),
																ne_tDBOutput_2.getSQLState(),
																ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
														errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
													} else {
														errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
													}

													int countSum_tDBOutput_2 = 0;
													for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}
													rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

													System.err.println(errormessage_tDBOutput_2);

												}
											}
											if (rowsToCommitCount_tDBOutput_2 != 0) {

											}
											conn_tDBOutput_2.commit();
											if (rowsToCommitCount_tDBOutput_2 != 0) {

												rowsToCommitCount_tDBOutput_2 = 0;
											}
											commitCounter_tDBOutput_2 = 0;
										}

										tos_count_tDBOutput_2++;

										/**
										 * [tDBOutput_2 main ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_end ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_end ] stop
										 */

									} // End of branch "insert__dim_action"

									/**
									 * [tMap_12 process_data_end ] start
									 */

									currentComponent = "tMap_12";

									/**
									 * [tMap_12 process_data_end ] stop
									 */

									/**
									 * [tUnite_1 process_data_end ] start
									 */

									currentComponent = "tUnite_1";

									/**
									 * [tUnite_1 process_data_end ] stop
									 */

								} // End of branch "OUT2"

								/**
								 * [tMap_2 process_data_end ] start
								 */

								currentComponent = "tMap_2";

								/**
								 * [tMap_2 process_data_end ] stop
								 */

							} // End of branch "row2"

							/**
							 * [tFileInputExcel_2 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_2";

							/**
							 * [tFileInputExcel_2 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_2 end ] start
							 */

							currentComponent = "tFileInputExcel_2";

						}

						globalMap.put("tFileInputExcel_2_NB_LINE", nb_line_tFileInputExcel_2);

					}

				} finally {

					if (!(source_tFileInputExcel_2 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_2.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_2", true);
				end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				OUT3Struct OUT3_tmp = new OUT3Struct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFileInputExcel_3 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_3", false);
				start_Hash.put("tFileInputExcel_3", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_3";

				int tos_count_tFileInputExcel_3 = 0;

				final String decryptedPassword_tFileInputExcel_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:fdW+HiugLJV4NUXhUXWKOPHxncmyt1BU9CN2Bg==");
				String password_tFileInputExcel_3 = decryptedPassword_tFileInputExcel_3;
				if (password_tFileInputExcel_3.isEmpty()) {
					password_tFileInputExcel_3 = null;
				}
				class RegexUtil_tFileInputExcel_3 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_3 regexUtil_tFileInputExcel_3 = new RegexUtil_tFileInputExcel_3();

				Object source_tFileInputExcel_3 = "C:/Users/balkis/Desktop/RH/Réalisations 2014.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_3 = null;

				if (source_tFileInputExcel_3 instanceof String) {
					workbook_tFileInputExcel_3 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_3), password_tFileInputExcel_3,
									true);
				} else if (source_tFileInputExcel_3 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_3 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_3, password_tFileInputExcel_3);
				} else {
					workbook_tFileInputExcel_3 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_3 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					sheetList_tFileInputExcel_3.addAll(regexUtil_tFileInputExcel_3.getSheets(workbook_tFileInputExcel_3,
							"Plan par action", false));
					if (sheetList_tFileInputExcel_3.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_3 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_3 : sheetList_tFileInputExcel_3) {
						if (sheet_FilterNull_tFileInputExcel_3 != null
								&& sheetList_FilterNull_tFileInputExcel_3.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_3.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_3.add(sheet_FilterNull_tFileInputExcel_3);
						}
					}
					sheetList_tFileInputExcel_3 = sheetList_FilterNull_tFileInputExcel_3;
					if (sheetList_tFileInputExcel_3.size() > 0) {
						int nb_line_tFileInputExcel_3 = 0;

						int begin_line_tFileInputExcel_3 = 2;

						int footer_input_tFileInputExcel_3 = 0;

						int end_line_tFileInputExcel_3 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_3 : sheetList_tFileInputExcel_3) {
							end_line_tFileInputExcel_3 += (sheet_tFileInputExcel_3.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_3 -= footer_input_tFileInputExcel_3;
						int limit_tFileInputExcel_3 = -1;
						int start_column_tFileInputExcel_3 = 1 - 1;
						int end_column_tFileInputExcel_3 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_3 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_3 = sheetList_tFileInputExcel_3
								.get(0);
						int rowCount_tFileInputExcel_3 = 0;
						int sheetIndex_tFileInputExcel_3 = 0;
						int currentRows_tFileInputExcel_3 = (sheetList_tFileInputExcel_3.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_3 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_3 = df_tFileInputExcel_3.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_3 = begin_line_tFileInputExcel_3; i_tFileInputExcel_3 < end_line_tFileInputExcel_3; i_tFileInputExcel_3++) {

							int emptyColumnCount_tFileInputExcel_3 = 0;

							if (limit_tFileInputExcel_3 != -1 && nb_line_tFileInputExcel_3 >= limit_tFileInputExcel_3) {
								break;
							}

							while (i_tFileInputExcel_3 >= rowCount_tFileInputExcel_3 + currentRows_tFileInputExcel_3) {
								rowCount_tFileInputExcel_3 += currentRows_tFileInputExcel_3;
								sheet_tFileInputExcel_3 = sheetList_tFileInputExcel_3
										.get(++sheetIndex_tFileInputExcel_3);
								currentRows_tFileInputExcel_3 = (sheet_tFileInputExcel_3.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_3_CURRENT_SHEET", sheet_tFileInputExcel_3.getSheetName());
							if (rowCount_tFileInputExcel_3 <= i_tFileInputExcel_3) {
								row_tFileInputExcel_3 = sheet_tFileInputExcel_3
										.getRow(i_tFileInputExcel_3 - rowCount_tFileInputExcel_3);
							}
							row3 = null;
							int tempRowLength_tFileInputExcel_3 = 10;

							int columnIndex_tFileInputExcel_3 = 0;

							String[] temp_row_tFileInputExcel_3 = new String[tempRowLength_tFileInputExcel_3];
							int excel_end_column_tFileInputExcel_3;
							if (row_tFileInputExcel_3 == null) {
								excel_end_column_tFileInputExcel_3 = 0;
							} else {
								excel_end_column_tFileInputExcel_3 = row_tFileInputExcel_3.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_3;
							if (end_column_tFileInputExcel_3 == -1) {
								actual_end_column_tFileInputExcel_3 = excel_end_column_tFileInputExcel_3;
							} else {
								actual_end_column_tFileInputExcel_3 = end_column_tFileInputExcel_3 > excel_end_column_tFileInputExcel_3
										? excel_end_column_tFileInputExcel_3
										: end_column_tFileInputExcel_3;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_3 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_3; i++) {
								if (i + start_column_tFileInputExcel_3 < actual_end_column_tFileInputExcel_3) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_3 = row_tFileInputExcel_3
											.getCell(i + start_column_tFileInputExcel_3);
									if (cell_tFileInputExcel_3 != null) {
										switch (cell_tFileInputExcel_3.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_3)) {
												temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_3[i] = df_tFileInputExcel_3
														.format(cell_tFileInputExcel_3.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_3[i] = String
													.valueOf(cell_tFileInputExcel_3.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_3.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_3)) {
													temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_3 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_3.getNumericCellValue());
													temp_row_tFileInputExcel_3[i] = ne_tFileInputExcel_3
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_3[i] = String
														.valueOf(cell_tFileInputExcel_3.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_3[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_3[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_3[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_3[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_3 = false;
							row3 = new row3Struct();
							int curColNum_tFileInputExcel_3 = -1;
							String curColName_tFileInputExcel_3 = "";
							try {
								columnIndex_tFileInputExcel_3 = 0;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "num_action";

									row3.num_action = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3], null,
											'.' == decimalChar_tFileInputExcel_3 ? null
													: decimalChar_tFileInputExcel_3));
								} else {
									row3.num_action = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 1;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "intitule_de_l_action";

									row3.intitule_de_l_action = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row3.intitule_de_l_action = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 2;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "date_debut";

									row3.date_debut = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row3.date_debut = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 3;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "date_fin";

									row3.date_fin = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row3.date_fin = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 4;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "nb_de_participants";

									row3.nb_de_participants = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3], null,
											'.' == decimalChar_tFileInputExcel_3 ? null
													: decimalChar_tFileInputExcel_3));
								} else {
									row3.nb_de_participants = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 5;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "nb_de_jours";

									row3.nb_de_jours = ParserUtils.parseTo_BigDecimal(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3], null,
											'.' == decimalChar_tFileInputExcel_3 ? null
													: decimalChar_tFileInputExcel_3));
								} else {
									row3.nb_de_jours = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 6;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "nb_d_heures";

									row3.nb_d_heures = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3], null,
											'.' == decimalChar_tFileInputExcel_3 ? null
													: decimalChar_tFileInputExcel_3));
								} else {
									row3.nb_d_heures = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 7;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "organisme";

									row3.organisme = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row3.organisme = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 8;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "mode";

									row3.mode = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row3.mode = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 9;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "cout";

									row3.cout = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row3.cout = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								nb_line_tFileInputExcel_3++;

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputExcel_3_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputExcel_3 = true;
								System.err.println(e.getMessage());
								row3 = null;
							}

							/**
							 * [tFileInputExcel_3 begin ] stop
							 */

							/**
							 * [tFileInputExcel_3 main ] start
							 */

							currentComponent = "tFileInputExcel_3";

							tos_count_tFileInputExcel_3++;

							/**
							 * [tFileInputExcel_3 main ] stop
							 */

							/**
							 * [tFileInputExcel_3 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_3";

							/**
							 * [tFileInputExcel_3 process_data_begin ] stop
							 */
// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tMap_3 main ] start
								 */

								currentComponent = "tMap_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row3"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_3 = false;
								boolean mainRowRejected_tMap_3 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
									// ###############################
									// # Output tables

									OUT3 = null;

// # Output table : 'OUT3'
									OUT3_tmp.num_action = row3.num_action;
									OUT3_tmp.intitule_de_l_action = row3.intitule_de_l_action;
									OUT3 = OUT3_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_3 = false;

								tos_count_tMap_3++;

								/**
								 * [tMap_3 main ] stop
								 */

								/**
								 * [tMap_3 process_data_begin ] start
								 */

								currentComponent = "tMap_3";

								/**
								 * [tMap_3 process_data_begin ] stop
								 */
// Start of branch "OUT3"
								if (OUT3 != null) {

									/**
									 * [tUnite_1 main ] start
									 */

									currentComponent = "tUnite_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "OUT3"

										);
									}

//////////

// for output
									row12 = new row12Struct();

									row12.Numero_d_action = OUT3.num_action;
									row12.Intitule_de_l_action = OUT3.intitule_de_l_action;

									nb_line_tUnite_1++;

//////////

									tos_count_tUnite_1++;

									/**
									 * [tUnite_1 main ] stop
									 */

									/**
									 * [tUnite_1 process_data_begin ] start
									 */

									currentComponent = "tUnite_1";

									/**
									 * [tUnite_1 process_data_begin ] stop
									 */

									/**
									 * [tMap_12 main ] start
									 */

									currentComponent = "tMap_12";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row12"

										);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_12 = false;
									boolean mainRowRejected_tMap_12 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
										// ###############################
										// # Output tables

										insert__dim_action = null;

// # Output table : 'insert__dim_action'
										insert__dim_action_tmp.Numero_d_action = row12.Numero_d_action;
										insert__dim_action_tmp.Intitule_de_l_action = row12.Intitule_de_l_action;
										insert__dim_action = insert__dim_action_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_12 = false;

									tos_count_tMap_12++;

									/**
									 * [tMap_12 main ] stop
									 */

									/**
									 * [tMap_12 process_data_begin ] start
									 */

									currentComponent = "tMap_12";

									/**
									 * [tMap_12 process_data_begin ] stop
									 */
// Start of branch "insert__dim_action"
									if (insert__dim_action != null) {

										/**
										 * [tDBOutput_2 main ] start
										 */

										currentComponent = "tDBOutput_2";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "insert__dim_action"

											);
										}

										whetherReject_tDBOutput_2 = false;
										if (insert__dim_action.Numero_d_action == null) {
											pstmt_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(1, insert__dim_action.Numero_d_action);
										}

										if (insert__dim_action.Intitule_de_l_action == null) {
											pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2.setString(2, insert__dim_action.Intitule_de_l_action);
										}

										pstmt_tDBOutput_2.addBatch();
										nb_line_tDBOutput_2++;

										batchSizeCounter_tDBOutput_2++;

										if ((batchSize_tDBOutput_2 > 0)
												&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
											try {
												int countSum_tDBOutput_2 = 0;

												for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}
												rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												batchSizeCounter_tDBOutput_2 = 0;
											} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
												globalMap.put("tDBOutput_2_ERROR_MESSAGE", e_tDBOutput_2.getMessage());
												java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
														sqle_tDBOutput_2 = null;
												String errormessage_tDBOutput_2;
												if (ne_tDBOutput_2 != null) {
													// build new exception to provide the original cause
													sqle_tDBOutput_2 = new java.sql.SQLException(
															e_tDBOutput_2.getMessage() + "\ncaused by: "
																	+ ne_tDBOutput_2.getMessage(),
															ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
															ne_tDBOutput_2);
													errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
												} else {
													errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
												}

												int countSum_tDBOutput_2 = 0;
												for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}
												rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												System.err.println(errormessage_tDBOutput_2);

											}
										}

										commitCounter_tDBOutput_2++;
										if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
											if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
												try {
													int countSum_tDBOutput_2 = 0;

													for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}
													rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

													batchSizeCounter_tDBOutput_2 = 0;
												} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
													globalMap.put("tDBOutput_2_ERROR_MESSAGE",
															e_tDBOutput_2.getMessage());
													java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
															.getNextException(), sqle_tDBOutput_2 = null;
													String errormessage_tDBOutput_2;
													if (ne_tDBOutput_2 != null) {
														// build new exception to provide the original cause
														sqle_tDBOutput_2 = new java.sql.SQLException(
																e_tDBOutput_2.getMessage() + "\ncaused by: "
																		+ ne_tDBOutput_2.getMessage(),
																ne_tDBOutput_2.getSQLState(),
																ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
														errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
													} else {
														errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
													}

													int countSum_tDBOutput_2 = 0;
													for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}
													rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

													System.err.println(errormessage_tDBOutput_2);

												}
											}
											if (rowsToCommitCount_tDBOutput_2 != 0) {

											}
											conn_tDBOutput_2.commit();
											if (rowsToCommitCount_tDBOutput_2 != 0) {

												rowsToCommitCount_tDBOutput_2 = 0;
											}
											commitCounter_tDBOutput_2 = 0;
										}

										tos_count_tDBOutput_2++;

										/**
										 * [tDBOutput_2 main ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_end ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_end ] stop
										 */

									} // End of branch "insert__dim_action"

									/**
									 * [tMap_12 process_data_end ] start
									 */

									currentComponent = "tMap_12";

									/**
									 * [tMap_12 process_data_end ] stop
									 */

									/**
									 * [tUnite_1 process_data_end ] start
									 */

									currentComponent = "tUnite_1";

									/**
									 * [tUnite_1 process_data_end ] stop
									 */

								} // End of branch "OUT3"

								/**
								 * [tMap_3 process_data_end ] start
								 */

								currentComponent = "tMap_3";

								/**
								 * [tMap_3 process_data_end ] stop
								 */

							} // End of branch "row3"

							/**
							 * [tFileInputExcel_3 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_3";

							/**
							 * [tFileInputExcel_3 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_3 end ] start
							 */

							currentComponent = "tFileInputExcel_3";

						}

						globalMap.put("tFileInputExcel_3_NB_LINE", nb_line_tFileInputExcel_3);

					}

				} finally {

					if (!(source_tFileInputExcel_3 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_3.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_3", true);
				end_Hash.put("tFileInputExcel_3", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_3 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				OUT4Struct OUT4_tmp = new OUT4Struct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tFileInputExcel_4 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_4", false);
				start_Hash.put("tFileInputExcel_4", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_4";

				int tos_count_tFileInputExcel_4 = 0;

				final String decryptedPassword_tFileInputExcel_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:k5cCOXtUf9mY4Xf3YEsZIuDPpGZ0Jt+gjMywsw==");
				String password_tFileInputExcel_4 = decryptedPassword_tFileInputExcel_4;
				if (password_tFileInputExcel_4.isEmpty()) {
					password_tFileInputExcel_4 = null;
				}
				class RegexUtil_tFileInputExcel_4 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_4 regexUtil_tFileInputExcel_4 = new RegexUtil_tFileInputExcel_4();

				Object source_tFileInputExcel_4 = "C:/Users/balkis/Desktop/RH/FORMATION 2015.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_4 = null;

				if (source_tFileInputExcel_4 instanceof String) {
					workbook_tFileInputExcel_4 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_4), password_tFileInputExcel_4,
									true);
				} else if (source_tFileInputExcel_4 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_4 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_4, password_tFileInputExcel_4);
				} else {
					workbook_tFileInputExcel_4 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_4 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					sheetList_tFileInputExcel_4.addAll(
							regexUtil_tFileInputExcel_4.getSheets(workbook_tFileInputExcel_4, "ACTION 2015", false));
					if (sheetList_tFileInputExcel_4.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_4 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_4 : sheetList_tFileInputExcel_4) {
						if (sheet_FilterNull_tFileInputExcel_4 != null
								&& sheetList_FilterNull_tFileInputExcel_4.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_4.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_4.add(sheet_FilterNull_tFileInputExcel_4);
						}
					}
					sheetList_tFileInputExcel_4 = sheetList_FilterNull_tFileInputExcel_4;
					if (sheetList_tFileInputExcel_4.size() > 0) {
						int nb_line_tFileInputExcel_4 = 0;

						int begin_line_tFileInputExcel_4 = 1;

						int footer_input_tFileInputExcel_4 = 0;

						int end_line_tFileInputExcel_4 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_4 : sheetList_tFileInputExcel_4) {
							end_line_tFileInputExcel_4 += (sheet_tFileInputExcel_4.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_4 -= footer_input_tFileInputExcel_4;
						int limit_tFileInputExcel_4 = -1;
						int start_column_tFileInputExcel_4 = 1 - 1;
						int end_column_tFileInputExcel_4 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_4 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_4 = sheetList_tFileInputExcel_4
								.get(0);
						int rowCount_tFileInputExcel_4 = 0;
						int sheetIndex_tFileInputExcel_4 = 0;
						int currentRows_tFileInputExcel_4 = (sheetList_tFileInputExcel_4.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_4 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_4 = df_tFileInputExcel_4.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_4 = begin_line_tFileInputExcel_4; i_tFileInputExcel_4 < end_line_tFileInputExcel_4; i_tFileInputExcel_4++) {

							int emptyColumnCount_tFileInputExcel_4 = 0;

							if (limit_tFileInputExcel_4 != -1 && nb_line_tFileInputExcel_4 >= limit_tFileInputExcel_4) {
								break;
							}

							while (i_tFileInputExcel_4 >= rowCount_tFileInputExcel_4 + currentRows_tFileInputExcel_4) {
								rowCount_tFileInputExcel_4 += currentRows_tFileInputExcel_4;
								sheet_tFileInputExcel_4 = sheetList_tFileInputExcel_4
										.get(++sheetIndex_tFileInputExcel_4);
								currentRows_tFileInputExcel_4 = (sheet_tFileInputExcel_4.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_4_CURRENT_SHEET", sheet_tFileInputExcel_4.getSheetName());
							if (rowCount_tFileInputExcel_4 <= i_tFileInputExcel_4) {
								row_tFileInputExcel_4 = sheet_tFileInputExcel_4
										.getRow(i_tFileInputExcel_4 - rowCount_tFileInputExcel_4);
							}
							row4 = null;
							int tempRowLength_tFileInputExcel_4 = 10;

							int columnIndex_tFileInputExcel_4 = 0;

							String[] temp_row_tFileInputExcel_4 = new String[tempRowLength_tFileInputExcel_4];
							int excel_end_column_tFileInputExcel_4;
							if (row_tFileInputExcel_4 == null) {
								excel_end_column_tFileInputExcel_4 = 0;
							} else {
								excel_end_column_tFileInputExcel_4 = row_tFileInputExcel_4.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_4;
							if (end_column_tFileInputExcel_4 == -1) {
								actual_end_column_tFileInputExcel_4 = excel_end_column_tFileInputExcel_4;
							} else {
								actual_end_column_tFileInputExcel_4 = end_column_tFileInputExcel_4 > excel_end_column_tFileInputExcel_4
										? excel_end_column_tFileInputExcel_4
										: end_column_tFileInputExcel_4;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_4 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_4; i++) {
								if (i + start_column_tFileInputExcel_4 < actual_end_column_tFileInputExcel_4) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_4 = row_tFileInputExcel_4
											.getCell(i + start_column_tFileInputExcel_4);
									if (cell_tFileInputExcel_4 != null) {
										switch (cell_tFileInputExcel_4.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_4[i] = cell_tFileInputExcel_4
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_4)) {
												temp_row_tFileInputExcel_4[i] = cell_tFileInputExcel_4
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_4[i] = df_tFileInputExcel_4
														.format(cell_tFileInputExcel_4.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_4[i] = String
													.valueOf(cell_tFileInputExcel_4.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_4.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_4[i] = cell_tFileInputExcel_4
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_4)) {
													temp_row_tFileInputExcel_4[i] = cell_tFileInputExcel_4
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_4 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_4.getNumericCellValue());
													temp_row_tFileInputExcel_4[i] = ne_tFileInputExcel_4
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_4[i] = String
														.valueOf(cell_tFileInputExcel_4.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_4[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_4[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_4[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_4[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_4 = false;
							row4 = new row4Struct();
							int curColNum_tFileInputExcel_4 = -1;
							String curColName_tFileInputExcel_4 = "";
							try {
								columnIndex_tFileInputExcel_4 = 0;

								if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
									curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
											+ start_column_tFileInputExcel_4 + 1;
									curColName_tFileInputExcel_4 = "num_action";

									row4.num_action = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4], null,
											'.' == decimalChar_tFileInputExcel_4 ? null
													: decimalChar_tFileInputExcel_4));
								} else {
									row4.num_action = null;
									emptyColumnCount_tFileInputExcel_4++;
								}
								columnIndex_tFileInputExcel_4 = 1;

								if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
									curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
											+ start_column_tFileInputExcel_4 + 1;
									curColName_tFileInputExcel_4 = "intitule_de_l_action";

									row4.intitule_de_l_action = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
								} else {
									row4.intitule_de_l_action = null;
									emptyColumnCount_tFileInputExcel_4++;
								}
								columnIndex_tFileInputExcel_4 = 2;

								if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
									curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
											+ start_column_tFileInputExcel_4 + 1;
									curColName_tFileInputExcel_4 = "date_debut";

									row4.date_debut = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
								} else {
									row4.date_debut = null;
									emptyColumnCount_tFileInputExcel_4++;
								}
								columnIndex_tFileInputExcel_4 = 3;

								if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
									curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
											+ start_column_tFileInputExcel_4 + 1;
									curColName_tFileInputExcel_4 = "date_fin";

									row4.date_fin = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
								} else {
									row4.date_fin = null;
									emptyColumnCount_tFileInputExcel_4++;
								}
								columnIndex_tFileInputExcel_4 = 4;

								if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
									curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
											+ start_column_tFileInputExcel_4 + 1;
									curColName_tFileInputExcel_4 = "nb_de_participants";

									row4.nb_de_participants = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4], null,
											'.' == decimalChar_tFileInputExcel_4 ? null
													: decimalChar_tFileInputExcel_4));
								} else {
									row4.nb_de_participants = null;
									emptyColumnCount_tFileInputExcel_4++;
								}
								columnIndex_tFileInputExcel_4 = 5;

								if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
									curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
											+ start_column_tFileInputExcel_4 + 1;
									curColName_tFileInputExcel_4 = "nb_de_jours";

									row4.nb_de_jours = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
								} else {
									row4.nb_de_jours = null;
									emptyColumnCount_tFileInputExcel_4++;
								}
								columnIndex_tFileInputExcel_4 = 6;

								if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
									curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
											+ start_column_tFileInputExcel_4 + 1;
									curColName_tFileInputExcel_4 = "nb_d_heures";

									row4.nb_d_heures = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4], null,
											'.' == decimalChar_tFileInputExcel_4 ? null
													: decimalChar_tFileInputExcel_4));
								} else {
									row4.nb_d_heures = null;
									emptyColumnCount_tFileInputExcel_4++;
								}
								columnIndex_tFileInputExcel_4 = 7;

								if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
									curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
											+ start_column_tFileInputExcel_4 + 1;
									curColName_tFileInputExcel_4 = "organisme";

									row4.organisme = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
								} else {
									row4.organisme = null;
									emptyColumnCount_tFileInputExcel_4++;
								}
								columnIndex_tFileInputExcel_4 = 8;

								if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
									curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
											+ start_column_tFileInputExcel_4 + 1;
									curColName_tFileInputExcel_4 = "mode";

									row4.mode = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
								} else {
									row4.mode = null;
									emptyColumnCount_tFileInputExcel_4++;
								}
								columnIndex_tFileInputExcel_4 = 9;

								if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4].length() > 0) {
									curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
											+ start_column_tFileInputExcel_4 + 1;
									curColName_tFileInputExcel_4 = "cout__HT";

									row4.cout__HT = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4];
								} else {
									row4.cout__HT = null;
									emptyColumnCount_tFileInputExcel_4++;
								}

								nb_line_tFileInputExcel_4++;

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputExcel_4_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputExcel_4 = true;
								System.err.println(e.getMessage());
								row4 = null;
							}

							/**
							 * [tFileInputExcel_4 begin ] stop
							 */

							/**
							 * [tFileInputExcel_4 main ] start
							 */

							currentComponent = "tFileInputExcel_4";

							tos_count_tFileInputExcel_4++;

							/**
							 * [tFileInputExcel_4 main ] stop
							 */

							/**
							 * [tFileInputExcel_4 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_4";

							/**
							 * [tFileInputExcel_4 process_data_begin ] stop
							 */
// Start of branch "row4"
							if (row4 != null) {

								/**
								 * [tMap_4 main ] start
								 */

								currentComponent = "tMap_4";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row4"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_4 = false;
								boolean mainRowRejected_tMap_4 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
									// ###############################
									// # Output tables

									OUT4 = null;

// # Output table : 'OUT4'
									OUT4_tmp.num_action = row4.num_action;
									OUT4_tmp.intitule_de_l_action = row4.intitule_de_l_action;
									OUT4 = OUT4_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_4 = false;

								tos_count_tMap_4++;

								/**
								 * [tMap_4 main ] stop
								 */

								/**
								 * [tMap_4 process_data_begin ] start
								 */

								currentComponent = "tMap_4";

								/**
								 * [tMap_4 process_data_begin ] stop
								 */
// Start of branch "OUT4"
								if (OUT4 != null) {

									/**
									 * [tUnite_1 main ] start
									 */

									currentComponent = "tUnite_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "OUT4"

										);
									}

//////////

// for output
									row12 = new row12Struct();

									row12.Numero_d_action = OUT4.num_action;
									row12.Intitule_de_l_action = OUT4.intitule_de_l_action;

									nb_line_tUnite_1++;

//////////

									tos_count_tUnite_1++;

									/**
									 * [tUnite_1 main ] stop
									 */

									/**
									 * [tUnite_1 process_data_begin ] start
									 */

									currentComponent = "tUnite_1";

									/**
									 * [tUnite_1 process_data_begin ] stop
									 */

									/**
									 * [tMap_12 main ] start
									 */

									currentComponent = "tMap_12";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row12"

										);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_12 = false;
									boolean mainRowRejected_tMap_12 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
										// ###############################
										// # Output tables

										insert__dim_action = null;

// # Output table : 'insert__dim_action'
										insert__dim_action_tmp.Numero_d_action = row12.Numero_d_action;
										insert__dim_action_tmp.Intitule_de_l_action = row12.Intitule_de_l_action;
										insert__dim_action = insert__dim_action_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_12 = false;

									tos_count_tMap_12++;

									/**
									 * [tMap_12 main ] stop
									 */

									/**
									 * [tMap_12 process_data_begin ] start
									 */

									currentComponent = "tMap_12";

									/**
									 * [tMap_12 process_data_begin ] stop
									 */
// Start of branch "insert__dim_action"
									if (insert__dim_action != null) {

										/**
										 * [tDBOutput_2 main ] start
										 */

										currentComponent = "tDBOutput_2";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "insert__dim_action"

											);
										}

										whetherReject_tDBOutput_2 = false;
										if (insert__dim_action.Numero_d_action == null) {
											pstmt_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(1, insert__dim_action.Numero_d_action);
										}

										if (insert__dim_action.Intitule_de_l_action == null) {
											pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2.setString(2, insert__dim_action.Intitule_de_l_action);
										}

										pstmt_tDBOutput_2.addBatch();
										nb_line_tDBOutput_2++;

										batchSizeCounter_tDBOutput_2++;

										if ((batchSize_tDBOutput_2 > 0)
												&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
											try {
												int countSum_tDBOutput_2 = 0;

												for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}
												rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												batchSizeCounter_tDBOutput_2 = 0;
											} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
												globalMap.put("tDBOutput_2_ERROR_MESSAGE", e_tDBOutput_2.getMessage());
												java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
														sqle_tDBOutput_2 = null;
												String errormessage_tDBOutput_2;
												if (ne_tDBOutput_2 != null) {
													// build new exception to provide the original cause
													sqle_tDBOutput_2 = new java.sql.SQLException(
															e_tDBOutput_2.getMessage() + "\ncaused by: "
																	+ ne_tDBOutput_2.getMessage(),
															ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
															ne_tDBOutput_2);
													errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
												} else {
													errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
												}

												int countSum_tDBOutput_2 = 0;
												for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}
												rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												System.err.println(errormessage_tDBOutput_2);

											}
										}

										commitCounter_tDBOutput_2++;
										if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
											if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
												try {
													int countSum_tDBOutput_2 = 0;

													for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}
													rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

													batchSizeCounter_tDBOutput_2 = 0;
												} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
													globalMap.put("tDBOutput_2_ERROR_MESSAGE",
															e_tDBOutput_2.getMessage());
													java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
															.getNextException(), sqle_tDBOutput_2 = null;
													String errormessage_tDBOutput_2;
													if (ne_tDBOutput_2 != null) {
														// build new exception to provide the original cause
														sqle_tDBOutput_2 = new java.sql.SQLException(
																e_tDBOutput_2.getMessage() + "\ncaused by: "
																		+ ne_tDBOutput_2.getMessage(),
																ne_tDBOutput_2.getSQLState(),
																ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
														errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
													} else {
														errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
													}

													int countSum_tDBOutput_2 = 0;
													for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}
													rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

													System.err.println(errormessage_tDBOutput_2);

												}
											}
											if (rowsToCommitCount_tDBOutput_2 != 0) {

											}
											conn_tDBOutput_2.commit();
											if (rowsToCommitCount_tDBOutput_2 != 0) {

												rowsToCommitCount_tDBOutput_2 = 0;
											}
											commitCounter_tDBOutput_2 = 0;
										}

										tos_count_tDBOutput_2++;

										/**
										 * [tDBOutput_2 main ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_end ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_end ] stop
										 */

									} // End of branch "insert__dim_action"

									/**
									 * [tMap_12 process_data_end ] start
									 */

									currentComponent = "tMap_12";

									/**
									 * [tMap_12 process_data_end ] stop
									 */

									/**
									 * [tUnite_1 process_data_end ] start
									 */

									currentComponent = "tUnite_1";

									/**
									 * [tUnite_1 process_data_end ] stop
									 */

								} // End of branch "OUT4"

								/**
								 * [tMap_4 process_data_end ] start
								 */

								currentComponent = "tMap_4";

								/**
								 * [tMap_4 process_data_end ] stop
								 */

							} // End of branch "row4"

							/**
							 * [tFileInputExcel_4 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_4";

							/**
							 * [tFileInputExcel_4 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_4 end ] start
							 */

							currentComponent = "tFileInputExcel_4";

						}

						globalMap.put("tFileInputExcel_4_NB_LINE", nb_line_tFileInputExcel_4);

					}

				} finally {

					if (!(source_tFileInputExcel_4 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_4.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_4", true);
				end_Hash.put("tFileInputExcel_4", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_4 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tMap_6 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out5Struct out5_tmp = new out5Struct();
// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tFileInputExcel_5 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_5", false);
				start_Hash.put("tFileInputExcel_5", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_5";

				int tos_count_tFileInputExcel_5 = 0;

				final String decryptedPassword_tFileInputExcel_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:n5jMRa+lM2+Ehlp09bobzoWqMIa2w2RUtn/XfQ==");
				String password_tFileInputExcel_5 = decryptedPassword_tFileInputExcel_5;
				if (password_tFileInputExcel_5.isEmpty()) {
					password_tFileInputExcel_5 = null;
				}
				class RegexUtil_tFileInputExcel_5 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_5 regexUtil_tFileInputExcel_5 = new RegexUtil_tFileInputExcel_5();

				Object source_tFileInputExcel_5 = "C:/Users/balkis/Desktop/RH/Réalisations 2016.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_5 = null;

				if (source_tFileInputExcel_5 instanceof String) {
					workbook_tFileInputExcel_5 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_5), password_tFileInputExcel_5,
									true);
				} else if (source_tFileInputExcel_5 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_5 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_5, password_tFileInputExcel_5);
				} else {
					workbook_tFileInputExcel_5 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_5 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					sheetList_tFileInputExcel_5.addAll(regexUtil_tFileInputExcel_5.getSheets(workbook_tFileInputExcel_5,
							"Plan par action", false));
					if (sheetList_tFileInputExcel_5.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_5 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_5 : sheetList_tFileInputExcel_5) {
						if (sheet_FilterNull_tFileInputExcel_5 != null
								&& sheetList_FilterNull_tFileInputExcel_5.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_5.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_5.add(sheet_FilterNull_tFileInputExcel_5);
						}
					}
					sheetList_tFileInputExcel_5 = sheetList_FilterNull_tFileInputExcel_5;
					if (sheetList_tFileInputExcel_5.size() > 0) {
						int nb_line_tFileInputExcel_5 = 0;

						int begin_line_tFileInputExcel_5 = 1;

						int footer_input_tFileInputExcel_5 = 0;

						int end_line_tFileInputExcel_5 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_5 : sheetList_tFileInputExcel_5) {
							end_line_tFileInputExcel_5 += (sheet_tFileInputExcel_5.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_5 -= footer_input_tFileInputExcel_5;
						int limit_tFileInputExcel_5 = -1;
						int start_column_tFileInputExcel_5 = 1 - 1;
						int end_column_tFileInputExcel_5 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_5 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_5 = sheetList_tFileInputExcel_5
								.get(0);
						int rowCount_tFileInputExcel_5 = 0;
						int sheetIndex_tFileInputExcel_5 = 0;
						int currentRows_tFileInputExcel_5 = (sheetList_tFileInputExcel_5.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_5 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_5 = df_tFileInputExcel_5.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_5 = begin_line_tFileInputExcel_5; i_tFileInputExcel_5 < end_line_tFileInputExcel_5; i_tFileInputExcel_5++) {

							int emptyColumnCount_tFileInputExcel_5 = 0;

							if (limit_tFileInputExcel_5 != -1 && nb_line_tFileInputExcel_5 >= limit_tFileInputExcel_5) {
								break;
							}

							while (i_tFileInputExcel_5 >= rowCount_tFileInputExcel_5 + currentRows_tFileInputExcel_5) {
								rowCount_tFileInputExcel_5 += currentRows_tFileInputExcel_5;
								sheet_tFileInputExcel_5 = sheetList_tFileInputExcel_5
										.get(++sheetIndex_tFileInputExcel_5);
								currentRows_tFileInputExcel_5 = (sheet_tFileInputExcel_5.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_5_CURRENT_SHEET", sheet_tFileInputExcel_5.getSheetName());
							if (rowCount_tFileInputExcel_5 <= i_tFileInputExcel_5) {
								row_tFileInputExcel_5 = sheet_tFileInputExcel_5
										.getRow(i_tFileInputExcel_5 - rowCount_tFileInputExcel_5);
							}
							row5 = null;
							int tempRowLength_tFileInputExcel_5 = 10;

							int columnIndex_tFileInputExcel_5 = 0;

							String[] temp_row_tFileInputExcel_5 = new String[tempRowLength_tFileInputExcel_5];
							int excel_end_column_tFileInputExcel_5;
							if (row_tFileInputExcel_5 == null) {
								excel_end_column_tFileInputExcel_5 = 0;
							} else {
								excel_end_column_tFileInputExcel_5 = row_tFileInputExcel_5.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_5;
							if (end_column_tFileInputExcel_5 == -1) {
								actual_end_column_tFileInputExcel_5 = excel_end_column_tFileInputExcel_5;
							} else {
								actual_end_column_tFileInputExcel_5 = end_column_tFileInputExcel_5 > excel_end_column_tFileInputExcel_5
										? excel_end_column_tFileInputExcel_5
										: end_column_tFileInputExcel_5;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_5 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_5; i++) {
								if (i + start_column_tFileInputExcel_5 < actual_end_column_tFileInputExcel_5) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_5 = row_tFileInputExcel_5
											.getCell(i + start_column_tFileInputExcel_5);
									if (cell_tFileInputExcel_5 != null) {
										switch (cell_tFileInputExcel_5.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_5[i] = cell_tFileInputExcel_5
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_5)) {
												temp_row_tFileInputExcel_5[i] = cell_tFileInputExcel_5
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_5[i] = df_tFileInputExcel_5
														.format(cell_tFileInputExcel_5.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_5[i] = String
													.valueOf(cell_tFileInputExcel_5.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_5.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_5[i] = cell_tFileInputExcel_5
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_5)) {
													temp_row_tFileInputExcel_5[i] = cell_tFileInputExcel_5
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_5 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_5.getNumericCellValue());
													temp_row_tFileInputExcel_5[i] = ne_tFileInputExcel_5
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_5[i] = String
														.valueOf(cell_tFileInputExcel_5.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_5[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_5[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_5[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_5[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_5 = false;
							row5 = new row5Struct();
							int curColNum_tFileInputExcel_5 = -1;
							String curColName_tFileInputExcel_5 = "";
							try {
								columnIndex_tFileInputExcel_5 = 0;

								if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5].length() > 0) {
									curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
											+ start_column_tFileInputExcel_5 + 1;
									curColName_tFileInputExcel_5 = "Num_action";

									row5.Num_action = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5], null,
											'.' == decimalChar_tFileInputExcel_5 ? null
													: decimalChar_tFileInputExcel_5));
								} else {
									row5.Num_action = null;
									emptyColumnCount_tFileInputExcel_5++;
								}
								columnIndex_tFileInputExcel_5 = 1;

								if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5].length() > 0) {
									curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
											+ start_column_tFileInputExcel_5 + 1;
									curColName_tFileInputExcel_5 = "Intitule_de_l_action";

									row5.Intitule_de_l_action = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5];
								} else {
									row5.Intitule_de_l_action = null;
									emptyColumnCount_tFileInputExcel_5++;
								}
								columnIndex_tFileInputExcel_5 = 2;

								if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5].length() > 0) {
									curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
											+ start_column_tFileInputExcel_5 + 1;
									curColName_tFileInputExcel_5 = "Date_debut";

									row5.Date_debut = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5];
								} else {
									row5.Date_debut = null;
									emptyColumnCount_tFileInputExcel_5++;
								}
								columnIndex_tFileInputExcel_5 = 3;

								if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5].length() > 0) {
									curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
											+ start_column_tFileInputExcel_5 + 1;
									curColName_tFileInputExcel_5 = "Date_fin";

									row5.Date_fin = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5];
								} else {
									row5.Date_fin = null;
									emptyColumnCount_tFileInputExcel_5++;
								}
								columnIndex_tFileInputExcel_5 = 4;

								if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5].length() > 0) {
									curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
											+ start_column_tFileInputExcel_5 + 1;
									curColName_tFileInputExcel_5 = "Nb_de_participants";

									row5.Nb_de_participants = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5], null,
											'.' == decimalChar_tFileInputExcel_5 ? null
													: decimalChar_tFileInputExcel_5));
								} else {
									row5.Nb_de_participants = null;
									emptyColumnCount_tFileInputExcel_5++;
								}
								columnIndex_tFileInputExcel_5 = 5;

								if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5].length() > 0) {
									curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
											+ start_column_tFileInputExcel_5 + 1;
									curColName_tFileInputExcel_5 = "nb_de_jours";

									row5.nb_de_jours = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5];
								} else {
									row5.nb_de_jours = null;
									emptyColumnCount_tFileInputExcel_5++;
								}
								columnIndex_tFileInputExcel_5 = 6;

								if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5].length() > 0) {
									curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
											+ start_column_tFileInputExcel_5 + 1;
									curColName_tFileInputExcel_5 = "nb_d_heures";

									row5.nb_d_heures = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5];
								} else {
									row5.nb_d_heures = null;
									emptyColumnCount_tFileInputExcel_5++;
								}
								columnIndex_tFileInputExcel_5 = 7;

								if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5].length() > 0) {
									curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
											+ start_column_tFileInputExcel_5 + 1;
									curColName_tFileInputExcel_5 = "Organisme_Formateurs";

									row5.Organisme_Formateurs = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5];
								} else {
									row5.Organisme_Formateurs = null;
									emptyColumnCount_tFileInputExcel_5++;
								}
								columnIndex_tFileInputExcel_5 = 8;

								if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5].length() > 0) {
									curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
											+ start_column_tFileInputExcel_5 + 1;
									curColName_tFileInputExcel_5 = "Mode";

									row5.Mode = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5];
								} else {
									row5.Mode = null;
									emptyColumnCount_tFileInputExcel_5++;
								}
								columnIndex_tFileInputExcel_5 = 9;

								if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5].length() > 0) {
									curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
											+ start_column_tFileInputExcel_5 + 1;
									curColName_tFileInputExcel_5 = "Cout__HT";

									row5.Cout__HT = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5];
								} else {
									row5.Cout__HT = null;
									emptyColumnCount_tFileInputExcel_5++;
								}

								nb_line_tFileInputExcel_5++;

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputExcel_5_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputExcel_5 = true;
								System.err.println(e.getMessage());
								row5 = null;
							}

							/**
							 * [tFileInputExcel_5 begin ] stop
							 */

							/**
							 * [tFileInputExcel_5 main ] start
							 */

							currentComponent = "tFileInputExcel_5";

							tos_count_tFileInputExcel_5++;

							/**
							 * [tFileInputExcel_5 main ] stop
							 */

							/**
							 * [tFileInputExcel_5 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_5";

							/**
							 * [tFileInputExcel_5 process_data_begin ] stop
							 */
// Start of branch "row5"
							if (row5 != null) {

								/**
								 * [tMap_6 main ] start
								 */

								currentComponent = "tMap_6";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row5"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_6 = false;
								boolean mainRowRejected_tMap_6 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
									// ###############################
									// # Output tables

									out5 = null;

// # Output table : 'out5'
									out5_tmp.Numero_d_action = row5.Num_action;
									out5_tmp.Intitule_de_l_action = row5.Intitule_de_l_action;
									out5 = out5_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_6 = false;

								tos_count_tMap_6++;

								/**
								 * [tMap_6 main ] stop
								 */

								/**
								 * [tMap_6 process_data_begin ] start
								 */

								currentComponent = "tMap_6";

								/**
								 * [tMap_6 process_data_begin ] stop
								 */
// Start of branch "out5"
								if (out5 != null) {

									/**
									 * [tUnite_1 main ] start
									 */

									currentComponent = "tUnite_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "out5"

										);
									}

//////////

// for output
									row12 = new row12Struct();

									row12.Numero_d_action = out5.Numero_d_action;
									row12.Intitule_de_l_action = out5.Intitule_de_l_action;

									nb_line_tUnite_1++;

//////////

									tos_count_tUnite_1++;

									/**
									 * [tUnite_1 main ] stop
									 */

									/**
									 * [tUnite_1 process_data_begin ] start
									 */

									currentComponent = "tUnite_1";

									/**
									 * [tUnite_1 process_data_begin ] stop
									 */

									/**
									 * [tMap_12 main ] start
									 */

									currentComponent = "tMap_12";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row12"

										);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_12 = false;
									boolean mainRowRejected_tMap_12 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
										// ###############################
										// # Output tables

										insert__dim_action = null;

// # Output table : 'insert__dim_action'
										insert__dim_action_tmp.Numero_d_action = row12.Numero_d_action;
										insert__dim_action_tmp.Intitule_de_l_action = row12.Intitule_de_l_action;
										insert__dim_action = insert__dim_action_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_12 = false;

									tos_count_tMap_12++;

									/**
									 * [tMap_12 main ] stop
									 */

									/**
									 * [tMap_12 process_data_begin ] start
									 */

									currentComponent = "tMap_12";

									/**
									 * [tMap_12 process_data_begin ] stop
									 */
// Start of branch "insert__dim_action"
									if (insert__dim_action != null) {

										/**
										 * [tDBOutput_2 main ] start
										 */

										currentComponent = "tDBOutput_2";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "insert__dim_action"

											);
										}

										whetherReject_tDBOutput_2 = false;
										if (insert__dim_action.Numero_d_action == null) {
											pstmt_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(1, insert__dim_action.Numero_d_action);
										}

										if (insert__dim_action.Intitule_de_l_action == null) {
											pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2.setString(2, insert__dim_action.Intitule_de_l_action);
										}

										pstmt_tDBOutput_2.addBatch();
										nb_line_tDBOutput_2++;

										batchSizeCounter_tDBOutput_2++;

										if ((batchSize_tDBOutput_2 > 0)
												&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
											try {
												int countSum_tDBOutput_2 = 0;

												for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}
												rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												batchSizeCounter_tDBOutput_2 = 0;
											} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
												globalMap.put("tDBOutput_2_ERROR_MESSAGE", e_tDBOutput_2.getMessage());
												java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
														sqle_tDBOutput_2 = null;
												String errormessage_tDBOutput_2;
												if (ne_tDBOutput_2 != null) {
													// build new exception to provide the original cause
													sqle_tDBOutput_2 = new java.sql.SQLException(
															e_tDBOutput_2.getMessage() + "\ncaused by: "
																	+ ne_tDBOutput_2.getMessage(),
															ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
															ne_tDBOutput_2);
													errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
												} else {
													errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
												}

												int countSum_tDBOutput_2 = 0;
												for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}
												rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												System.err.println(errormessage_tDBOutput_2);

											}
										}

										commitCounter_tDBOutput_2++;
										if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
											if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
												try {
													int countSum_tDBOutput_2 = 0;

													for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}
													rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

													batchSizeCounter_tDBOutput_2 = 0;
												} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
													globalMap.put("tDBOutput_2_ERROR_MESSAGE",
															e_tDBOutput_2.getMessage());
													java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
															.getNextException(), sqle_tDBOutput_2 = null;
													String errormessage_tDBOutput_2;
													if (ne_tDBOutput_2 != null) {
														// build new exception to provide the original cause
														sqle_tDBOutput_2 = new java.sql.SQLException(
																e_tDBOutput_2.getMessage() + "\ncaused by: "
																		+ ne_tDBOutput_2.getMessage(),
																ne_tDBOutput_2.getSQLState(),
																ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
														errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
													} else {
														errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
													}

													int countSum_tDBOutput_2 = 0;
													for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}
													rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

													System.err.println(errormessage_tDBOutput_2);

												}
											}
											if (rowsToCommitCount_tDBOutput_2 != 0) {

											}
											conn_tDBOutput_2.commit();
											if (rowsToCommitCount_tDBOutput_2 != 0) {

												rowsToCommitCount_tDBOutput_2 = 0;
											}
											commitCounter_tDBOutput_2 = 0;
										}

										tos_count_tDBOutput_2++;

										/**
										 * [tDBOutput_2 main ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_end ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_end ] stop
										 */

									} // End of branch "insert__dim_action"

									/**
									 * [tMap_12 process_data_end ] start
									 */

									currentComponent = "tMap_12";

									/**
									 * [tMap_12 process_data_end ] stop
									 */

									/**
									 * [tUnite_1 process_data_end ] start
									 */

									currentComponent = "tUnite_1";

									/**
									 * [tUnite_1 process_data_end ] stop
									 */

								} // End of branch "out5"

								/**
								 * [tMap_6 process_data_end ] start
								 */

								currentComponent = "tMap_6";

								/**
								 * [tMap_6 process_data_end ] stop
								 */

							} // End of branch "row5"

							/**
							 * [tFileInputExcel_5 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_5";

							/**
							 * [tFileInputExcel_5 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_5 end ] start
							 */

							currentComponent = "tFileInputExcel_5";

						}

						globalMap.put("tFileInputExcel_5_NB_LINE", nb_line_tFileInputExcel_5);

					}

				} finally {

					if (!(source_tFileInputExcel_5 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_5.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_5", true);
				end_Hash.put("tFileInputExcel_5", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_5 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tMap_7 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_7__Struct {
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
				OUT7Struct OUT7_tmp = new OUT7Struct();
// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tFileInputExcel_6 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_6", false);
				start_Hash.put("tFileInputExcel_6", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_6";

				int tos_count_tFileInputExcel_6 = 0;

				final String decryptedPassword_tFileInputExcel_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:F+9LkszD7xO94yMiTIiu9gX6r5mD1o//atKiNw==");
				String password_tFileInputExcel_6 = decryptedPassword_tFileInputExcel_6;
				if (password_tFileInputExcel_6.isEmpty()) {
					password_tFileInputExcel_6 = null;
				}
				class RegexUtil_tFileInputExcel_6 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_6 regexUtil_tFileInputExcel_6 = new RegexUtil_tFileInputExcel_6();

				Object source_tFileInputExcel_6 = "C:/Users/balkis/Desktop/RH/Réalisations 2017.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_6 = null;

				if (source_tFileInputExcel_6 instanceof String) {
					workbook_tFileInputExcel_6 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_6), password_tFileInputExcel_6,
									true);
				} else if (source_tFileInputExcel_6 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_6 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_6, password_tFileInputExcel_6);
				} else {
					workbook_tFileInputExcel_6 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_6 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					sheetList_tFileInputExcel_6.addAll(regexUtil_tFileInputExcel_6.getSheets(workbook_tFileInputExcel_6,
							"Actions réalisées 2017", false));
					if (sheetList_tFileInputExcel_6.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_6 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_6 : sheetList_tFileInputExcel_6) {
						if (sheet_FilterNull_tFileInputExcel_6 != null
								&& sheetList_FilterNull_tFileInputExcel_6.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_6.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_6.add(sheet_FilterNull_tFileInputExcel_6);
						}
					}
					sheetList_tFileInputExcel_6 = sheetList_FilterNull_tFileInputExcel_6;
					if (sheetList_tFileInputExcel_6.size() > 0) {
						int nb_line_tFileInputExcel_6 = 0;

						int begin_line_tFileInputExcel_6 = 1;

						int footer_input_tFileInputExcel_6 = 0;

						int end_line_tFileInputExcel_6 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_6 : sheetList_tFileInputExcel_6) {
							end_line_tFileInputExcel_6 += (sheet_tFileInputExcel_6.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_6 -= footer_input_tFileInputExcel_6;
						int limit_tFileInputExcel_6 = -1;
						int start_column_tFileInputExcel_6 = 1 - 1;
						int end_column_tFileInputExcel_6 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_6 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_6 = sheetList_tFileInputExcel_6
								.get(0);
						int rowCount_tFileInputExcel_6 = 0;
						int sheetIndex_tFileInputExcel_6 = 0;
						int currentRows_tFileInputExcel_6 = (sheetList_tFileInputExcel_6.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_6 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_6 = df_tFileInputExcel_6.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_6 = begin_line_tFileInputExcel_6; i_tFileInputExcel_6 < end_line_tFileInputExcel_6; i_tFileInputExcel_6++) {

							int emptyColumnCount_tFileInputExcel_6 = 0;

							if (limit_tFileInputExcel_6 != -1 && nb_line_tFileInputExcel_6 >= limit_tFileInputExcel_6) {
								break;
							}

							while (i_tFileInputExcel_6 >= rowCount_tFileInputExcel_6 + currentRows_tFileInputExcel_6) {
								rowCount_tFileInputExcel_6 += currentRows_tFileInputExcel_6;
								sheet_tFileInputExcel_6 = sheetList_tFileInputExcel_6
										.get(++sheetIndex_tFileInputExcel_6);
								currentRows_tFileInputExcel_6 = (sheet_tFileInputExcel_6.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_6_CURRENT_SHEET", sheet_tFileInputExcel_6.getSheetName());
							if (rowCount_tFileInputExcel_6 <= i_tFileInputExcel_6) {
								row_tFileInputExcel_6 = sheet_tFileInputExcel_6
										.getRow(i_tFileInputExcel_6 - rowCount_tFileInputExcel_6);
							}
							row6 = null;
							int tempRowLength_tFileInputExcel_6 = 10;

							int columnIndex_tFileInputExcel_6 = 0;

							String[] temp_row_tFileInputExcel_6 = new String[tempRowLength_tFileInputExcel_6];
							int excel_end_column_tFileInputExcel_6;
							if (row_tFileInputExcel_6 == null) {
								excel_end_column_tFileInputExcel_6 = 0;
							} else {
								excel_end_column_tFileInputExcel_6 = row_tFileInputExcel_6.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_6;
							if (end_column_tFileInputExcel_6 == -1) {
								actual_end_column_tFileInputExcel_6 = excel_end_column_tFileInputExcel_6;
							} else {
								actual_end_column_tFileInputExcel_6 = end_column_tFileInputExcel_6 > excel_end_column_tFileInputExcel_6
										? excel_end_column_tFileInputExcel_6
										: end_column_tFileInputExcel_6;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_6 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_6; i++) {
								if (i + start_column_tFileInputExcel_6 < actual_end_column_tFileInputExcel_6) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_6 = row_tFileInputExcel_6
											.getCell(i + start_column_tFileInputExcel_6);
									if (cell_tFileInputExcel_6 != null) {
										switch (cell_tFileInputExcel_6.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_6[i] = cell_tFileInputExcel_6
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_6)) {
												temp_row_tFileInputExcel_6[i] = cell_tFileInputExcel_6
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_6[i] = df_tFileInputExcel_6
														.format(cell_tFileInputExcel_6.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_6[i] = String
													.valueOf(cell_tFileInputExcel_6.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_6.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_6[i] = cell_tFileInputExcel_6
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_6)) {
													temp_row_tFileInputExcel_6[i] = cell_tFileInputExcel_6
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_6 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_6.getNumericCellValue());
													temp_row_tFileInputExcel_6[i] = ne_tFileInputExcel_6
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_6[i] = String
														.valueOf(cell_tFileInputExcel_6.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_6[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_6[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_6[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_6[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_6 = false;
							row6 = new row6Struct();
							int curColNum_tFileInputExcel_6 = -1;
							String curColName_tFileInputExcel_6 = "";
							try {
								columnIndex_tFileInputExcel_6 = 0;

								if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6].length() > 0) {
									curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
											+ start_column_tFileInputExcel_6 + 1;
									curColName_tFileInputExcel_6 = "Num_action";

									row6.Num_action = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6], null,
											'.' == decimalChar_tFileInputExcel_6 ? null
													: decimalChar_tFileInputExcel_6));
								} else {
									row6.Num_action = null;
									emptyColumnCount_tFileInputExcel_6++;
								}
								columnIndex_tFileInputExcel_6 = 1;

								if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6].length() > 0) {
									curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
											+ start_column_tFileInputExcel_6 + 1;
									curColName_tFileInputExcel_6 = "Intitule_de_l_action";

									row6.Intitule_de_l_action = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6];
								} else {
									row6.Intitule_de_l_action = null;
									emptyColumnCount_tFileInputExcel_6++;
								}
								columnIndex_tFileInputExcel_6 = 2;

								if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6].length() > 0) {
									curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
											+ start_column_tFileInputExcel_6 + 1;
									curColName_tFileInputExcel_6 = "Date_debut";

									row6.Date_debut = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6];
								} else {
									row6.Date_debut = null;
									emptyColumnCount_tFileInputExcel_6++;
								}
								columnIndex_tFileInputExcel_6 = 3;

								if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6].length() > 0) {
									curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
											+ start_column_tFileInputExcel_6 + 1;
									curColName_tFileInputExcel_6 = "Date_fin";

									row6.Date_fin = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6];
								} else {
									row6.Date_fin = null;
									emptyColumnCount_tFileInputExcel_6++;
								}
								columnIndex_tFileInputExcel_6 = 4;

								if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6].length() > 0) {
									curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
											+ start_column_tFileInputExcel_6 + 1;
									curColName_tFileInputExcel_6 = "Nb_de_participants";

									row6.Nb_de_participants = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6], null,
											'.' == decimalChar_tFileInputExcel_6 ? null
													: decimalChar_tFileInputExcel_6));
								} else {
									row6.Nb_de_participants = null;
									emptyColumnCount_tFileInputExcel_6++;
								}
								columnIndex_tFileInputExcel_6 = 5;

								if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6].length() > 0) {
									curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
											+ start_column_tFileInputExcel_6 + 1;
									curColName_tFileInputExcel_6 = "nb_de_jours";

									row6.nb_de_jours = ParserUtils.parseTo_BigDecimal(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6], null,
											'.' == decimalChar_tFileInputExcel_6 ? null
													: decimalChar_tFileInputExcel_6));
								} else {
									row6.nb_de_jours = null;
									emptyColumnCount_tFileInputExcel_6++;
								}
								columnIndex_tFileInputExcel_6 = 6;

								if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6].length() > 0) {
									curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
											+ start_column_tFileInputExcel_6 + 1;
									curColName_tFileInputExcel_6 = "nb_d_heures";

									row6.nb_d_heures = ParserUtils.parseTo_BigDecimal(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6], null,
											'.' == decimalChar_tFileInputExcel_6 ? null
													: decimalChar_tFileInputExcel_6));
								} else {
									row6.nb_d_heures = null;
									emptyColumnCount_tFileInputExcel_6++;
								}
								columnIndex_tFileInputExcel_6 = 7;

								if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6].length() > 0) {
									curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
											+ start_column_tFileInputExcel_6 + 1;
									curColName_tFileInputExcel_6 = "Organisme_Formateurs";

									row6.Organisme_Formateurs = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6];
								} else {
									row6.Organisme_Formateurs = null;
									emptyColumnCount_tFileInputExcel_6++;
								}
								columnIndex_tFileInputExcel_6 = 8;

								if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6].length() > 0) {
									curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
											+ start_column_tFileInputExcel_6 + 1;
									curColName_tFileInputExcel_6 = "Mode";

									row6.Mode = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6];
								} else {
									row6.Mode = null;
									emptyColumnCount_tFileInputExcel_6++;
								}
								columnIndex_tFileInputExcel_6 = 9;

								if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6].length() > 0) {
									curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
											+ start_column_tFileInputExcel_6 + 1;
									curColName_tFileInputExcel_6 = "Cout__HT";

									row6.Cout__HT = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6], null,
											'.' == decimalChar_tFileInputExcel_6 ? null
													: decimalChar_tFileInputExcel_6));
								} else {
									row6.Cout__HT = null;
									emptyColumnCount_tFileInputExcel_6++;
								}

								nb_line_tFileInputExcel_6++;

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputExcel_6_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputExcel_6 = true;
								System.err.println(e.getMessage());
								row6 = null;
							}

							/**
							 * [tFileInputExcel_6 begin ] stop
							 */

							/**
							 * [tFileInputExcel_6 main ] start
							 */

							currentComponent = "tFileInputExcel_6";

							tos_count_tFileInputExcel_6++;

							/**
							 * [tFileInputExcel_6 main ] stop
							 */

							/**
							 * [tFileInputExcel_6 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_6";

							/**
							 * [tFileInputExcel_6 process_data_begin ] stop
							 */
// Start of branch "row6"
							if (row6 != null) {

								/**
								 * [tMap_7 main ] start
								 */

								currentComponent = "tMap_7";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row6"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_7 = false;
								boolean mainRowRejected_tMap_7 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
									// ###############################
									// # Output tables

									OUT7 = null;

// # Output table : 'OUT7'
									OUT7_tmp.Numero_d_action = row6.Num_action;
									OUT7_tmp.Intitule_de_l_action = row6.Intitule_de_l_action;
									OUT7 = OUT7_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_7 = false;

								tos_count_tMap_7++;

								/**
								 * [tMap_7 main ] stop
								 */

								/**
								 * [tMap_7 process_data_begin ] start
								 */

								currentComponent = "tMap_7";

								/**
								 * [tMap_7 process_data_begin ] stop
								 */
// Start of branch "OUT7"
								if (OUT7 != null) {

									/**
									 * [tUnite_1 main ] start
									 */

									currentComponent = "tUnite_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "OUT7"

										);
									}

//////////

// for output
									row12 = new row12Struct();

									row12.Numero_d_action = OUT7.Numero_d_action;
									row12.Intitule_de_l_action = OUT7.Intitule_de_l_action;

									nb_line_tUnite_1++;

//////////

									tos_count_tUnite_1++;

									/**
									 * [tUnite_1 main ] stop
									 */

									/**
									 * [tUnite_1 process_data_begin ] start
									 */

									currentComponent = "tUnite_1";

									/**
									 * [tUnite_1 process_data_begin ] stop
									 */

									/**
									 * [tMap_12 main ] start
									 */

									currentComponent = "tMap_12";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row12"

										);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_12 = false;
									boolean mainRowRejected_tMap_12 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
										// ###############################
										// # Output tables

										insert__dim_action = null;

// # Output table : 'insert__dim_action'
										insert__dim_action_tmp.Numero_d_action = row12.Numero_d_action;
										insert__dim_action_tmp.Intitule_de_l_action = row12.Intitule_de_l_action;
										insert__dim_action = insert__dim_action_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_12 = false;

									tos_count_tMap_12++;

									/**
									 * [tMap_12 main ] stop
									 */

									/**
									 * [tMap_12 process_data_begin ] start
									 */

									currentComponent = "tMap_12";

									/**
									 * [tMap_12 process_data_begin ] stop
									 */
// Start of branch "insert__dim_action"
									if (insert__dim_action != null) {

										/**
										 * [tDBOutput_2 main ] start
										 */

										currentComponent = "tDBOutput_2";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "insert__dim_action"

											);
										}

										whetherReject_tDBOutput_2 = false;
										if (insert__dim_action.Numero_d_action == null) {
											pstmt_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(1, insert__dim_action.Numero_d_action);
										}

										if (insert__dim_action.Intitule_de_l_action == null) {
											pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2.setString(2, insert__dim_action.Intitule_de_l_action);
										}

										pstmt_tDBOutput_2.addBatch();
										nb_line_tDBOutput_2++;

										batchSizeCounter_tDBOutput_2++;

										if ((batchSize_tDBOutput_2 > 0)
												&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
											try {
												int countSum_tDBOutput_2 = 0;

												for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}
												rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												batchSizeCounter_tDBOutput_2 = 0;
											} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
												globalMap.put("tDBOutput_2_ERROR_MESSAGE", e_tDBOutput_2.getMessage());
												java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
														sqle_tDBOutput_2 = null;
												String errormessage_tDBOutput_2;
												if (ne_tDBOutput_2 != null) {
													// build new exception to provide the original cause
													sqle_tDBOutput_2 = new java.sql.SQLException(
															e_tDBOutput_2.getMessage() + "\ncaused by: "
																	+ ne_tDBOutput_2.getMessage(),
															ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
															ne_tDBOutput_2);
													errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
												} else {
													errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
												}

												int countSum_tDBOutput_2 = 0;
												for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}
												rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												System.err.println(errormessage_tDBOutput_2);

											}
										}

										commitCounter_tDBOutput_2++;
										if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
											if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
												try {
													int countSum_tDBOutput_2 = 0;

													for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}
													rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

													batchSizeCounter_tDBOutput_2 = 0;
												} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
													globalMap.put("tDBOutput_2_ERROR_MESSAGE",
															e_tDBOutput_2.getMessage());
													java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
															.getNextException(), sqle_tDBOutput_2 = null;
													String errormessage_tDBOutput_2;
													if (ne_tDBOutput_2 != null) {
														// build new exception to provide the original cause
														sqle_tDBOutput_2 = new java.sql.SQLException(
																e_tDBOutput_2.getMessage() + "\ncaused by: "
																		+ ne_tDBOutput_2.getMessage(),
																ne_tDBOutput_2.getSQLState(),
																ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
														errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
													} else {
														errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
													}

													int countSum_tDBOutput_2 = 0;
													for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}
													rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

													System.err.println(errormessage_tDBOutput_2);

												}
											}
											if (rowsToCommitCount_tDBOutput_2 != 0) {

											}
											conn_tDBOutput_2.commit();
											if (rowsToCommitCount_tDBOutput_2 != 0) {

												rowsToCommitCount_tDBOutput_2 = 0;
											}
											commitCounter_tDBOutput_2 = 0;
										}

										tos_count_tDBOutput_2++;

										/**
										 * [tDBOutput_2 main ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_end ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_end ] stop
										 */

									} // End of branch "insert__dim_action"

									/**
									 * [tMap_12 process_data_end ] start
									 */

									currentComponent = "tMap_12";

									/**
									 * [tMap_12 process_data_end ] stop
									 */

									/**
									 * [tUnite_1 process_data_end ] start
									 */

									currentComponent = "tUnite_1";

									/**
									 * [tUnite_1 process_data_end ] stop
									 */

								} // End of branch "OUT7"

								/**
								 * [tMap_7 process_data_end ] start
								 */

								currentComponent = "tMap_7";

								/**
								 * [tMap_7 process_data_end ] stop
								 */

							} // End of branch "row6"

							/**
							 * [tFileInputExcel_6 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_6";

							/**
							 * [tFileInputExcel_6 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_6 end ] start
							 */

							currentComponent = "tFileInputExcel_6";

						}

						globalMap.put("tFileInputExcel_6_NB_LINE", nb_line_tFileInputExcel_6);

					}

				} finally {

					if (!(source_tFileInputExcel_6 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_6.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_6", true);
				end_Hash.put("tFileInputExcel_6", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_6 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tMap_8 begin ] start
				 */

				ok_Hash.put("tMap_8", false);
				start_Hash.put("tMap_8", System.currentTimeMillis());

				currentComponent = "tMap_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tMap_8 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_8__Struct {
				}
				Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
				OUT8Struct OUT8_tmp = new OUT8Struct();
// ###############################

				/**
				 * [tMap_8 begin ] stop
				 */

				/**
				 * [tFileInputExcel_7 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_7", false);
				start_Hash.put("tFileInputExcel_7", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_7";

				int tos_count_tFileInputExcel_7 = 0;

				final String decryptedPassword_tFileInputExcel_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:MvHu9IVs3tkBr4+rOoEzjLuPL1ZzAYA8OvEpLQ==");
				String password_tFileInputExcel_7 = decryptedPassword_tFileInputExcel_7;
				if (password_tFileInputExcel_7.isEmpty()) {
					password_tFileInputExcel_7 = null;
				}
				class RegexUtil_tFileInputExcel_7 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_7 regexUtil_tFileInputExcel_7 = new RegexUtil_tFileInputExcel_7();

				Object source_tFileInputExcel_7 = "C:/Users/balkis/Desktop/RH/Réalisations 2018.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_7 = null;

				if (source_tFileInputExcel_7 instanceof String) {
					workbook_tFileInputExcel_7 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_7), password_tFileInputExcel_7,
									true);
				} else if (source_tFileInputExcel_7 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_7 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_7, password_tFileInputExcel_7);
				} else {
					workbook_tFileInputExcel_7 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_7 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					sheetList_tFileInputExcel_7.addAll(regexUtil_tFileInputExcel_7.getSheets(workbook_tFileInputExcel_7,
							"Plan par action", false));
					if (sheetList_tFileInputExcel_7.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_7 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_7 : sheetList_tFileInputExcel_7) {
						if (sheet_FilterNull_tFileInputExcel_7 != null
								&& sheetList_FilterNull_tFileInputExcel_7.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_7.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_7.add(sheet_FilterNull_tFileInputExcel_7);
						}
					}
					sheetList_tFileInputExcel_7 = sheetList_FilterNull_tFileInputExcel_7;
					if (sheetList_tFileInputExcel_7.size() > 0) {
						int nb_line_tFileInputExcel_7 = 0;

						int begin_line_tFileInputExcel_7 = 1;

						int footer_input_tFileInputExcel_7 = 0;

						int end_line_tFileInputExcel_7 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_7 : sheetList_tFileInputExcel_7) {
							end_line_tFileInputExcel_7 += (sheet_tFileInputExcel_7.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_7 -= footer_input_tFileInputExcel_7;
						int limit_tFileInputExcel_7 = -1;
						int start_column_tFileInputExcel_7 = 1 - 1;
						int end_column_tFileInputExcel_7 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_7 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_7 = sheetList_tFileInputExcel_7
								.get(0);
						int rowCount_tFileInputExcel_7 = 0;
						int sheetIndex_tFileInputExcel_7 = 0;
						int currentRows_tFileInputExcel_7 = (sheetList_tFileInputExcel_7.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_7 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_7 = df_tFileInputExcel_7.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_7 = begin_line_tFileInputExcel_7; i_tFileInputExcel_7 < end_line_tFileInputExcel_7; i_tFileInputExcel_7++) {

							int emptyColumnCount_tFileInputExcel_7 = 0;

							if (limit_tFileInputExcel_7 != -1 && nb_line_tFileInputExcel_7 >= limit_tFileInputExcel_7) {
								break;
							}

							while (i_tFileInputExcel_7 >= rowCount_tFileInputExcel_7 + currentRows_tFileInputExcel_7) {
								rowCount_tFileInputExcel_7 += currentRows_tFileInputExcel_7;
								sheet_tFileInputExcel_7 = sheetList_tFileInputExcel_7
										.get(++sheetIndex_tFileInputExcel_7);
								currentRows_tFileInputExcel_7 = (sheet_tFileInputExcel_7.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_7_CURRENT_SHEET", sheet_tFileInputExcel_7.getSheetName());
							if (rowCount_tFileInputExcel_7 <= i_tFileInputExcel_7) {
								row_tFileInputExcel_7 = sheet_tFileInputExcel_7
										.getRow(i_tFileInputExcel_7 - rowCount_tFileInputExcel_7);
							}
							row7 = null;
							int tempRowLength_tFileInputExcel_7 = 10;

							int columnIndex_tFileInputExcel_7 = 0;

							String[] temp_row_tFileInputExcel_7 = new String[tempRowLength_tFileInputExcel_7];
							int excel_end_column_tFileInputExcel_7;
							if (row_tFileInputExcel_7 == null) {
								excel_end_column_tFileInputExcel_7 = 0;
							} else {
								excel_end_column_tFileInputExcel_7 = row_tFileInputExcel_7.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_7;
							if (end_column_tFileInputExcel_7 == -1) {
								actual_end_column_tFileInputExcel_7 = excel_end_column_tFileInputExcel_7;
							} else {
								actual_end_column_tFileInputExcel_7 = end_column_tFileInputExcel_7 > excel_end_column_tFileInputExcel_7
										? excel_end_column_tFileInputExcel_7
										: end_column_tFileInputExcel_7;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_7 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_7; i++) {
								if (i + start_column_tFileInputExcel_7 < actual_end_column_tFileInputExcel_7) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_7 = row_tFileInputExcel_7
											.getCell(i + start_column_tFileInputExcel_7);
									if (cell_tFileInputExcel_7 != null) {
										switch (cell_tFileInputExcel_7.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_7[i] = cell_tFileInputExcel_7
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_7)) {
												temp_row_tFileInputExcel_7[i] = cell_tFileInputExcel_7
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_7[i] = df_tFileInputExcel_7
														.format(cell_tFileInputExcel_7.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_7[i] = String
													.valueOf(cell_tFileInputExcel_7.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_7.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_7[i] = cell_tFileInputExcel_7
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_7)) {
													temp_row_tFileInputExcel_7[i] = cell_tFileInputExcel_7
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_7 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_7.getNumericCellValue());
													temp_row_tFileInputExcel_7[i] = ne_tFileInputExcel_7
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_7[i] = String
														.valueOf(cell_tFileInputExcel_7.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_7[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_7[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_7[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_7[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_7 = false;
							row7 = new row7Struct();
							int curColNum_tFileInputExcel_7 = -1;
							String curColName_tFileInputExcel_7 = "";
							try {
								columnIndex_tFileInputExcel_7 = 0;

								if (temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7].length() > 0) {
									curColNum_tFileInputExcel_7 = columnIndex_tFileInputExcel_7
											+ start_column_tFileInputExcel_7 + 1;
									curColName_tFileInputExcel_7 = "Num_action";

									row7.Num_action = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7], null,
											'.' == decimalChar_tFileInputExcel_7 ? null
													: decimalChar_tFileInputExcel_7));
								} else {
									row7.Num_action = null;
									emptyColumnCount_tFileInputExcel_7++;
								}
								columnIndex_tFileInputExcel_7 = 1;

								if (temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7].length() > 0) {
									curColNum_tFileInputExcel_7 = columnIndex_tFileInputExcel_7
											+ start_column_tFileInputExcel_7 + 1;
									curColName_tFileInputExcel_7 = "Intitule_de_l_action";

									row7.Intitule_de_l_action = temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7];
								} else {
									row7.Intitule_de_l_action = null;
									emptyColumnCount_tFileInputExcel_7++;
								}
								columnIndex_tFileInputExcel_7 = 2;

								if (temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7].length() > 0) {
									curColNum_tFileInputExcel_7 = columnIndex_tFileInputExcel_7
											+ start_column_tFileInputExcel_7 + 1;
									curColName_tFileInputExcel_7 = "Date_debut";

									row7.Date_debut = temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7];
								} else {
									row7.Date_debut = null;
									emptyColumnCount_tFileInputExcel_7++;
								}
								columnIndex_tFileInputExcel_7 = 3;

								if (temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7].length() > 0) {
									curColNum_tFileInputExcel_7 = columnIndex_tFileInputExcel_7
											+ start_column_tFileInputExcel_7 + 1;
									curColName_tFileInputExcel_7 = "Date_fin";

									row7.Date_fin = temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7];
								} else {
									row7.Date_fin = null;
									emptyColumnCount_tFileInputExcel_7++;
								}
								columnIndex_tFileInputExcel_7 = 4;

								if (temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7].length() > 0) {
									curColNum_tFileInputExcel_7 = columnIndex_tFileInputExcel_7
											+ start_column_tFileInputExcel_7 + 1;
									curColName_tFileInputExcel_7 = "Nb_de_participants";

									row7.Nb_de_participants = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7], null,
											'.' == decimalChar_tFileInputExcel_7 ? null
													: decimalChar_tFileInputExcel_7));
								} else {
									row7.Nb_de_participants = null;
									emptyColumnCount_tFileInputExcel_7++;
								}
								columnIndex_tFileInputExcel_7 = 5;

								if (temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7].length() > 0) {
									curColNum_tFileInputExcel_7 = columnIndex_tFileInputExcel_7
											+ start_column_tFileInputExcel_7 + 1;
									curColName_tFileInputExcel_7 = "nb_de_jours";

									row7.nb_de_jours = ParserUtils.parseTo_BigDecimal(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7], null,
											'.' == decimalChar_tFileInputExcel_7 ? null
													: decimalChar_tFileInputExcel_7));
								} else {
									row7.nb_de_jours = null;
									emptyColumnCount_tFileInputExcel_7++;
								}
								columnIndex_tFileInputExcel_7 = 6;

								if (temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7].length() > 0) {
									curColNum_tFileInputExcel_7 = columnIndex_tFileInputExcel_7
											+ start_column_tFileInputExcel_7 + 1;
									curColName_tFileInputExcel_7 = "nb_d_heures";

									row7.nb_d_heures = ParserUtils.parseTo_BigDecimal(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7], null,
											'.' == decimalChar_tFileInputExcel_7 ? null
													: decimalChar_tFileInputExcel_7));
								} else {
									row7.nb_d_heures = null;
									emptyColumnCount_tFileInputExcel_7++;
								}
								columnIndex_tFileInputExcel_7 = 7;

								if (temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7].length() > 0) {
									curColNum_tFileInputExcel_7 = columnIndex_tFileInputExcel_7
											+ start_column_tFileInputExcel_7 + 1;
									curColName_tFileInputExcel_7 = "Organisme__Formateurs";

									row7.Organisme__Formateurs = temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7];
								} else {
									row7.Organisme__Formateurs = null;
									emptyColumnCount_tFileInputExcel_7++;
								}
								columnIndex_tFileInputExcel_7 = 8;

								if (temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7].length() > 0) {
									curColNum_tFileInputExcel_7 = columnIndex_tFileInputExcel_7
											+ start_column_tFileInputExcel_7 + 1;
									curColName_tFileInputExcel_7 = "Mode";

									row7.Mode = temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7];
								} else {
									row7.Mode = null;
									emptyColumnCount_tFileInputExcel_7++;
								}
								columnIndex_tFileInputExcel_7 = 9;

								if (temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7].length() > 0) {
									curColNum_tFileInputExcel_7 = columnIndex_tFileInputExcel_7
											+ start_column_tFileInputExcel_7 + 1;
									curColName_tFileInputExcel_7 = "Cout__HT";

									row7.Cout__HT = temp_row_tFileInputExcel_7[columnIndex_tFileInputExcel_7];
								} else {
									row7.Cout__HT = null;
									emptyColumnCount_tFileInputExcel_7++;
								}

								nb_line_tFileInputExcel_7++;

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputExcel_7_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputExcel_7 = true;
								System.err.println(e.getMessage());
								row7 = null;
							}

							/**
							 * [tFileInputExcel_7 begin ] stop
							 */

							/**
							 * [tFileInputExcel_7 main ] start
							 */

							currentComponent = "tFileInputExcel_7";

							tos_count_tFileInputExcel_7++;

							/**
							 * [tFileInputExcel_7 main ] stop
							 */

							/**
							 * [tFileInputExcel_7 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_7";

							/**
							 * [tFileInputExcel_7 process_data_begin ] stop
							 */
// Start of branch "row7"
							if (row7 != null) {

								/**
								 * [tMap_8 main ] start
								 */

								currentComponent = "tMap_8";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row7"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_8 = false;
								boolean mainRowRejected_tMap_8 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
									// ###############################
									// # Output tables

									OUT8 = null;

// # Output table : 'OUT8'
									OUT8_tmp.Numero_d_action = row7.Num_action;
									OUT8_tmp.Intitule_de_l_action = row7.Intitule_de_l_action;
									OUT8 = OUT8_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_8 = false;

								tos_count_tMap_8++;

								/**
								 * [tMap_8 main ] stop
								 */

								/**
								 * [tMap_8 process_data_begin ] start
								 */

								currentComponent = "tMap_8";

								/**
								 * [tMap_8 process_data_begin ] stop
								 */
// Start of branch "OUT8"
								if (OUT8 != null) {

									/**
									 * [tUnite_1 main ] start
									 */

									currentComponent = "tUnite_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "OUT8"

										);
									}

//////////

// for output
									row12 = new row12Struct();

									row12.Numero_d_action = OUT8.Numero_d_action;
									row12.Intitule_de_l_action = OUT8.Intitule_de_l_action;

									nb_line_tUnite_1++;

//////////

									tos_count_tUnite_1++;

									/**
									 * [tUnite_1 main ] stop
									 */

									/**
									 * [tUnite_1 process_data_begin ] start
									 */

									currentComponent = "tUnite_1";

									/**
									 * [tUnite_1 process_data_begin ] stop
									 */

									/**
									 * [tMap_12 main ] start
									 */

									currentComponent = "tMap_12";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row12"

										);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_12 = false;
									boolean mainRowRejected_tMap_12 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
										// ###############################
										// # Output tables

										insert__dim_action = null;

// # Output table : 'insert__dim_action'
										insert__dim_action_tmp.Numero_d_action = row12.Numero_d_action;
										insert__dim_action_tmp.Intitule_de_l_action = row12.Intitule_de_l_action;
										insert__dim_action = insert__dim_action_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_12 = false;

									tos_count_tMap_12++;

									/**
									 * [tMap_12 main ] stop
									 */

									/**
									 * [tMap_12 process_data_begin ] start
									 */

									currentComponent = "tMap_12";

									/**
									 * [tMap_12 process_data_begin ] stop
									 */
// Start of branch "insert__dim_action"
									if (insert__dim_action != null) {

										/**
										 * [tDBOutput_2 main ] start
										 */

										currentComponent = "tDBOutput_2";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "insert__dim_action"

											);
										}

										whetherReject_tDBOutput_2 = false;
										if (insert__dim_action.Numero_d_action == null) {
											pstmt_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(1, insert__dim_action.Numero_d_action);
										}

										if (insert__dim_action.Intitule_de_l_action == null) {
											pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2.setString(2, insert__dim_action.Intitule_de_l_action);
										}

										pstmt_tDBOutput_2.addBatch();
										nb_line_tDBOutput_2++;

										batchSizeCounter_tDBOutput_2++;

										if ((batchSize_tDBOutput_2 > 0)
												&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
											try {
												int countSum_tDBOutput_2 = 0;

												for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}
												rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												batchSizeCounter_tDBOutput_2 = 0;
											} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
												globalMap.put("tDBOutput_2_ERROR_MESSAGE", e_tDBOutput_2.getMessage());
												java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
														sqle_tDBOutput_2 = null;
												String errormessage_tDBOutput_2;
												if (ne_tDBOutput_2 != null) {
													// build new exception to provide the original cause
													sqle_tDBOutput_2 = new java.sql.SQLException(
															e_tDBOutput_2.getMessage() + "\ncaused by: "
																	+ ne_tDBOutput_2.getMessage(),
															ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
															ne_tDBOutput_2);
													errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
												} else {
													errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
												}

												int countSum_tDBOutput_2 = 0;
												for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}
												rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												System.err.println(errormessage_tDBOutput_2);

											}
										}

										commitCounter_tDBOutput_2++;
										if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
											if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
												try {
													int countSum_tDBOutput_2 = 0;

													for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}
													rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

													batchSizeCounter_tDBOutput_2 = 0;
												} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
													globalMap.put("tDBOutput_2_ERROR_MESSAGE",
															e_tDBOutput_2.getMessage());
													java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
															.getNextException(), sqle_tDBOutput_2 = null;
													String errormessage_tDBOutput_2;
													if (ne_tDBOutput_2 != null) {
														// build new exception to provide the original cause
														sqle_tDBOutput_2 = new java.sql.SQLException(
																e_tDBOutput_2.getMessage() + "\ncaused by: "
																		+ ne_tDBOutput_2.getMessage(),
																ne_tDBOutput_2.getSQLState(),
																ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
														errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
													} else {
														errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
													}

													int countSum_tDBOutput_2 = 0;
													for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}
													rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

													System.err.println(errormessage_tDBOutput_2);

												}
											}
											if (rowsToCommitCount_tDBOutput_2 != 0) {

											}
											conn_tDBOutput_2.commit();
											if (rowsToCommitCount_tDBOutput_2 != 0) {

												rowsToCommitCount_tDBOutput_2 = 0;
											}
											commitCounter_tDBOutput_2 = 0;
										}

										tos_count_tDBOutput_2++;

										/**
										 * [tDBOutput_2 main ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_end ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_end ] stop
										 */

									} // End of branch "insert__dim_action"

									/**
									 * [tMap_12 process_data_end ] start
									 */

									currentComponent = "tMap_12";

									/**
									 * [tMap_12 process_data_end ] stop
									 */

									/**
									 * [tUnite_1 process_data_end ] start
									 */

									currentComponent = "tUnite_1";

									/**
									 * [tUnite_1 process_data_end ] stop
									 */

								} // End of branch "OUT8"

								/**
								 * [tMap_8 process_data_end ] start
								 */

								currentComponent = "tMap_8";

								/**
								 * [tMap_8 process_data_end ] stop
								 */

							} // End of branch "row7"

							/**
							 * [tFileInputExcel_7 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_7";

							/**
							 * [tFileInputExcel_7 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_7 end ] start
							 */

							currentComponent = "tFileInputExcel_7";

						}

						globalMap.put("tFileInputExcel_7_NB_LINE", nb_line_tFileInputExcel_7);

					}

				} finally {

					if (!(source_tFileInputExcel_7 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_7.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_7", true);
				end_Hash.put("tFileInputExcel_7", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_7 end ] stop
				 */

				/**
				 * [tMap_8 end ] start
				 */

				currentComponent = "tMap_8";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tMap_8", true);
				end_Hash.put("tMap_8", System.currentTimeMillis());

				/**
				 * [tMap_8 end ] stop
				 */

				/**
				 * [tMap_9 begin ] start
				 */

				ok_Hash.put("tMap_9", false);
				start_Hash.put("tMap_9", System.currentTimeMillis());

				currentComponent = "tMap_9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tMap_9 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_9__Struct {
				}
				Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
				OUT9Struct OUT9_tmp = new OUT9Struct();
// ###############################

				/**
				 * [tMap_9 begin ] stop
				 */

				/**
				 * [tFileInputExcel_8 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_8", false);
				start_Hash.put("tFileInputExcel_8", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_8";

				int tos_count_tFileInputExcel_8 = 0;

				class RegexUtil_tFileInputExcel_8 {

					public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();

						if (useRegex) {// this part process the regex issue

							jxl.Sheet[] sheets = workbook.getSheets();
							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (int i = 0; i < sheets.length; i++) {
								String sheetName = sheets[i].getName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									jxl.Sheet sheet = workbook.getSheet(sheetName);
									if (sheet != null) {
										list.add(sheet);
									}
								}
							}

						} else {
							jxl.Sheet sheet = workbook.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, int index, boolean useRegex) {
						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();
						jxl.Sheet sheet = workbook.getSheet(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}

				RegexUtil_tFileInputExcel_8 regexUtil_tFileInputExcel_8 = new RegexUtil_tFileInputExcel_8();
				final jxl.WorkbookSettings workbookSettings_tFileInputExcel_8 = new jxl.WorkbookSettings();
				workbookSettings_tFileInputExcel_8.setDrawingsDisabled(true);
				workbookSettings_tFileInputExcel_8.setEncoding("UTF-8");

				Object source_tFileInputExcel_8 = "C:/Users/balkis/Desktop/RH/Réalisations 2019.xls";
				final jxl.Workbook workbook_tFileInputExcel_8;

				java.io.InputStream toClose_tFileInputExcel_8 = null;
				java.io.BufferedInputStream buffIStreamtFileInputExcel_8 = null;
				try {
					if (source_tFileInputExcel_8 instanceof java.io.InputStream) {
						toClose_tFileInputExcel_8 = (java.io.InputStream) source_tFileInputExcel_8;
						buffIStreamtFileInputExcel_8 = new java.io.BufferedInputStream(toClose_tFileInputExcel_8);
						workbook_tFileInputExcel_8 = jxl.Workbook.getWorkbook(buffIStreamtFileInputExcel_8,
								workbookSettings_tFileInputExcel_8);
					} else if (source_tFileInputExcel_8 instanceof String) {
						toClose_tFileInputExcel_8 = new java.io.FileInputStream(source_tFileInputExcel_8.toString());
						buffIStreamtFileInputExcel_8 = new java.io.BufferedInputStream(toClose_tFileInputExcel_8);
						workbook_tFileInputExcel_8 = jxl.Workbook.getWorkbook(buffIStreamtFileInputExcel_8,
								workbookSettings_tFileInputExcel_8);
					} else {
						workbook_tFileInputExcel_8 = null;
						throw new java.lang.Exception(
								"The data source should be specified as Inputstream or File Path!");
					}
				} finally {
					try {
						if (buffIStreamtFileInputExcel_8 != null) {
							buffIStreamtFileInputExcel_8.close();
						}
					} catch (Exception e) {
						globalMap.put("tFileInputExcel_8_ERROR_MESSAGE", e.getMessage());
					}
				}
				try {
					java.util.List<jxl.Sheet> sheetList_tFileInputExcel_8 = new java.util.ArrayList<jxl.Sheet>();
					sheetList_tFileInputExcel_8.addAll(regexUtil_tFileInputExcel_8.getSheets(workbook_tFileInputExcel_8,
							"Plan Actions 2019", false));
					if (sheetList_tFileInputExcel_8.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<jxl.Sheet> sheet_FilterNullList_tFileInputExcel_8 = new java.util.ArrayList<jxl.Sheet>();
					for (jxl.Sheet sheet_FilterNull_tFileInputExcel_8 : sheetList_tFileInputExcel_8) {
						if (sheet_FilterNull_tFileInputExcel_8.getRows() > 0) {
							sheet_FilterNullList_tFileInputExcel_8.add(sheet_FilterNull_tFileInputExcel_8);
						}
					}
					sheetList_tFileInputExcel_8 = sheet_FilterNullList_tFileInputExcel_8;
					if (sheetList_tFileInputExcel_8.size() > 0) {
						int nb_line_tFileInputExcel_8 = 0;

						int begin_line_tFileInputExcel_8 = 1;

						int footer_input_tFileInputExcel_8 = 0;

						int end_line_tFileInputExcel_8 = 0;
						for (jxl.Sheet sheet_tFileInputExcel_8 : sheetList_tFileInputExcel_8) {
							end_line_tFileInputExcel_8 += sheet_tFileInputExcel_8.getRows();
						}
						end_line_tFileInputExcel_8 -= footer_input_tFileInputExcel_8;
						int limit_tFileInputExcel_8 = -1;
						int start_column_tFileInputExcel_8 = 1 - 1;
						int end_column_tFileInputExcel_8 = sheetList_tFileInputExcel_8.get(0).getColumns();
						jxl.Cell[] row_tFileInputExcel_8 = null;
						jxl.Sheet sheet_tFileInputExcel_8 = sheetList_tFileInputExcel_8.get(0);
						int rowCount_tFileInputExcel_8 = 0;
						int sheetIndex_tFileInputExcel_8 = 0;
						int currentRows_tFileInputExcel_8 = sheetList_tFileInputExcel_8.get(0).getRows();

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_8 = new java.text.DecimalFormat(
								"#.####################################");
						char separatorChar_tFileInputExcel_8 = df_tFileInputExcel_8.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_8 = begin_line_tFileInputExcel_8; i_tFileInputExcel_8 < end_line_tFileInputExcel_8; i_tFileInputExcel_8++) {

							int emptyColumnCount_tFileInputExcel_8 = 0;

							if (limit_tFileInputExcel_8 != -1 && nb_line_tFileInputExcel_8 >= limit_tFileInputExcel_8) {
								break;
							}

							while (i_tFileInputExcel_8 >= rowCount_tFileInputExcel_8 + currentRows_tFileInputExcel_8) {
								rowCount_tFileInputExcel_8 += currentRows_tFileInputExcel_8;
								sheet_tFileInputExcel_8 = sheetList_tFileInputExcel_8
										.get(++sheetIndex_tFileInputExcel_8);
								currentRows_tFileInputExcel_8 = sheet_tFileInputExcel_8.getRows();
							}
							if (rowCount_tFileInputExcel_8 <= i_tFileInputExcel_8) {
								row_tFileInputExcel_8 = sheet_tFileInputExcel_8
										.getRow(i_tFileInputExcel_8 - rowCount_tFileInputExcel_8);
							}
							globalMap.put("tFileInputExcel_8_CURRENT_SHEET", sheet_tFileInputExcel_8.getName());
							row8 = null;
							int tempRowLength_tFileInputExcel_8 = 10;

							int columnIndex_tFileInputExcel_8 = 0;

//
//end%>

							String[] temp_row_tFileInputExcel_8 = new String[tempRowLength_tFileInputExcel_8];
							int actual_end_column_tFileInputExcel_8 = end_column_tFileInputExcel_8 > row_tFileInputExcel_8.length
									? row_tFileInputExcel_8.length
									: end_column_tFileInputExcel_8;

							java.util.TimeZone zone_tFileInputExcel_8 = java.util.TimeZone.getTimeZone("GMT");
							java.text.SimpleDateFormat sdf_tFileInputExcel_8 = new java.text.SimpleDateFormat(
									"dd-MM-yyyy");
							sdf_tFileInputExcel_8.setTimeZone(zone_tFileInputExcel_8);

							for (int i = 0; i < tempRowLength_tFileInputExcel_8; i++) {

								if (i + start_column_tFileInputExcel_8 < actual_end_column_tFileInputExcel_8) {

									jxl.Cell cell_tFileInputExcel_8 = row_tFileInputExcel_8[i
											+ start_column_tFileInputExcel_8];
									temp_row_tFileInputExcel_8[i] = cell_tFileInputExcel_8.getContents();

								} else {
									temp_row_tFileInputExcel_8[i] = "";
								}
							}

							boolean whetherReject_tFileInputExcel_8 = false;
							row8 = new row8Struct();
							int curColNum_tFileInputExcel_8 = -1;
							String curColName_tFileInputExcel_8 = "";
							try {
								columnIndex_tFileInputExcel_8 = 0;

								if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8].length() > 0) {
									curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
											+ start_column_tFileInputExcel_8 + 1;
									curColName_tFileInputExcel_8 = "Num_action";
									row8.Num_action = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]);
								} else {
									row8.Num_action = null;
									emptyColumnCount_tFileInputExcel_8++;
								}
								columnIndex_tFileInputExcel_8 = 1;

								if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8].length() > 0) {
									curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
											+ start_column_tFileInputExcel_8 + 1;
									curColName_tFileInputExcel_8 = "Intitul__de_l_action";
									row8.Intitul__de_l_action = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8];
								} else {
									row8.Intitul__de_l_action = null;
									emptyColumnCount_tFileInputExcel_8++;
								}
								columnIndex_tFileInputExcel_8 = 2;

								if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8].length() > 0) {
									curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
											+ start_column_tFileInputExcel_8 + 1;
									curColName_tFileInputExcel_8 = "Date_d_but";
									row8.Date_d_but = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8];
								} else {
									row8.Date_d_but = null;
									emptyColumnCount_tFileInputExcel_8++;
								}
								columnIndex_tFileInputExcel_8 = 3;

								if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8].length() > 0) {
									curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
											+ start_column_tFileInputExcel_8 + 1;
									curColName_tFileInputExcel_8 = "Date_fin";
									row8.Date_fin = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8];
								} else {
									row8.Date_fin = null;
									emptyColumnCount_tFileInputExcel_8++;
								}
								columnIndex_tFileInputExcel_8 = 4;

								if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8].length() > 0) {
									curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
											+ start_column_tFileInputExcel_8 + 1;
									curColName_tFileInputExcel_8 = "Nb_de_participants";
									row8.Nb_de_participants = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]);
								} else {
									row8.Nb_de_participants = null;
									emptyColumnCount_tFileInputExcel_8++;
								}
								columnIndex_tFileInputExcel_8 = 5;

								if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8].length() > 0) {
									curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
											+ start_column_tFileInputExcel_8 + 1;
									curColName_tFileInputExcel_8 = "nb_de_jours";
									row8.nb_de_jours = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8];
								} else {
									row8.nb_de_jours = null;
									emptyColumnCount_tFileInputExcel_8++;
								}
								columnIndex_tFileInputExcel_8 = 6;

								if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8].length() > 0) {
									curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
											+ start_column_tFileInputExcel_8 + 1;
									curColName_tFileInputExcel_8 = "nb_d_heures";
									row8.nb_d_heures = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]);
								} else {
									row8.nb_d_heures = null;
									emptyColumnCount_tFileInputExcel_8++;
								}
								columnIndex_tFileInputExcel_8 = 7;

								if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8].length() > 0) {
									curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
											+ start_column_tFileInputExcel_8 + 1;
									curColName_tFileInputExcel_8 = "Organisme__Formateurs";
									row8.Organisme__Formateurs = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8];
								} else {
									row8.Organisme__Formateurs = null;
									emptyColumnCount_tFileInputExcel_8++;
								}
								columnIndex_tFileInputExcel_8 = 8;

								if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8].length() > 0) {
									curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
											+ start_column_tFileInputExcel_8 + 1;
									curColName_tFileInputExcel_8 = "Mode";
									row8.Mode = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8];
								} else {
									row8.Mode = null;
									emptyColumnCount_tFileInputExcel_8++;
								}
								columnIndex_tFileInputExcel_8 = 9;

								if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8].length() > 0) {
									curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
											+ start_column_tFileInputExcel_8 + 1;
									curColName_tFileInputExcel_8 = "Co_t__HT";
									row8.Co_t__HT = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]);
								} else {
									row8.Co_t__HT = null;
									emptyColumnCount_tFileInputExcel_8++;
								}

								nb_line_tFileInputExcel_8++;

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputExcel_8_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputExcel_8 = true;
								System.err.println(e.getMessage());
								row8 = null;
							}

							/**
							 * [tFileInputExcel_8 begin ] stop
							 */

							/**
							 * [tFileInputExcel_8 main ] start
							 */

							currentComponent = "tFileInputExcel_8";

							tos_count_tFileInputExcel_8++;

							/**
							 * [tFileInputExcel_8 main ] stop
							 */

							/**
							 * [tFileInputExcel_8 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_8";

							/**
							 * [tFileInputExcel_8 process_data_begin ] stop
							 */
// Start of branch "row8"
							if (row8 != null) {

								/**
								 * [tMap_9 main ] start
								 */

								currentComponent = "tMap_9";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row8"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_9 = false;
								boolean mainRowRejected_tMap_9 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
									// ###############################
									// # Output tables

									OUT9 = null;

// # Output table : 'OUT9'
									OUT9_tmp.Numero_d_action = row8.Num_action;
									OUT9_tmp.Intitule_de_l_action = row8.Intitul__de_l_action;
									OUT9 = OUT9_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_9 = false;

								tos_count_tMap_9++;

								/**
								 * [tMap_9 main ] stop
								 */

								/**
								 * [tMap_9 process_data_begin ] start
								 */

								currentComponent = "tMap_9";

								/**
								 * [tMap_9 process_data_begin ] stop
								 */
// Start of branch "OUT9"
								if (OUT9 != null) {

									/**
									 * [tUnite_1 main ] start
									 */

									currentComponent = "tUnite_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "OUT9"

										);
									}

//////////

// for output
									row12 = new row12Struct();

									row12.Numero_d_action = OUT9.Numero_d_action;
									row12.Intitule_de_l_action = OUT9.Intitule_de_l_action;

									nb_line_tUnite_1++;

//////////

									tos_count_tUnite_1++;

									/**
									 * [tUnite_1 main ] stop
									 */

									/**
									 * [tUnite_1 process_data_begin ] start
									 */

									currentComponent = "tUnite_1";

									/**
									 * [tUnite_1 process_data_begin ] stop
									 */

									/**
									 * [tMap_12 main ] start
									 */

									currentComponent = "tMap_12";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row12"

										);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_12 = false;
									boolean mainRowRejected_tMap_12 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
										// ###############################
										// # Output tables

										insert__dim_action = null;

// # Output table : 'insert__dim_action'
										insert__dim_action_tmp.Numero_d_action = row12.Numero_d_action;
										insert__dim_action_tmp.Intitule_de_l_action = row12.Intitule_de_l_action;
										insert__dim_action = insert__dim_action_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_12 = false;

									tos_count_tMap_12++;

									/**
									 * [tMap_12 main ] stop
									 */

									/**
									 * [tMap_12 process_data_begin ] start
									 */

									currentComponent = "tMap_12";

									/**
									 * [tMap_12 process_data_begin ] stop
									 */
// Start of branch "insert__dim_action"
									if (insert__dim_action != null) {

										/**
										 * [tDBOutput_2 main ] start
										 */

										currentComponent = "tDBOutput_2";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "insert__dim_action"

											);
										}

										whetherReject_tDBOutput_2 = false;
										if (insert__dim_action.Numero_d_action == null) {
											pstmt_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(1, insert__dim_action.Numero_d_action);
										}

										if (insert__dim_action.Intitule_de_l_action == null) {
											pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2.setString(2, insert__dim_action.Intitule_de_l_action);
										}

										pstmt_tDBOutput_2.addBatch();
										nb_line_tDBOutput_2++;

										batchSizeCounter_tDBOutput_2++;

										if ((batchSize_tDBOutput_2 > 0)
												&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
											try {
												int countSum_tDBOutput_2 = 0;

												for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}
												rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												batchSizeCounter_tDBOutput_2 = 0;
											} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
												globalMap.put("tDBOutput_2_ERROR_MESSAGE", e_tDBOutput_2.getMessage());
												java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
														sqle_tDBOutput_2 = null;
												String errormessage_tDBOutput_2;
												if (ne_tDBOutput_2 != null) {
													// build new exception to provide the original cause
													sqle_tDBOutput_2 = new java.sql.SQLException(
															e_tDBOutput_2.getMessage() + "\ncaused by: "
																	+ ne_tDBOutput_2.getMessage(),
															ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
															ne_tDBOutput_2);
													errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
												} else {
													errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
												}

												int countSum_tDBOutput_2 = 0;
												for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}
												rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												System.err.println(errormessage_tDBOutput_2);

											}
										}

										commitCounter_tDBOutput_2++;
										if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
											if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
												try {
													int countSum_tDBOutput_2 = 0;

													for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}
													rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

													batchSizeCounter_tDBOutput_2 = 0;
												} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
													globalMap.put("tDBOutput_2_ERROR_MESSAGE",
															e_tDBOutput_2.getMessage());
													java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
															.getNextException(), sqle_tDBOutput_2 = null;
													String errormessage_tDBOutput_2;
													if (ne_tDBOutput_2 != null) {
														// build new exception to provide the original cause
														sqle_tDBOutput_2 = new java.sql.SQLException(
																e_tDBOutput_2.getMessage() + "\ncaused by: "
																		+ ne_tDBOutput_2.getMessage(),
																ne_tDBOutput_2.getSQLState(),
																ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
														errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
													} else {
														errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
													}

													int countSum_tDBOutput_2 = 0;
													for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}
													rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

													System.err.println(errormessage_tDBOutput_2);

												}
											}
											if (rowsToCommitCount_tDBOutput_2 != 0) {

											}
											conn_tDBOutput_2.commit();
											if (rowsToCommitCount_tDBOutput_2 != 0) {

												rowsToCommitCount_tDBOutput_2 = 0;
											}
											commitCounter_tDBOutput_2 = 0;
										}

										tos_count_tDBOutput_2++;

										/**
										 * [tDBOutput_2 main ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_end ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_end ] stop
										 */

									} // End of branch "insert__dim_action"

									/**
									 * [tMap_12 process_data_end ] start
									 */

									currentComponent = "tMap_12";

									/**
									 * [tMap_12 process_data_end ] stop
									 */

									/**
									 * [tUnite_1 process_data_end ] start
									 */

									currentComponent = "tUnite_1";

									/**
									 * [tUnite_1 process_data_end ] stop
									 */

								} // End of branch "OUT9"

								/**
								 * [tMap_9 process_data_end ] start
								 */

								currentComponent = "tMap_9";

								/**
								 * [tMap_9 process_data_end ] stop
								 */

							} // End of branch "row8"

							/**
							 * [tFileInputExcel_8 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_8";

							/**
							 * [tFileInputExcel_8 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_8 end ] start
							 */

							currentComponent = "tFileInputExcel_8";

						}

						globalMap.put("tFileInputExcel_8_NB_LINE", nb_line_tFileInputExcel_8);

					}

				} finally {

					if (!(source_tFileInputExcel_8 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_8.close();
					}

				}

				ok_Hash.put("tFileInputExcel_8", true);
				end_Hash.put("tFileInputExcel_8", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_8 end ] stop
				 */

				/**
				 * [tMap_9 end ] start
				 */

				currentComponent = "tMap_9";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tMap_9", true);
				end_Hash.put("tMap_9", System.currentTimeMillis());

				/**
				 * [tMap_9 end ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5_0");
				}

				int tos_count_tMap_5 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
				OUT10Struct OUT10_tmp = new OUT10Struct();
// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tFileInputExcel_9 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_9", false);
				start_Hash.put("tFileInputExcel_9", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_9";

				int tos_count_tFileInputExcel_9 = 0;

				class RegexUtil_tFileInputExcel_9 {

					public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();

						if (useRegex) {// this part process the regex issue

							jxl.Sheet[] sheets = workbook.getSheets();
							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (int i = 0; i < sheets.length; i++) {
								String sheetName = sheets[i].getName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									jxl.Sheet sheet = workbook.getSheet(sheetName);
									if (sheet != null) {
										list.add(sheet);
									}
								}
							}

						} else {
							jxl.Sheet sheet = workbook.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, int index, boolean useRegex) {
						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();
						jxl.Sheet sheet = workbook.getSheet(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}

				RegexUtil_tFileInputExcel_9 regexUtil_tFileInputExcel_9 = new RegexUtil_tFileInputExcel_9();
				final jxl.WorkbookSettings workbookSettings_tFileInputExcel_9 = new jxl.WorkbookSettings();
				workbookSettings_tFileInputExcel_9.setDrawingsDisabled(true);
				workbookSettings_tFileInputExcel_9.setEncoding("UTF-8");

				Object source_tFileInputExcel_9 = "C:/Users/balkis/Desktop/RH/Réalisations 2020.xls";
				final jxl.Workbook workbook_tFileInputExcel_9;

				java.io.InputStream toClose_tFileInputExcel_9 = null;
				java.io.BufferedInputStream buffIStreamtFileInputExcel_9 = null;
				try {
					if (source_tFileInputExcel_9 instanceof java.io.InputStream) {
						toClose_tFileInputExcel_9 = (java.io.InputStream) source_tFileInputExcel_9;
						buffIStreamtFileInputExcel_9 = new java.io.BufferedInputStream(toClose_tFileInputExcel_9);
						workbook_tFileInputExcel_9 = jxl.Workbook.getWorkbook(buffIStreamtFileInputExcel_9,
								workbookSettings_tFileInputExcel_9);
					} else if (source_tFileInputExcel_9 instanceof String) {
						toClose_tFileInputExcel_9 = new java.io.FileInputStream(source_tFileInputExcel_9.toString());
						buffIStreamtFileInputExcel_9 = new java.io.BufferedInputStream(toClose_tFileInputExcel_9);
						workbook_tFileInputExcel_9 = jxl.Workbook.getWorkbook(buffIStreamtFileInputExcel_9,
								workbookSettings_tFileInputExcel_9);
					} else {
						workbook_tFileInputExcel_9 = null;
						throw new java.lang.Exception(
								"The data source should be specified as Inputstream or File Path!");
					}
				} finally {
					try {
						if (buffIStreamtFileInputExcel_9 != null) {
							buffIStreamtFileInputExcel_9.close();
						}
					} catch (Exception e) {
						globalMap.put("tFileInputExcel_9_ERROR_MESSAGE", e.getMessage());
					}
				}
				try {
					java.util.List<jxl.Sheet> sheetList_tFileInputExcel_9 = new java.util.ArrayList<jxl.Sheet>();
					sheetList_tFileInputExcel_9.addAll(regexUtil_tFileInputExcel_9.getSheets(workbook_tFileInputExcel_9,
							"Plan Actions 2020", false));
					if (sheetList_tFileInputExcel_9.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<jxl.Sheet> sheet_FilterNullList_tFileInputExcel_9 = new java.util.ArrayList<jxl.Sheet>();
					for (jxl.Sheet sheet_FilterNull_tFileInputExcel_9 : sheetList_tFileInputExcel_9) {
						if (sheet_FilterNull_tFileInputExcel_9.getRows() > 0) {
							sheet_FilterNullList_tFileInputExcel_9.add(sheet_FilterNull_tFileInputExcel_9);
						}
					}
					sheetList_tFileInputExcel_9 = sheet_FilterNullList_tFileInputExcel_9;
					if (sheetList_tFileInputExcel_9.size() > 0) {
						int nb_line_tFileInputExcel_9 = 0;

						int begin_line_tFileInputExcel_9 = 2;

						int footer_input_tFileInputExcel_9 = 0;

						int end_line_tFileInputExcel_9 = 0;
						for (jxl.Sheet sheet_tFileInputExcel_9 : sheetList_tFileInputExcel_9) {
							end_line_tFileInputExcel_9 += sheet_tFileInputExcel_9.getRows();
						}
						end_line_tFileInputExcel_9 -= footer_input_tFileInputExcel_9;
						int limit_tFileInputExcel_9 = -1;
						int start_column_tFileInputExcel_9 = 1 - 1;
						int end_column_tFileInputExcel_9 = sheetList_tFileInputExcel_9.get(0).getColumns();
						jxl.Cell[] row_tFileInputExcel_9 = null;
						jxl.Sheet sheet_tFileInputExcel_9 = sheetList_tFileInputExcel_9.get(0);
						int rowCount_tFileInputExcel_9 = 0;
						int sheetIndex_tFileInputExcel_9 = 0;
						int currentRows_tFileInputExcel_9 = sheetList_tFileInputExcel_9.get(0).getRows();

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_9 = new java.text.DecimalFormat(
								"#.####################################");
						char separatorChar_tFileInputExcel_9 = df_tFileInputExcel_9.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_9 = begin_line_tFileInputExcel_9; i_tFileInputExcel_9 < end_line_tFileInputExcel_9; i_tFileInputExcel_9++) {

							int emptyColumnCount_tFileInputExcel_9 = 0;

							if (limit_tFileInputExcel_9 != -1 && nb_line_tFileInputExcel_9 >= limit_tFileInputExcel_9) {
								break;
							}

							while (i_tFileInputExcel_9 >= rowCount_tFileInputExcel_9 + currentRows_tFileInputExcel_9) {
								rowCount_tFileInputExcel_9 += currentRows_tFileInputExcel_9;
								sheet_tFileInputExcel_9 = sheetList_tFileInputExcel_9
										.get(++sheetIndex_tFileInputExcel_9);
								currentRows_tFileInputExcel_9 = sheet_tFileInputExcel_9.getRows();
							}
							if (rowCount_tFileInputExcel_9 <= i_tFileInputExcel_9) {
								row_tFileInputExcel_9 = sheet_tFileInputExcel_9
										.getRow(i_tFileInputExcel_9 - rowCount_tFileInputExcel_9);
							}
							globalMap.put("tFileInputExcel_9_CURRENT_SHEET", sheet_tFileInputExcel_9.getName());
							row5_0 = null;
							int tempRowLength_tFileInputExcel_9 = 12;

							int columnIndex_tFileInputExcel_9 = 0;

//
//end%>

							String[] temp_row_tFileInputExcel_9 = new String[tempRowLength_tFileInputExcel_9];
							int actual_end_column_tFileInputExcel_9 = end_column_tFileInputExcel_9 > row_tFileInputExcel_9.length
									? row_tFileInputExcel_9.length
									: end_column_tFileInputExcel_9;

							java.util.TimeZone zone_tFileInputExcel_9 = java.util.TimeZone.getTimeZone("GMT");
							java.text.SimpleDateFormat sdf_tFileInputExcel_9 = new java.text.SimpleDateFormat(
									"dd-MM-yyyy");
							sdf_tFileInputExcel_9.setTimeZone(zone_tFileInputExcel_9);

							for (int i = 0; i < tempRowLength_tFileInputExcel_9; i++) {

								if (i + start_column_tFileInputExcel_9 < actual_end_column_tFileInputExcel_9) {

									jxl.Cell cell_tFileInputExcel_9 = row_tFileInputExcel_9[i
											+ start_column_tFileInputExcel_9];
									temp_row_tFileInputExcel_9[i] = cell_tFileInputExcel_9.getContents();

								} else {
									temp_row_tFileInputExcel_9[i] = "";
								}
							}

							boolean whetherReject_tFileInputExcel_9 = false;
							row5_0 = new row5_0Struct();
							int curColNum_tFileInputExcel_9 = -1;
							String curColName_tFileInputExcel_9 = "";
							try {
								columnIndex_tFileInputExcel_9 = 0;

								if (temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9].length() > 0) {
									curColNum_tFileInputExcel_9 = columnIndex_tFileInputExcel_9
											+ start_column_tFileInputExcel_9 + 1;
									curColName_tFileInputExcel_9 = "Num_action";
									row5_0.Num_action = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9]);
								} else {
									row5_0.Num_action = null;
									emptyColumnCount_tFileInputExcel_9++;
								}
								columnIndex_tFileInputExcel_9 = 1;

								if (temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9].length() > 0) {
									curColNum_tFileInputExcel_9 = columnIndex_tFileInputExcel_9
											+ start_column_tFileInputExcel_9 + 1;
									curColName_tFileInputExcel_9 = "Intitul__de_l_action";
									row5_0.Intitul__de_l_action = temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9];
								} else {
									row5_0.Intitul__de_l_action = null;
									emptyColumnCount_tFileInputExcel_9++;
								}
								columnIndex_tFileInputExcel_9 = 2;

								if (temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9].length() > 0) {
									curColNum_tFileInputExcel_9 = columnIndex_tFileInputExcel_9
											+ start_column_tFileInputExcel_9 + 1;
									curColName_tFileInputExcel_9 = "Date_d_but";
									row5_0.Date_d_but = temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9];
								} else {
									row5_0.Date_d_but = null;
									emptyColumnCount_tFileInputExcel_9++;
								}
								columnIndex_tFileInputExcel_9 = 3;

								if (temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9].length() > 0) {
									curColNum_tFileInputExcel_9 = columnIndex_tFileInputExcel_9
											+ start_column_tFileInputExcel_9 + 1;
									curColName_tFileInputExcel_9 = "Date_fin";
									row5_0.Date_fin = temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9];
								} else {
									row5_0.Date_fin = null;
									emptyColumnCount_tFileInputExcel_9++;
								}
								columnIndex_tFileInputExcel_9 = 4;

								if (temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9].length() > 0) {
									curColNum_tFileInputExcel_9 = columnIndex_tFileInputExcel_9
											+ start_column_tFileInputExcel_9 + 1;
									curColName_tFileInputExcel_9 = "Nb_de_participants";
									row5_0.Nb_de_participants = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9]);
								} else {
									row5_0.Nb_de_participants = null;
									emptyColumnCount_tFileInputExcel_9++;
								}
								columnIndex_tFileInputExcel_9 = 5;

								if (temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9].length() > 0) {
									curColNum_tFileInputExcel_9 = columnIndex_tFileInputExcel_9
											+ start_column_tFileInputExcel_9 + 1;
									curColName_tFileInputExcel_9 = "nb_de_jours";
									row5_0.nb_de_jours = temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9];
								} else {
									row5_0.nb_de_jours = null;
									emptyColumnCount_tFileInputExcel_9++;
								}
								columnIndex_tFileInputExcel_9 = 6;

								if (temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9].length() > 0) {
									curColNum_tFileInputExcel_9 = columnIndex_tFileInputExcel_9
											+ start_column_tFileInputExcel_9 + 1;
									curColName_tFileInputExcel_9 = "nb_jours_total";
									row5_0.nb_jours_total = temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9];
								} else {
									row5_0.nb_jours_total = null;
									emptyColumnCount_tFileInputExcel_9++;
								}
								columnIndex_tFileInputExcel_9 = 7;

								if (temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9].length() > 0) {
									curColNum_tFileInputExcel_9 = columnIndex_tFileInputExcel_9
											+ start_column_tFileInputExcel_9 + 1;
									curColName_tFileInputExcel_9 = "nb_d_heures";
									row5_0.nb_d_heures = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9]);
								} else {
									row5_0.nb_d_heures = null;
									emptyColumnCount_tFileInputExcel_9++;
								}
								columnIndex_tFileInputExcel_9 = 8;

								if (temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9].length() > 0) {
									curColNum_tFileInputExcel_9 = columnIndex_tFileInputExcel_9
											+ start_column_tFileInputExcel_9 + 1;
									curColName_tFileInputExcel_9 = "nb_d_heures_total";
									row5_0.nb_d_heures_total = ParserUtils
											.parseTo_Integer(temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9]);
								} else {
									row5_0.nb_d_heures_total = null;
									emptyColumnCount_tFileInputExcel_9++;
								}
								columnIndex_tFileInputExcel_9 = 9;

								if (temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9].length() > 0) {
									curColNum_tFileInputExcel_9 = columnIndex_tFileInputExcel_9
											+ start_column_tFileInputExcel_9 + 1;
									curColName_tFileInputExcel_9 = "Organisme__Formateurs";
									row5_0.Organisme__Formateurs = temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9];
								} else {
									row5_0.Organisme__Formateurs = null;
									emptyColumnCount_tFileInputExcel_9++;
								}
								columnIndex_tFileInputExcel_9 = 10;

								if (temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9].length() > 0) {
									curColNum_tFileInputExcel_9 = columnIndex_tFileInputExcel_9
											+ start_column_tFileInputExcel_9 + 1;
									curColName_tFileInputExcel_9 = "Mode";
									row5_0.Mode = temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9];
								} else {
									row5_0.Mode = null;
									emptyColumnCount_tFileInputExcel_9++;
								}
								columnIndex_tFileInputExcel_9 = 11;

								if (temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9].length() > 0) {
									curColNum_tFileInputExcel_9 = columnIndex_tFileInputExcel_9
											+ start_column_tFileInputExcel_9 + 1;
									curColName_tFileInputExcel_9 = "Co_t__HT";
									row5_0.Co_t__HT = temp_row_tFileInputExcel_9[columnIndex_tFileInputExcel_9];
								} else {
									row5_0.Co_t__HT = null;
									emptyColumnCount_tFileInputExcel_9++;
								}

								nb_line_tFileInputExcel_9++;

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputExcel_9_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputExcel_9 = true;
								System.err.println(e.getMessage());
								row5_0 = null;
							}

							/**
							 * [tFileInputExcel_9 begin ] stop
							 */

							/**
							 * [tFileInputExcel_9 main ] start
							 */

							currentComponent = "tFileInputExcel_9";

							tos_count_tFileInputExcel_9++;

							/**
							 * [tFileInputExcel_9 main ] stop
							 */

							/**
							 * [tFileInputExcel_9 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_9";

							/**
							 * [tFileInputExcel_9 process_data_begin ] stop
							 */
// Start of branch "row5_0"
							if (row5_0 != null) {

								/**
								 * [tMap_5 main ] start
								 */

								currentComponent = "tMap_5";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row5_0"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_5 = false;
								boolean mainRowRejected_tMap_5 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
									// ###############################
									// # Output tables

									OUT10 = null;

// # Output table : 'OUT10'
									OUT10_tmp.Numero_d_action = row5_0.Num_action;
									OUT10_tmp.Intitule_de_l_action = row5_0.Intitul__de_l_action;
									OUT10 = OUT10_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_5 = false;

								tos_count_tMap_5++;

								/**
								 * [tMap_5 main ] stop
								 */

								/**
								 * [tMap_5 process_data_begin ] start
								 */

								currentComponent = "tMap_5";

								/**
								 * [tMap_5 process_data_begin ] stop
								 */
// Start of branch "OUT10"
								if (OUT10 != null) {

									/**
									 * [tUnite_1 main ] start
									 */

									currentComponent = "tUnite_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "OUT10"

										);
									}

//////////

// for output
									row12 = new row12Struct();

									row12.Numero_d_action = OUT10.Numero_d_action;
									row12.Intitule_de_l_action = OUT10.Intitule_de_l_action;

									nb_line_tUnite_1++;

//////////

									tos_count_tUnite_1++;

									/**
									 * [tUnite_1 main ] stop
									 */

									/**
									 * [tUnite_1 process_data_begin ] start
									 */

									currentComponent = "tUnite_1";

									/**
									 * [tUnite_1 process_data_begin ] stop
									 */

									/**
									 * [tMap_12 main ] start
									 */

									currentComponent = "tMap_12";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row12"

										);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_12 = false;
									boolean mainRowRejected_tMap_12 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
										// ###############################
										// # Output tables

										insert__dim_action = null;

// # Output table : 'insert__dim_action'
										insert__dim_action_tmp.Numero_d_action = row12.Numero_d_action;
										insert__dim_action_tmp.Intitule_de_l_action = row12.Intitule_de_l_action;
										insert__dim_action = insert__dim_action_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_12 = false;

									tos_count_tMap_12++;

									/**
									 * [tMap_12 main ] stop
									 */

									/**
									 * [tMap_12 process_data_begin ] start
									 */

									currentComponent = "tMap_12";

									/**
									 * [tMap_12 process_data_begin ] stop
									 */
// Start of branch "insert__dim_action"
									if (insert__dim_action != null) {

										/**
										 * [tDBOutput_2 main ] start
										 */

										currentComponent = "tDBOutput_2";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "insert__dim_action"

											);
										}

										whetherReject_tDBOutput_2 = false;
										if (insert__dim_action.Numero_d_action == null) {
											pstmt_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(1, insert__dim_action.Numero_d_action);
										}

										if (insert__dim_action.Intitule_de_l_action == null) {
											pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2.setString(2, insert__dim_action.Intitule_de_l_action);
										}

										pstmt_tDBOutput_2.addBatch();
										nb_line_tDBOutput_2++;

										batchSizeCounter_tDBOutput_2++;

										if ((batchSize_tDBOutput_2 > 0)
												&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
											try {
												int countSum_tDBOutput_2 = 0;

												for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}
												rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												batchSizeCounter_tDBOutput_2 = 0;
											} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
												globalMap.put("tDBOutput_2_ERROR_MESSAGE", e_tDBOutput_2.getMessage());
												java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
														sqle_tDBOutput_2 = null;
												String errormessage_tDBOutput_2;
												if (ne_tDBOutput_2 != null) {
													// build new exception to provide the original cause
													sqle_tDBOutput_2 = new java.sql.SQLException(
															e_tDBOutput_2.getMessage() + "\ncaused by: "
																	+ ne_tDBOutput_2.getMessage(),
															ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
															ne_tDBOutput_2);
													errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
												} else {
													errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
												}

												int countSum_tDBOutput_2 = 0;
												for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}
												rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												System.err.println(errormessage_tDBOutput_2);

											}
										}

										commitCounter_tDBOutput_2++;
										if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
											if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
												try {
													int countSum_tDBOutput_2 = 0;

													for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}
													rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

													batchSizeCounter_tDBOutput_2 = 0;
												} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
													globalMap.put("tDBOutput_2_ERROR_MESSAGE",
															e_tDBOutput_2.getMessage());
													java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
															.getNextException(), sqle_tDBOutput_2 = null;
													String errormessage_tDBOutput_2;
													if (ne_tDBOutput_2 != null) {
														// build new exception to provide the original cause
														sqle_tDBOutput_2 = new java.sql.SQLException(
																e_tDBOutput_2.getMessage() + "\ncaused by: "
																		+ ne_tDBOutput_2.getMessage(),
																ne_tDBOutput_2.getSQLState(),
																ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
														errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
													} else {
														errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
													}

													int countSum_tDBOutput_2 = 0;
													for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}
													rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

													System.err.println(errormessage_tDBOutput_2);

												}
											}
											if (rowsToCommitCount_tDBOutput_2 != 0) {

											}
											conn_tDBOutput_2.commit();
											if (rowsToCommitCount_tDBOutput_2 != 0) {

												rowsToCommitCount_tDBOutput_2 = 0;
											}
											commitCounter_tDBOutput_2 = 0;
										}

										tos_count_tDBOutput_2++;

										/**
										 * [tDBOutput_2 main ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_end ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_end ] stop
										 */

									} // End of branch "insert__dim_action"

									/**
									 * [tMap_12 process_data_end ] start
									 */

									currentComponent = "tMap_12";

									/**
									 * [tMap_12 process_data_end ] stop
									 */

									/**
									 * [tUnite_1 process_data_end ] start
									 */

									currentComponent = "tUnite_1";

									/**
									 * [tUnite_1 process_data_end ] stop
									 */

								} // End of branch "OUT10"

								/**
								 * [tMap_5 process_data_end ] start
								 */

								currentComponent = "tMap_5";

								/**
								 * [tMap_5 process_data_end ] stop
								 */

							} // End of branch "row5_0"

							/**
							 * [tFileInputExcel_9 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_9";

							/**
							 * [tFileInputExcel_9 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_9 end ] start
							 */

							currentComponent = "tFileInputExcel_9";

						}

						globalMap.put("tFileInputExcel_9_NB_LINE", nb_line_tFileInputExcel_9);

					}

				} finally {

					if (!(source_tFileInputExcel_9 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_9.close();
					}

				}

				ok_Hash.put("tFileInputExcel_9", true);
				end_Hash.put("tFileInputExcel_9", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_9 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5_0");
				}

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tMap_10 begin ] start
				 */

				ok_Hash.put("tMap_10", false);
				start_Hash.put("tMap_10", System.currentTimeMillis());

				currentComponent = "tMap_10";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6_0");
				}

				int tos_count_tMap_10 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_10__Struct {
				}
				Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
				OUT11Struct OUT11_tmp = new OUT11Struct();
// ###############################

				/**
				 * [tMap_10 begin ] stop
				 */

				/**
				 * [tFileInputExcel_10 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_10", false);
				start_Hash.put("tFileInputExcel_10", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_10";

				int tos_count_tFileInputExcel_10 = 0;

				final String decryptedPassword_tFileInputExcel_10 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:wUm27LNY8fz+7ttcNyAxhpi9SKCN4XwmXwa54g==");
				String password_tFileInputExcel_10 = decryptedPassword_tFileInputExcel_10;
				if (password_tFileInputExcel_10.isEmpty()) {
					password_tFileInputExcel_10 = null;
				}
				class RegexUtil_tFileInputExcel_10 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_10 regexUtil_tFileInputExcel_10 = new RegexUtil_tFileInputExcel_10();

				Object source_tFileInputExcel_10 = "C:/Users/balkis/Desktop/RH/Formation 2021.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_10 = null;

				if (source_tFileInputExcel_10 instanceof String) {
					workbook_tFileInputExcel_10 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_10), password_tFileInputExcel_10,
									true);
				} else if (source_tFileInputExcel_10 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_10 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_10, password_tFileInputExcel_10);
				} else {
					workbook_tFileInputExcel_10 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_10 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					sheetList_tFileInputExcel_10.addAll(regexUtil_tFileInputExcel_10
							.getSheets(workbook_tFileInputExcel_10, "Plan d'action", false));
					if (sheetList_tFileInputExcel_10.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_10 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_10 : sheetList_tFileInputExcel_10) {
						if (sheet_FilterNull_tFileInputExcel_10 != null
								&& sheetList_FilterNull_tFileInputExcel_10.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_10.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_10.add(sheet_FilterNull_tFileInputExcel_10);
						}
					}
					sheetList_tFileInputExcel_10 = sheetList_FilterNull_tFileInputExcel_10;
					if (sheetList_tFileInputExcel_10.size() > 0) {
						int nb_line_tFileInputExcel_10 = 0;

						int begin_line_tFileInputExcel_10 = 1;

						int footer_input_tFileInputExcel_10 = 0;

						int end_line_tFileInputExcel_10 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_10 : sheetList_tFileInputExcel_10) {
							end_line_tFileInputExcel_10 += (sheet_tFileInputExcel_10.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_10 -= footer_input_tFileInputExcel_10;
						int limit_tFileInputExcel_10 = -1;
						int start_column_tFileInputExcel_10 = 1 - 1;
						int end_column_tFileInputExcel_10 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_10 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_10 = sheetList_tFileInputExcel_10
								.get(0);
						int rowCount_tFileInputExcel_10 = 0;
						int sheetIndex_tFileInputExcel_10 = 0;
						int currentRows_tFileInputExcel_10 = (sheetList_tFileInputExcel_10.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_10 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_10 = df_tFileInputExcel_10.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_10 = begin_line_tFileInputExcel_10; i_tFileInputExcel_10 < end_line_tFileInputExcel_10; i_tFileInputExcel_10++) {

							int emptyColumnCount_tFileInputExcel_10 = 0;

							if (limit_tFileInputExcel_10 != -1
									&& nb_line_tFileInputExcel_10 >= limit_tFileInputExcel_10) {
								break;
							}

							while (i_tFileInputExcel_10 >= rowCount_tFileInputExcel_10
									+ currentRows_tFileInputExcel_10) {
								rowCount_tFileInputExcel_10 += currentRows_tFileInputExcel_10;
								sheet_tFileInputExcel_10 = sheetList_tFileInputExcel_10
										.get(++sheetIndex_tFileInputExcel_10);
								currentRows_tFileInputExcel_10 = (sheet_tFileInputExcel_10.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_10_CURRENT_SHEET", sheet_tFileInputExcel_10.getSheetName());
							if (rowCount_tFileInputExcel_10 <= i_tFileInputExcel_10) {
								row_tFileInputExcel_10 = sheet_tFileInputExcel_10
										.getRow(i_tFileInputExcel_10 - rowCount_tFileInputExcel_10);
							}
							row6_0 = null;
							int tempRowLength_tFileInputExcel_10 = 12;

							int columnIndex_tFileInputExcel_10 = 0;

							String[] temp_row_tFileInputExcel_10 = new String[tempRowLength_tFileInputExcel_10];
							int excel_end_column_tFileInputExcel_10;
							if (row_tFileInputExcel_10 == null) {
								excel_end_column_tFileInputExcel_10 = 0;
							} else {
								excel_end_column_tFileInputExcel_10 = row_tFileInputExcel_10.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_10;
							if (end_column_tFileInputExcel_10 == -1) {
								actual_end_column_tFileInputExcel_10 = excel_end_column_tFileInputExcel_10;
							} else {
								actual_end_column_tFileInputExcel_10 = end_column_tFileInputExcel_10 > excel_end_column_tFileInputExcel_10
										? excel_end_column_tFileInputExcel_10
										: end_column_tFileInputExcel_10;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_10 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_10; i++) {
								if (i + start_column_tFileInputExcel_10 < actual_end_column_tFileInputExcel_10) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_10 = row_tFileInputExcel_10
											.getCell(i + start_column_tFileInputExcel_10);
									if (cell_tFileInputExcel_10 != null) {
										switch (cell_tFileInputExcel_10.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_10[i] = cell_tFileInputExcel_10
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_10)) {
												temp_row_tFileInputExcel_10[i] = cell_tFileInputExcel_10
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_10[i] = df_tFileInputExcel_10
														.format(cell_tFileInputExcel_10.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_10[i] = String
													.valueOf(cell_tFileInputExcel_10.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_10.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_10[i] = cell_tFileInputExcel_10
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_10)) {
													temp_row_tFileInputExcel_10[i] = cell_tFileInputExcel_10
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_10 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_10.getNumericCellValue());
													temp_row_tFileInputExcel_10[i] = ne_tFileInputExcel_10
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_10[i] = String
														.valueOf(cell_tFileInputExcel_10.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_10[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_10[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_10[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_10[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_10 = false;
							row6_0 = new row6_0Struct();
							int curColNum_tFileInputExcel_10 = -1;
							String curColName_tFileInputExcel_10 = "";
							try {
								columnIndex_tFileInputExcel_10 = 0;

								if (temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
									curColNum_tFileInputExcel_10 = columnIndex_tFileInputExcel_10
											+ start_column_tFileInputExcel_10 + 1;
									curColName_tFileInputExcel_10 = "Num_action";

									row6_0.Num_action = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10], null,
											'.' == decimalChar_tFileInputExcel_10 ? null
													: decimalChar_tFileInputExcel_10));
								} else {
									row6_0.Num_action = null;
									emptyColumnCount_tFileInputExcel_10++;
								}
								columnIndex_tFileInputExcel_10 = 1;

								if (temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
									curColNum_tFileInputExcel_10 = columnIndex_tFileInputExcel_10
											+ start_column_tFileInputExcel_10 + 1;
									curColName_tFileInputExcel_10 = "Intitule_de_l_action";

									row6_0.Intitule_de_l_action = temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10];
								} else {
									row6_0.Intitule_de_l_action = null;
									emptyColumnCount_tFileInputExcel_10++;
								}
								columnIndex_tFileInputExcel_10 = 2;

								if (temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
									curColNum_tFileInputExcel_10 = columnIndex_tFileInputExcel_10
											+ start_column_tFileInputExcel_10 + 1;
									curColName_tFileInputExcel_10 = "Date_debut";

									row6_0.Date_debut = temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10];
								} else {
									row6_0.Date_debut = null;
									emptyColumnCount_tFileInputExcel_10++;
								}
								columnIndex_tFileInputExcel_10 = 3;

								if (temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
									curColNum_tFileInputExcel_10 = columnIndex_tFileInputExcel_10
											+ start_column_tFileInputExcel_10 + 1;
									curColName_tFileInputExcel_10 = "Date_fin";

									row6_0.Date_fin = temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10];
								} else {
									row6_0.Date_fin = null;
									emptyColumnCount_tFileInputExcel_10++;
								}
								columnIndex_tFileInputExcel_10 = 4;

								if (temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
									curColNum_tFileInputExcel_10 = columnIndex_tFileInputExcel_10
											+ start_column_tFileInputExcel_10 + 1;
									curColName_tFileInputExcel_10 = "Nb_de_participants";

									row6_0.Nb_de_participants = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10], null,
											'.' == decimalChar_tFileInputExcel_10 ? null
													: decimalChar_tFileInputExcel_10));
								} else {
									row6_0.Nb_de_participants = null;
									emptyColumnCount_tFileInputExcel_10++;
								}
								columnIndex_tFileInputExcel_10 = 5;

								if (temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
									curColNum_tFileInputExcel_10 = columnIndex_tFileInputExcel_10
											+ start_column_tFileInputExcel_10 + 1;
									curColName_tFileInputExcel_10 = "nb_de_jours";

									row6_0.nb_de_jours = ParserUtils.parseTo_BigDecimal(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10], null,
											'.' == decimalChar_tFileInputExcel_10 ? null
													: decimalChar_tFileInputExcel_10));
								} else {
									row6_0.nb_de_jours = null;
									emptyColumnCount_tFileInputExcel_10++;
								}
								columnIndex_tFileInputExcel_10 = 6;

								if (temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
									curColNum_tFileInputExcel_10 = columnIndex_tFileInputExcel_10
											+ start_column_tFileInputExcel_10 + 1;
									curColName_tFileInputExcel_10 = "nb_jours_total";

									row6_0.nb_jours_total = ParserUtils.parseTo_BigDecimal(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10], null,
											'.' == decimalChar_tFileInputExcel_10 ? null
													: decimalChar_tFileInputExcel_10));
								} else {
									row6_0.nb_jours_total = null;
									emptyColumnCount_tFileInputExcel_10++;
								}
								columnIndex_tFileInputExcel_10 = 7;

								if (temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
									curColNum_tFileInputExcel_10 = columnIndex_tFileInputExcel_10
											+ start_column_tFileInputExcel_10 + 1;
									curColName_tFileInputExcel_10 = "nb_d_heures";

									row6_0.nb_d_heures = ParserUtils.parseTo_BigDecimal(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10], null,
											'.' == decimalChar_tFileInputExcel_10 ? null
													: decimalChar_tFileInputExcel_10));
								} else {
									row6_0.nb_d_heures = null;
									emptyColumnCount_tFileInputExcel_10++;
								}
								columnIndex_tFileInputExcel_10 = 8;

								if (temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
									curColNum_tFileInputExcel_10 = columnIndex_tFileInputExcel_10
											+ start_column_tFileInputExcel_10 + 1;
									curColName_tFileInputExcel_10 = "nb_d_heures_total";

									row6_0.nb_d_heures_total = ParserUtils.parseTo_BigDecimal(ParserUtils
											.parseTo_Number(temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10],
													null, '.' == decimalChar_tFileInputExcel_10 ? null
															: decimalChar_tFileInputExcel_10));
								} else {
									row6_0.nb_d_heures_total = null;
									emptyColumnCount_tFileInputExcel_10++;
								}
								columnIndex_tFileInputExcel_10 = 9;

								if (temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
									curColNum_tFileInputExcel_10 = columnIndex_tFileInputExcel_10
											+ start_column_tFileInputExcel_10 + 1;
									curColName_tFileInputExcel_10 = "Organisme__Formateurs";

									row6_0.Organisme__Formateurs = temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10];
								} else {
									row6_0.Organisme__Formateurs = null;
									emptyColumnCount_tFileInputExcel_10++;
								}
								columnIndex_tFileInputExcel_10 = 10;

								if (temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
									curColNum_tFileInputExcel_10 = columnIndex_tFileInputExcel_10
											+ start_column_tFileInputExcel_10 + 1;
									curColName_tFileInputExcel_10 = "Mode";

									row6_0.Mode = temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10];
								} else {
									row6_0.Mode = null;
									emptyColumnCount_tFileInputExcel_10++;
								}
								columnIndex_tFileInputExcel_10 = 11;

								if (temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
									curColNum_tFileInputExcel_10 = columnIndex_tFileInputExcel_10
											+ start_column_tFileInputExcel_10 + 1;
									curColName_tFileInputExcel_10 = "Cout__HT";

									row6_0.Cout__HT = temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10];
								} else {
									row6_0.Cout__HT = null;
									emptyColumnCount_tFileInputExcel_10++;
								}

								nb_line_tFileInputExcel_10++;

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputExcel_10_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputExcel_10 = true;
								System.err.println(e.getMessage());
								row6_0 = null;
							}

							/**
							 * [tFileInputExcel_10 begin ] stop
							 */

							/**
							 * [tFileInputExcel_10 main ] start
							 */

							currentComponent = "tFileInputExcel_10";

							tos_count_tFileInputExcel_10++;

							/**
							 * [tFileInputExcel_10 main ] stop
							 */

							/**
							 * [tFileInputExcel_10 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_10";

							/**
							 * [tFileInputExcel_10 process_data_begin ] stop
							 */
// Start of branch "row6_0"
							if (row6_0 != null) {

								/**
								 * [tMap_10 main ] start
								 */

								currentComponent = "tMap_10";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row6_0"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_10 = false;
								boolean mainRowRejected_tMap_10 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
									// ###############################
									// # Output tables

									OUT11 = null;

// # Output table : 'OUT11'
									OUT11_tmp.Numero_d_action = row6_0.Num_action;
									OUT11_tmp.Intitule_de_l_action = row6_0.Intitule_de_l_action;
									OUT11 = OUT11_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_10 = false;

								tos_count_tMap_10++;

								/**
								 * [tMap_10 main ] stop
								 */

								/**
								 * [tMap_10 process_data_begin ] start
								 */

								currentComponent = "tMap_10";

								/**
								 * [tMap_10 process_data_begin ] stop
								 */
// Start of branch "OUT11"
								if (OUT11 != null) {

									/**
									 * [tUnite_1 main ] start
									 */

									currentComponent = "tUnite_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "OUT11"

										);
									}

//////////

// for output
									row12 = new row12Struct();

									row12.Numero_d_action = OUT11.Numero_d_action;
									row12.Intitule_de_l_action = OUT11.Intitule_de_l_action;

									nb_line_tUnite_1++;

//////////

									tos_count_tUnite_1++;

									/**
									 * [tUnite_1 main ] stop
									 */

									/**
									 * [tUnite_1 process_data_begin ] start
									 */

									currentComponent = "tUnite_1";

									/**
									 * [tUnite_1 process_data_begin ] stop
									 */

									/**
									 * [tMap_12 main ] start
									 */

									currentComponent = "tMap_12";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row12"

										);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_12 = false;
									boolean mainRowRejected_tMap_12 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
										// ###############################
										// # Output tables

										insert__dim_action = null;

// # Output table : 'insert__dim_action'
										insert__dim_action_tmp.Numero_d_action = row12.Numero_d_action;
										insert__dim_action_tmp.Intitule_de_l_action = row12.Intitule_de_l_action;
										insert__dim_action = insert__dim_action_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_12 = false;

									tos_count_tMap_12++;

									/**
									 * [tMap_12 main ] stop
									 */

									/**
									 * [tMap_12 process_data_begin ] start
									 */

									currentComponent = "tMap_12";

									/**
									 * [tMap_12 process_data_begin ] stop
									 */
// Start of branch "insert__dim_action"
									if (insert__dim_action != null) {

										/**
										 * [tDBOutput_2 main ] start
										 */

										currentComponent = "tDBOutput_2";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "insert__dim_action"

											);
										}

										whetherReject_tDBOutput_2 = false;
										if (insert__dim_action.Numero_d_action == null) {
											pstmt_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(1, insert__dim_action.Numero_d_action);
										}

										if (insert__dim_action.Intitule_de_l_action == null) {
											pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2.setString(2, insert__dim_action.Intitule_de_l_action);
										}

										pstmt_tDBOutput_2.addBatch();
										nb_line_tDBOutput_2++;

										batchSizeCounter_tDBOutput_2++;

										if ((batchSize_tDBOutput_2 > 0)
												&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
											try {
												int countSum_tDBOutput_2 = 0;

												for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}
												rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												batchSizeCounter_tDBOutput_2 = 0;
											} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
												globalMap.put("tDBOutput_2_ERROR_MESSAGE", e_tDBOutput_2.getMessage());
												java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
														sqle_tDBOutput_2 = null;
												String errormessage_tDBOutput_2;
												if (ne_tDBOutput_2 != null) {
													// build new exception to provide the original cause
													sqle_tDBOutput_2 = new java.sql.SQLException(
															e_tDBOutput_2.getMessage() + "\ncaused by: "
																	+ ne_tDBOutput_2.getMessage(),
															ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
															ne_tDBOutput_2);
													errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
												} else {
													errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
												}

												int countSum_tDBOutput_2 = 0;
												for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}
												rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												System.err.println(errormessage_tDBOutput_2);

											}
										}

										commitCounter_tDBOutput_2++;
										if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
											if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
												try {
													int countSum_tDBOutput_2 = 0;

													for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}
													rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

													batchSizeCounter_tDBOutput_2 = 0;
												} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
													globalMap.put("tDBOutput_2_ERROR_MESSAGE",
															e_tDBOutput_2.getMessage());
													java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
															.getNextException(), sqle_tDBOutput_2 = null;
													String errormessage_tDBOutput_2;
													if (ne_tDBOutput_2 != null) {
														// build new exception to provide the original cause
														sqle_tDBOutput_2 = new java.sql.SQLException(
																e_tDBOutput_2.getMessage() + "\ncaused by: "
																		+ ne_tDBOutput_2.getMessage(),
																ne_tDBOutput_2.getSQLState(),
																ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
														errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
													} else {
														errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
													}

													int countSum_tDBOutput_2 = 0;
													for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}
													rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

													System.err.println(errormessage_tDBOutput_2);

												}
											}
											if (rowsToCommitCount_tDBOutput_2 != 0) {

											}
											conn_tDBOutput_2.commit();
											if (rowsToCommitCount_tDBOutput_2 != 0) {

												rowsToCommitCount_tDBOutput_2 = 0;
											}
											commitCounter_tDBOutput_2 = 0;
										}

										tos_count_tDBOutput_2++;

										/**
										 * [tDBOutput_2 main ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_end ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_end ] stop
										 */

									} // End of branch "insert__dim_action"

									/**
									 * [tMap_12 process_data_end ] start
									 */

									currentComponent = "tMap_12";

									/**
									 * [tMap_12 process_data_end ] stop
									 */

									/**
									 * [tUnite_1 process_data_end ] start
									 */

									currentComponent = "tUnite_1";

									/**
									 * [tUnite_1 process_data_end ] stop
									 */

								} // End of branch "OUT11"

								/**
								 * [tMap_10 process_data_end ] start
								 */

								currentComponent = "tMap_10";

								/**
								 * [tMap_10 process_data_end ] stop
								 */

							} // End of branch "row6_0"

							/**
							 * [tFileInputExcel_10 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_10";

							/**
							 * [tFileInputExcel_10 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_10 end ] start
							 */

							currentComponent = "tFileInputExcel_10";

						}

						globalMap.put("tFileInputExcel_10_NB_LINE", nb_line_tFileInputExcel_10);

					}

				} finally {

					if (!(source_tFileInputExcel_10 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_10.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_10", true);
				end_Hash.put("tFileInputExcel_10", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_10 end ] stop
				 */

				/**
				 * [tMap_10 end ] start
				 */

				currentComponent = "tMap_10";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6_0");
				}

				ok_Hash.put("tMap_10", true);
				end_Hash.put("tMap_10", System.currentTimeMillis());

				/**
				 * [tMap_10 end ] stop
				 */

				/**
				 * [tMap_11 begin ] start
				 */

				ok_Hash.put("tMap_11", false);
				start_Hash.put("tMap_11", System.currentTimeMillis());

				currentComponent = "tMap_11";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tMap_11 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_11__Struct {
				}
				Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
				outStruct out_tmp = new outStruct();
// ###############################

				/**
				 * [tMap_11 begin ] stop
				 */

				/**
				 * [tFileInputExcel_11 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_11", false);
				start_Hash.put("tFileInputExcel_11", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_11";

				int tos_count_tFileInputExcel_11 = 0;

				class RegexUtil_tFileInputExcel_11 {

					public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();

						if (useRegex) {// this part process the regex issue

							jxl.Sheet[] sheets = workbook.getSheets();
							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (int i = 0; i < sheets.length; i++) {
								String sheetName = sheets[i].getName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									jxl.Sheet sheet = workbook.getSheet(sheetName);
									if (sheet != null) {
										list.add(sheet);
									}
								}
							}

						} else {
							jxl.Sheet sheet = workbook.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<jxl.Sheet> getSheets(jxl.Workbook workbook, int index, boolean useRegex) {
						java.util.List<jxl.Sheet> list = new java.util.ArrayList<jxl.Sheet>();
						jxl.Sheet sheet = workbook.getSheet(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}

				RegexUtil_tFileInputExcel_11 regexUtil_tFileInputExcel_11 = new RegexUtil_tFileInputExcel_11();
				final jxl.WorkbookSettings workbookSettings_tFileInputExcel_11 = new jxl.WorkbookSettings();
				workbookSettings_tFileInputExcel_11.setDrawingsDisabled(true);
				workbookSettings_tFileInputExcel_11.setEncoding("UTF-8");

				Object source_tFileInputExcel_11 = "C:/Users/balkis/Desktop/RH/Suivi Formation 2022 v def.xls";
				final jxl.Workbook workbook_tFileInputExcel_11;

				java.io.InputStream toClose_tFileInputExcel_11 = null;
				java.io.BufferedInputStream buffIStreamtFileInputExcel_11 = null;
				try {
					if (source_tFileInputExcel_11 instanceof java.io.InputStream) {
						toClose_tFileInputExcel_11 = (java.io.InputStream) source_tFileInputExcel_11;
						buffIStreamtFileInputExcel_11 = new java.io.BufferedInputStream(toClose_tFileInputExcel_11);
						workbook_tFileInputExcel_11 = jxl.Workbook.getWorkbook(buffIStreamtFileInputExcel_11,
								workbookSettings_tFileInputExcel_11);
					} else if (source_tFileInputExcel_11 instanceof String) {
						toClose_tFileInputExcel_11 = new java.io.FileInputStream(source_tFileInputExcel_11.toString());
						buffIStreamtFileInputExcel_11 = new java.io.BufferedInputStream(toClose_tFileInputExcel_11);
						workbook_tFileInputExcel_11 = jxl.Workbook.getWorkbook(buffIStreamtFileInputExcel_11,
								workbookSettings_tFileInputExcel_11);
					} else {
						workbook_tFileInputExcel_11 = null;
						throw new java.lang.Exception(
								"The data source should be specified as Inputstream or File Path!");
					}
				} finally {
					try {
						if (buffIStreamtFileInputExcel_11 != null) {
							buffIStreamtFileInputExcel_11.close();
						}
					} catch (Exception e) {
						globalMap.put("tFileInputExcel_11_ERROR_MESSAGE", e.getMessage());
					}
				}
				try {
					java.util.List<jxl.Sheet> sheetList_tFileInputExcel_11 = new java.util.ArrayList<jxl.Sheet>();
					sheetList_tFileInputExcel_11.addAll(regexUtil_tFileInputExcel_11
							.getSheets(workbook_tFileInputExcel_11, "Plan Actions 2022", false));
					if (sheetList_tFileInputExcel_11.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<jxl.Sheet> sheet_FilterNullList_tFileInputExcel_11 = new java.util.ArrayList<jxl.Sheet>();
					for (jxl.Sheet sheet_FilterNull_tFileInputExcel_11 : sheetList_tFileInputExcel_11) {
						if (sheet_FilterNull_tFileInputExcel_11.getRows() > 0) {
							sheet_FilterNullList_tFileInputExcel_11.add(sheet_FilterNull_tFileInputExcel_11);
						}
					}
					sheetList_tFileInputExcel_11 = sheet_FilterNullList_tFileInputExcel_11;
					if (sheetList_tFileInputExcel_11.size() > 0) {
						int nb_line_tFileInputExcel_11 = 0;

						int begin_line_tFileInputExcel_11 = 1;

						int footer_input_tFileInputExcel_11 = 0;

						int end_line_tFileInputExcel_11 = 0;
						for (jxl.Sheet sheet_tFileInputExcel_11 : sheetList_tFileInputExcel_11) {
							end_line_tFileInputExcel_11 += sheet_tFileInputExcel_11.getRows();
						}
						end_line_tFileInputExcel_11 -= footer_input_tFileInputExcel_11;
						int limit_tFileInputExcel_11 = -1;
						int start_column_tFileInputExcel_11 = 1 - 1;
						int end_column_tFileInputExcel_11 = sheetList_tFileInputExcel_11.get(0).getColumns();
						jxl.Cell[] row_tFileInputExcel_11 = null;
						jxl.Sheet sheet_tFileInputExcel_11 = sheetList_tFileInputExcel_11.get(0);
						int rowCount_tFileInputExcel_11 = 0;
						int sheetIndex_tFileInputExcel_11 = 0;
						int currentRows_tFileInputExcel_11 = sheetList_tFileInputExcel_11.get(0).getRows();

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_11 = new java.text.DecimalFormat(
								"#.####################################");
						char separatorChar_tFileInputExcel_11 = df_tFileInputExcel_11.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_11 = begin_line_tFileInputExcel_11; i_tFileInputExcel_11 < end_line_tFileInputExcel_11; i_tFileInputExcel_11++) {

							int emptyColumnCount_tFileInputExcel_11 = 0;

							if (limit_tFileInputExcel_11 != -1
									&& nb_line_tFileInputExcel_11 >= limit_tFileInputExcel_11) {
								break;
							}

							while (i_tFileInputExcel_11 >= rowCount_tFileInputExcel_11
									+ currentRows_tFileInputExcel_11) {
								rowCount_tFileInputExcel_11 += currentRows_tFileInputExcel_11;
								sheet_tFileInputExcel_11 = sheetList_tFileInputExcel_11
										.get(++sheetIndex_tFileInputExcel_11);
								currentRows_tFileInputExcel_11 = sheet_tFileInputExcel_11.getRows();
							}
							if (rowCount_tFileInputExcel_11 <= i_tFileInputExcel_11) {
								row_tFileInputExcel_11 = sheet_tFileInputExcel_11
										.getRow(i_tFileInputExcel_11 - rowCount_tFileInputExcel_11);
							}
							globalMap.put("tFileInputExcel_11_CURRENT_SHEET", sheet_tFileInputExcel_11.getName());
							row9 = null;
							int tempRowLength_tFileInputExcel_11 = 12;

							int columnIndex_tFileInputExcel_11 = 0;

//
//end%>

							String[] temp_row_tFileInputExcel_11 = new String[tempRowLength_tFileInputExcel_11];
							int actual_end_column_tFileInputExcel_11 = end_column_tFileInputExcel_11 > row_tFileInputExcel_11.length
									? row_tFileInputExcel_11.length
									: end_column_tFileInputExcel_11;

							java.util.TimeZone zone_tFileInputExcel_11 = java.util.TimeZone.getTimeZone("GMT");
							java.text.SimpleDateFormat sdf_tFileInputExcel_11 = new java.text.SimpleDateFormat(
									"dd-MM-yyyy");
							sdf_tFileInputExcel_11.setTimeZone(zone_tFileInputExcel_11);

							for (int i = 0; i < tempRowLength_tFileInputExcel_11; i++) {

								if (i + start_column_tFileInputExcel_11 < actual_end_column_tFileInputExcel_11) {

									jxl.Cell cell_tFileInputExcel_11 = row_tFileInputExcel_11[i
											+ start_column_tFileInputExcel_11];
									temp_row_tFileInputExcel_11[i] = cell_tFileInputExcel_11.getContents();

								} else {
									temp_row_tFileInputExcel_11[i] = "";
								}
							}

							boolean whetherReject_tFileInputExcel_11 = false;
							row9 = new row9Struct();
							int curColNum_tFileInputExcel_11 = -1;
							String curColName_tFileInputExcel_11 = "";
							try {
								columnIndex_tFileInputExcel_11 = 0;

								if (temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11].length() > 0) {
									curColNum_tFileInputExcel_11 = columnIndex_tFileInputExcel_11
											+ start_column_tFileInputExcel_11 + 1;
									curColName_tFileInputExcel_11 = "Num_action";
									row9.Num_action = ParserUtils.parseTo_Integer(
											temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11]);
								} else {
									row9.Num_action = null;
									emptyColumnCount_tFileInputExcel_11++;
								}
								columnIndex_tFileInputExcel_11 = 1;

								if (temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11].length() > 0) {
									curColNum_tFileInputExcel_11 = columnIndex_tFileInputExcel_11
											+ start_column_tFileInputExcel_11 + 1;
									curColName_tFileInputExcel_11 = "Intitul__de_l_action";
									row9.Intitul__de_l_action = temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11];
								} else {
									row9.Intitul__de_l_action = null;
									emptyColumnCount_tFileInputExcel_11++;
								}
								columnIndex_tFileInputExcel_11 = 2;

								if (temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11].length() > 0) {
									curColNum_tFileInputExcel_11 = columnIndex_tFileInputExcel_11
											+ start_column_tFileInputExcel_11 + 1;
									curColName_tFileInputExcel_11 = "Date_d_but";
									row9.Date_d_but = temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11];
								} else {
									row9.Date_d_but = null;
									emptyColumnCount_tFileInputExcel_11++;
								}
								columnIndex_tFileInputExcel_11 = 3;

								if (temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11].length() > 0) {
									curColNum_tFileInputExcel_11 = columnIndex_tFileInputExcel_11
											+ start_column_tFileInputExcel_11 + 1;
									curColName_tFileInputExcel_11 = "Date_fin";
									row9.Date_fin = temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11];
								} else {
									row9.Date_fin = null;
									emptyColumnCount_tFileInputExcel_11++;
								}
								columnIndex_tFileInputExcel_11 = 4;

								if (temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11].length() > 0) {
									curColNum_tFileInputExcel_11 = columnIndex_tFileInputExcel_11
											+ start_column_tFileInputExcel_11 + 1;
									curColName_tFileInputExcel_11 = "Nb_de_participants";
									row9.Nb_de_participants = ParserUtils.parseTo_Integer(
											temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11]);
								} else {
									row9.Nb_de_participants = null;
									emptyColumnCount_tFileInputExcel_11++;
								}
								columnIndex_tFileInputExcel_11 = 5;

								if (temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11].length() > 0) {
									curColNum_tFileInputExcel_11 = columnIndex_tFileInputExcel_11
											+ start_column_tFileInputExcel_11 + 1;
									curColName_tFileInputExcel_11 = "nb_de_jours";
									row9.nb_de_jours = temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11];
								} else {
									row9.nb_de_jours = null;
									emptyColumnCount_tFileInputExcel_11++;
								}
								columnIndex_tFileInputExcel_11 = 6;

								if (temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11].length() > 0) {
									curColNum_tFileInputExcel_11 = columnIndex_tFileInputExcel_11
											+ start_column_tFileInputExcel_11 + 1;
									curColName_tFileInputExcel_11 = "nb_jours_total";
									row9.nb_jours_total = temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11];
								} else {
									row9.nb_jours_total = null;
									emptyColumnCount_tFileInputExcel_11++;
								}
								columnIndex_tFileInputExcel_11 = 7;

								if (temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11].length() > 0) {
									curColNum_tFileInputExcel_11 = columnIndex_tFileInputExcel_11
											+ start_column_tFileInputExcel_11 + 1;
									curColName_tFileInputExcel_11 = "nb_d_heures";
									row9.nb_d_heures = ParserUtils.parseTo_Integer(
											temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11]);
								} else {
									row9.nb_d_heures = null;
									emptyColumnCount_tFileInputExcel_11++;
								}
								columnIndex_tFileInputExcel_11 = 8;

								if (temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11].length() > 0) {
									curColNum_tFileInputExcel_11 = columnIndex_tFileInputExcel_11
											+ start_column_tFileInputExcel_11 + 1;
									curColName_tFileInputExcel_11 = "nb_d_heures_total";
									row9.nb_d_heures_total = ParserUtils.parseTo_Integer(
											temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11]);
								} else {
									row9.nb_d_heures_total = null;
									emptyColumnCount_tFileInputExcel_11++;
								}
								columnIndex_tFileInputExcel_11 = 9;

								if (temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11].length() > 0) {
									curColNum_tFileInputExcel_11 = columnIndex_tFileInputExcel_11
											+ start_column_tFileInputExcel_11 + 1;
									curColName_tFileInputExcel_11 = "Organisme__Formateurs";
									row9.Organisme__Formateurs = temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11];
								} else {
									row9.Organisme__Formateurs = null;
									emptyColumnCount_tFileInputExcel_11++;
								}
								columnIndex_tFileInputExcel_11 = 10;

								if (temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11].length() > 0) {
									curColNum_tFileInputExcel_11 = columnIndex_tFileInputExcel_11
											+ start_column_tFileInputExcel_11 + 1;
									curColName_tFileInputExcel_11 = "Mode";
									row9.Mode = temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11];
								} else {
									row9.Mode = null;
									emptyColumnCount_tFileInputExcel_11++;
								}
								columnIndex_tFileInputExcel_11 = 11;

								if (temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11].length() > 0) {
									curColNum_tFileInputExcel_11 = columnIndex_tFileInputExcel_11
											+ start_column_tFileInputExcel_11 + 1;
									curColName_tFileInputExcel_11 = "Co_t__HT";
									row9.Co_t__HT = ParserUtils.parseTo_Integer(
											temp_row_tFileInputExcel_11[columnIndex_tFileInputExcel_11]);
								} else {
									row9.Co_t__HT = null;
									emptyColumnCount_tFileInputExcel_11++;
								}

								nb_line_tFileInputExcel_11++;

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputExcel_11_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputExcel_11 = true;
								System.err.println(e.getMessage());
								row9 = null;
							}

							/**
							 * [tFileInputExcel_11 begin ] stop
							 */

							/**
							 * [tFileInputExcel_11 main ] start
							 */

							currentComponent = "tFileInputExcel_11";

							tos_count_tFileInputExcel_11++;

							/**
							 * [tFileInputExcel_11 main ] stop
							 */

							/**
							 * [tFileInputExcel_11 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_11";

							/**
							 * [tFileInputExcel_11 process_data_begin ] stop
							 */
// Start of branch "row9"
							if (row9 != null) {

								/**
								 * [tMap_11 main ] start
								 */

								currentComponent = "tMap_11";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row9"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_11 = false;
								boolean mainRowRejected_tMap_11 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
									// ###############################
									// # Output tables

									out = null;

// # Output table : 'out'
									out_tmp.Numero_d_action = row9.Num_action;
									out_tmp.Intitule_de_l_action = row9.Intitul__de_l_action;
									out = out_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_11 = false;

								tos_count_tMap_11++;

								/**
								 * [tMap_11 main ] stop
								 */

								/**
								 * [tMap_11 process_data_begin ] start
								 */

								currentComponent = "tMap_11";

								/**
								 * [tMap_11 process_data_begin ] stop
								 */
// Start of branch "out"
								if (out != null) {

									/**
									 * [tUnite_1 main ] start
									 */

									currentComponent = "tUnite_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "out"

										);
									}

//////////

// for output
									row12 = new row12Struct();

									row12.Numero_d_action = out.Numero_d_action;
									row12.Intitule_de_l_action = out.Intitule_de_l_action;

									nb_line_tUnite_1++;

//////////

									tos_count_tUnite_1++;

									/**
									 * [tUnite_1 main ] stop
									 */

									/**
									 * [tUnite_1 process_data_begin ] start
									 */

									currentComponent = "tUnite_1";

									/**
									 * [tUnite_1 process_data_begin ] stop
									 */

									/**
									 * [tMap_12 main ] start
									 */

									currentComponent = "tMap_12";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row12"

										);
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_12 = false;
									boolean mainRowRejected_tMap_12 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
										// ###############################
										// # Output tables

										insert__dim_action = null;

// # Output table : 'insert__dim_action'
										insert__dim_action_tmp.Numero_d_action = row12.Numero_d_action;
										insert__dim_action_tmp.Intitule_de_l_action = row12.Intitule_de_l_action;
										insert__dim_action = insert__dim_action_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_12 = false;

									tos_count_tMap_12++;

									/**
									 * [tMap_12 main ] stop
									 */

									/**
									 * [tMap_12 process_data_begin ] start
									 */

									currentComponent = "tMap_12";

									/**
									 * [tMap_12 process_data_begin ] stop
									 */
// Start of branch "insert__dim_action"
									if (insert__dim_action != null) {

										/**
										 * [tDBOutput_2 main ] start
										 */

										currentComponent = "tDBOutput_2";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "insert__dim_action"

											);
										}

										whetherReject_tDBOutput_2 = false;
										if (insert__dim_action.Numero_d_action == null) {
											pstmt_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_2.setInt(1, insert__dim_action.Numero_d_action);
										}

										if (insert__dim_action.Intitule_de_l_action == null) {
											pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_2.setString(2, insert__dim_action.Intitule_de_l_action);
										}

										pstmt_tDBOutput_2.addBatch();
										nb_line_tDBOutput_2++;

										batchSizeCounter_tDBOutput_2++;

										if ((batchSize_tDBOutput_2 > 0)
												&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
											try {
												int countSum_tDBOutput_2 = 0;

												for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}
												rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												batchSizeCounter_tDBOutput_2 = 0;
											} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
												globalMap.put("tDBOutput_2_ERROR_MESSAGE", e_tDBOutput_2.getMessage());
												java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
														sqle_tDBOutput_2 = null;
												String errormessage_tDBOutput_2;
												if (ne_tDBOutput_2 != null) {
													// build new exception to provide the original cause
													sqle_tDBOutput_2 = new java.sql.SQLException(
															e_tDBOutput_2.getMessage() + "\ncaused by: "
																	+ ne_tDBOutput_2.getMessage(),
															ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
															ne_tDBOutput_2);
													errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
												} else {
													errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
												}

												int countSum_tDBOutput_2 = 0;
												for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
													countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
															: countEach_tDBOutput_2);
												}
												rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

												insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

												System.err.println(errormessage_tDBOutput_2);

											}
										}

										commitCounter_tDBOutput_2++;
										if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
											if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {
												try {
													int countSum_tDBOutput_2 = 0;

													for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}
													rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

													batchSizeCounter_tDBOutput_2 = 0;
												} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
													globalMap.put("tDBOutput_2_ERROR_MESSAGE",
															e_tDBOutput_2.getMessage());
													java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
															.getNextException(), sqle_tDBOutput_2 = null;
													String errormessage_tDBOutput_2;
													if (ne_tDBOutput_2 != null) {
														// build new exception to provide the original cause
														sqle_tDBOutput_2 = new java.sql.SQLException(
																e_tDBOutput_2.getMessage() + "\ncaused by: "
																		+ ne_tDBOutput_2.getMessage(),
																ne_tDBOutput_2.getSQLState(),
																ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
														errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
													} else {
														errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
													}

													int countSum_tDBOutput_2 = 0;
													for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}
													rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

													insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

													System.err.println(errormessage_tDBOutput_2);

												}
											}
											if (rowsToCommitCount_tDBOutput_2 != 0) {

											}
											conn_tDBOutput_2.commit();
											if (rowsToCommitCount_tDBOutput_2 != 0) {

												rowsToCommitCount_tDBOutput_2 = 0;
											}
											commitCounter_tDBOutput_2 = 0;
										}

										tos_count_tDBOutput_2++;

										/**
										 * [tDBOutput_2 main ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_2 process_data_end ] start
										 */

										currentComponent = "tDBOutput_2";

										/**
										 * [tDBOutput_2 process_data_end ] stop
										 */

									} // End of branch "insert__dim_action"

									/**
									 * [tMap_12 process_data_end ] start
									 */

									currentComponent = "tMap_12";

									/**
									 * [tMap_12 process_data_end ] stop
									 */

									/**
									 * [tUnite_1 process_data_end ] start
									 */

									currentComponent = "tUnite_1";

									/**
									 * [tUnite_1 process_data_end ] stop
									 */

								} // End of branch "out"

								/**
								 * [tMap_11 process_data_end ] start
								 */

								currentComponent = "tMap_11";

								/**
								 * [tMap_11 process_data_end ] stop
								 */

							} // End of branch "row9"

							/**
							 * [tFileInputExcel_11 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_11";

							/**
							 * [tFileInputExcel_11 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_11 end ] start
							 */

							currentComponent = "tFileInputExcel_11";

						}

						globalMap.put("tFileInputExcel_11_NB_LINE", nb_line_tFileInputExcel_11);

					}

				} finally {

					if (!(source_tFileInputExcel_11 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_11.close();
					}

				}

				ok_Hash.put("tFileInputExcel_11", true);
				end_Hash.put("tFileInputExcel_11", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_11 end ] stop
				 */

				/**
				 * [tMap_11 end ] start
				 */

				currentComponent = "tMap_11";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tMap_11", true);
				end_Hash.put("tMap_11", System.currentTimeMillis());

				/**
				 * [tMap_11 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "OUT4", "OUT2", "OUT3", "OUT9", "OUT8", "OUT7",
							"OUT10", "OUT11", "OUT1", "out5", "out");
				}

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tMap_12 end ] start
				 */

				currentComponent = "tMap_12";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tMap_12", true);
				end_Hash.put("tMap_12", System.currentTimeMillis());

				/**
				 * [tMap_12 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					int countSum_tDBOutput_2 = 0;
					if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
						rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

				} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
					globalMap.put("tDBOutput_2_ERROR_MESSAGE", e_tDBOutput_2.getMessage());
					java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(), sqle_tDBOutput_2 = null;
					String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(
								e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(),
								ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
					} else {
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}

					int countSum_tDBOutput_2 = 0;
					for (int countEach_tDBOutput_2 : e_tDBOutput_2.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					System.err.println(errormessage_tDBOutput_2);

				}

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);
				if (rowsToCommitCount_tDBOutput_2 != 0) {

				}
				conn_tDBOutput_2.commit();
				if (rowsToCommitCount_tDBOutput_2 != 0) {

					rowsToCommitCount_tDBOutput_2 = 0;
				}
				commitCounter_tDBOutput_2 = 0;

				conn_tDBOutput_2.close();

				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "insert__dim_action");
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_1 finally ] start
				 */

				currentComponent = "tFileInputExcel_1";

				/**
				 * [tFileInputExcel_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileInputExcel_2 finally ] start
				 */

				currentComponent = "tFileInputExcel_2";

				/**
				 * [tFileInputExcel_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tFileInputExcel_3 finally ] start
				 */

				currentComponent = "tFileInputExcel_3";

				/**
				 * [tFileInputExcel_3 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tFileInputExcel_4 finally ] start
				 */

				currentComponent = "tFileInputExcel_4";

				/**
				 * [tFileInputExcel_4 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tFileInputExcel_5 finally ] start
				 */

				currentComponent = "tFileInputExcel_5";

				/**
				 * [tFileInputExcel_5 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tFileInputExcel_6 finally ] start
				 */

				currentComponent = "tFileInputExcel_6";

				/**
				 * [tFileInputExcel_6 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tFileInputExcel_7 finally ] start
				 */

				currentComponent = "tFileInputExcel_7";

				/**
				 * [tFileInputExcel_7 finally ] stop
				 */

				/**
				 * [tMap_8 finally ] start
				 */

				currentComponent = "tMap_8";

				/**
				 * [tMap_8 finally ] stop
				 */

				/**
				 * [tFileInputExcel_8 finally ] start
				 */

				currentComponent = "tFileInputExcel_8";

				/**
				 * [tFileInputExcel_8 finally ] stop
				 */

				/**
				 * [tMap_9 finally ] start
				 */

				currentComponent = "tMap_9";

				/**
				 * [tMap_9 finally ] stop
				 */

				/**
				 * [tFileInputExcel_9 finally ] start
				 */

				currentComponent = "tFileInputExcel_9";

				/**
				 * [tFileInputExcel_9 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tFileInputExcel_10 finally ] start
				 */

				currentComponent = "tFileInputExcel_10";

				/**
				 * [tFileInputExcel_10 finally ] stop
				 */

				/**
				 * [tMap_10 finally ] start
				 */

				currentComponent = "tMap_10";

				/**
				 * [tMap_10 finally ] stop
				 */

				/**
				 * [tFileInputExcel_11 finally ] start
				 */

				currentComponent = "tFileInputExcel_11";

				/**
				 * [tFileInputExcel_11 finally ] stop
				 */

				/**
				 * [tMap_11 finally ] start
				 */

				currentComponent = "tMap_11";

				/**
				 * [tMap_11 finally ] stop
				 */

				/**
				 * [tUnite_1 finally ] start
				 */

				currentComponent = "tUnite_1";

				/**
				 * [tUnite_1 finally ] stop
				 */

				/**
				 * [tMap_12 finally ] start
				 */

				currentComponent = "tMap_12";

				/**
				 * [tMap_12 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
						if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_2")) != null) {
							pstmtToClose_tDBOutput_2.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_2") == null) {
						java.sql.Connection ctn_tDBOutput_2 = null;
						if ((ctn_tDBOutput_2 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_2")) != null) {
							try {
								ctn_tDBOutput_2.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
								String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
										+ sqlEx_tDBOutput_2.getMessage();
								System.err.println(errorMessage_tDBOutput_2);
							}
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private SyncInt runningThreadCount = new SyncInt();

	private class SyncInt {
		private int count = 0;

		public synchronized void add(int i) {
			count += i;
		}

		public synchronized int getCount() {
			return count;
		}
	}

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final dim_action dim_actionClass = new dim_action();

		int exitCode = dim_actionClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = dim_action.class.getClassLoader()
					.getResourceAsStream("rh/dim_action_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = dim_action.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs
		final Thread launchingThread = Thread.currentThread();
		runningThreadCount.add(1);
		new Thread() {
			public void run() {
				java.util.Map threadRunResultMap = new java.util.HashMap();
				threadRunResultMap.put("errorCode", null);
				threadRunResultMap.put("status", "");
				threadLocal.set(threadRunResultMap);

				try {
					((java.util.Map) threadLocal.get()).put("errorCode", null);
					tFileInputExcel_1Process(globalMap);
					if (!"failure".equals(((java.util.Map) threadLocal.get()).get("status"))) {
						((java.util.Map) threadLocal.get()).put("status", "end");
					}
				} catch (TalendException e_tFileInputExcel_1) {
					globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", -1);

					e_tFileInputExcel_1.printStackTrace();

				} catch (java.lang.Error e_tFileInputExcel_1) {
					globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", -1);
					((java.util.Map) threadLocal.get()).put("status", "failure");
					throw e_tFileInputExcel_1;

				} finally {
					Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
					String localStatus = (String) (((java.util.Map) threadLocal.get()).get("status"));
					if (localErrorCode != null) {
						if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
							errorCode = localErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = localStatus;
					}

					if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
						launchingThread.interrupt();
					}

					runningThreadCount.add(-1);
				}
			}
		}.start();

		boolean interrupted = false;
		while (runningThreadCount.getCount() > 0) {
			try {
				Thread.sleep(10);
			} catch (java.lang.InterruptedException e) {
				interrupted = true;
			} catch (java.lang.Exception e) {
				e.printStackTrace();
			}
		}

		if (interrupted) {
			Thread.currentThread().interrupt();
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : dim_action");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
		String localStatus = (String) (((java.util.Map) threadLocal.get()).get("status"));
		if (localErrorCode != null) {
			if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
				errorCode = localErrorCode;
			}
		}
		if (localStatus != null && !status.equals("failure")) {
			status = localStatus;
		}

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 497791 characters generated by Talend Open Studio for Data Integration on the
 * 23 mars 2024 à 04:10:23 WAT
 ************************************************************************************************/